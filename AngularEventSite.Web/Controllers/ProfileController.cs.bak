// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ProfileController.cs" company="BlueLeet">
//   Copyright (C) BlueLeet - All Rights Reserved
//   Unauthorized copying of this file, via any medium is strictly prohibited
//   Proprietary and confidential
// </copyright>
// <summary>
//   The login register surface controller.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

// ReSharper disable StyleCop.SA1600
namespace AngularEventSite.Web.Controllers
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System.Web.Http;

    using BlueLeet.UCodeFirst.Helpers.Abstraction;

    using Newtonsoft.Json.Linq;

    using AngularEventSite.Web.Abstraction;
    using AngularEventSite.Web.Entities.Payloads;
    using AngularEventSite.Web.Enums;
    using AngularEventSite.Web.Extensions;
    using AngularEventSite.Web.MediaTypes;

    using Umbraco.Core;
    using Umbraco.Core.Configuration;
    using Umbraco.Core.Models;

    using X.PagedList;

    /// <summary>
    /// The login register surface controller.
    /// </summary>
    public sealed class ProfileController : BaseApiController
    {
        /// <inheritdoc/>
        public ProfileController(IContextService contextService, IMembershipService membershipService, IUCodeFirstHelper codeFirstHelper)
            : base(contextService, membershipService, codeFirstHelper)
        {
        }

        /// <summary>
        /// Get a member profile.
        /// </summary>
        /// <param name="id">Optional: what member to fetch, uses current logged member if omitted.</param>
        /// <returns>A payload with user.</returns>
        [HttpPost]
        public IHttpActionResult GetProfilePost(int? id = null)
        {
            var payload = new PayloadResult();
            ISiteMember member;

            if (!id.HasValue && Members.IsLoggedIn())
            {
                var m = Members.GetCurrentMember();
                member = ContextService.MembershipHelper.MapMember(m);
            }
            else if (id.HasValue)
            {
                var m = Members.GetById(id.Value);
                member = ContextService.MembershipHelper.MapMember(m);
            }
            else
            {
                payload.SetMessageType(GenericMessages.Danger);
                payload.SetMessage("No member is logged in and no id was passed!");
                return Error(payload, HttpStatusCode.InternalServerError);
            }

            payload.SetOrUpdate(nameof(PayloadFields.User), member);

            return Json(payload);
        }

        [HttpPost]
        public IHttpActionResult GetPhotosPost(int? page = null, int? pageSize = null, int? id = null)
        {
            ISiteMember member;

            if (!id.HasValue && Members.IsLoggedIn())
            {
                var m = Members.GetCurrentMember();
                member = ContextService.MembershipHelper.MapMember(m);
            }
            else if (id.HasValue)
            {
                var m = Members.GetById(id.Value);
                member = ContextService.MembershipHelper.MapMember(m);
            }
            else
            {
                var payload = new PayloadResult();
                payload.SetMessageType(GenericMessages.Danger);
                payload.SetMessage("No member is logged in and no id was passed!");
                return Error(payload, HttpStatusCode.InternalServerError);
            }

            var photos = member.GetPhotos()
                .Select(
                    media =>
                        {
                            var typedMedia = Umbraco.TypedMedia(media.Id);
                            var mediaModel = (MemberImageType)CodeFirstHelper.TypedMedia(typedMedia);
                            return mediaModel;
                        })
                .OrderByDescending(x => x.CreateDate);

            var pageNumber = page ?? 1;
            var pagedResult = photos.ToPagedList(pageNumber, pageSize ?? 25);

            return Json(new { items = pagedResult, totalPages = pagedResult.PageCount });
        }

        [HttpPost]
        public IHttpActionResult SaveProfilePost(PayloadResult profile)
        {
            var m = Services.MemberService.GetByEmail(profile.GetValue<string>("email"));
            var member = ContextService.MembershipHelper.MapMember(m);
            var name = profile.GetValue<string>(nameof(ISiteMember.Name))?.Split(' ');
            if (name != null)
            {
                var firstName = name[0];
                if (!string.IsNullOrEmpty(firstName))
                {
                    member.FirstName = name[0];
                }

                var lastName = string.Join(" ", name.Skip(1));
                if (!string.IsNullOrEmpty(lastName))
                {
                    member.LastName = lastName;
                }
            }

            var aboutMe = profile.GetValue<string>(nameof(ISiteMember.AboutMe));
            if (aboutMe != null)
            {
                member.AboutMe = aboutMe;
            }

            var bio = profile.GetValue<string>(nameof(ISiteMember.Bio));
            if (bio != null)
            {
                member.Bio = bio;
            }

            if (ContextService.UserHelper.IsAuthenticated())
            {
                var memberField = profile.GetValue<string>(nameof(ISiteMember.MemberField));
                if (memberField != null)
                {
                    member.MemberField = memberField;
                }
            }

            return Json(ContextService.MembershipHelper.SaveMember(member).Success);
        }

        [HttpPost]
        public IHttpActionResult SavePhotosPost(PayloadResult result)
        {
            var changes = result.GetValue("photoChanges") as JArray;
            if (changes == null)
            {
                return Json(false);
            }
            
            var hairColors = GetCachePreValues(nameof(MemberImageType), nameof(MemberImageType.HairColor)).ToList();
            var hairLength = GetCachePreValues(nameof(MemberImageType), nameof(MemberImageType.HairLength)).ToList();
            var colorType = GetCachePreValues(nameof(MemberImageType), nameof(MemberImageType.ColorType)).ToList();
            var texture = GetCachePreValues(nameof(MemberImageType), nameof(MemberImageType.Texture)).ToList();

            foreach (var photo in changes)
            {
                var media = Services.MediaService.GetById(photo.Value<int>("id"));
                var props = photo.Value<JObject>();
                foreach (var prop in props.Properties().Where(x => !x.Name.Equals("id")))
                {
                    var value = prop.Value.Value<string>();
                    IEnumerable<KeyValuePair<string, PreValue>> linq;
                    if (prop.Name.Equals(nameof(MemberImageType.HairColor), StringComparison.OrdinalIgnoreCase))
                    {
                        linq = hairColors;
                    }
                    else if (prop.Name.Equals(nameof(MemberImageType.HairLength), StringComparison.OrdinalIgnoreCase))
                    {
                        linq = hairLength;
                    }
                    else if (prop.Name.Equals(nameof(MemberImageType.ColorType), StringComparison.OrdinalIgnoreCase))
                    {
                        linq = colorType;
                    }
                    else if (prop.Name.Equals(nameof(MemberImageType.Texture), StringComparison.OrdinalIgnoreCase))
                    {
                        linq = texture;
                    }
                    else
                    {
                        media.SetValue(prop.Name, value);
                        continue;
                    }
                    
                    media.SetValue(prop.Name, linq.Where(x => x.Value.Value.Equals(value, StringComparison.OrdinalIgnoreCase)).Select(x => x.Value.Id).First());
                }

                Services.MediaService.Save(media);
            }

            return Json(true);
        }

        [HttpPost]
        public IHttpActionResult SetAvatarPost(string url)
        {
            var memberProfile = Members.GetCurrentMemberProfileModel();
            memberProfile.MemberProperties.Single(x => x.Alias.Equals(nameof(ISiteMember.Avatar), StringComparison.OrdinalIgnoreCase)).Value = url;

            return Json(Members.UpdateMemberProfile(memberProfile).Success);
        }

        [HttpPost]
        public IHttpActionResult DeletePhotoPost(int id)
        {
            var currentMember = Members.GetCurrentMember();
            var photoToRemove = Umbraco.TypedMedia(id);

            if (photoToRemove.CreatorId == currentMember.CreatorId || ContextService.UserHelper.IsAuthenticated())
            {
                var m = Services.MediaService.GetById(id);
                Services.MediaService.Delete(m);
                return Json(true);
            }

            return Json("You have no permission to remove this photo!", HttpStatusCode.BadRequest);
        }

        public async Task<IHttpActionResult> UploadPhotos()
        {
            int mediaParent;

            if (!Request.Content.IsMimeMultipartContent())
            {
                throw new HttpResponseException(HttpStatusCode.UnsupportedMediaType);
            }

            var m = Members.GetCurrentMember();
            var member = ContextService.MembershipHelper.MapMember(m);
            var result = await Request.Content.ReadAsMultipartAsync();
            var fileList = new List<IMedia>();
            var root = Services.MediaService.GetRootMedia();
            var memberMediaFolder = root.FirstOrDefault(x => x.Name.Equals(member.Email))
                                    ?? Services.MediaService.CreateMediaWithIdentity(member.Email, -1, Constants.Conventions.MediaTypes.Folder);

            var currentYear = DateTime.Now.ToString("yyyy");
            var typedMediaFolder = Umbraco.TypedMedia(memberMediaFolder.Id);
            var typedYearFolder = typedMediaFolder.Children.FirstOrDefault(content => content.Name.Equals(currentYear));
            if (typedYearFolder == null)
            {
                mediaParent = Services.MediaService.CreateMediaWithIdentity(currentYear, memberMediaFolder.Id, Constants.Conventions.MediaTypes.Folder).Id;
            }
            else
            {
                mediaParent = typedYearFolder.Id;
            }

            foreach (var stream in result.Contents)
            {
                var fileName = stream.Headers.ContentDisposition.FileName.TrimStart('"').TrimEnd('"').Trim();
                var extension = Path.GetExtension(fileName).EnsureStartsWith('.').Substring(1).ToLower(CultureInfo.InvariantCulture);
                fileName = Path.GetFileNameWithoutExtension(fileName);

                if (UmbracoConfig.For.UmbracoSettings().Content.DisallowedUploadFiles.Contains(extension))
                {
                    continue;
                }

                var fileStream = await stream.ReadAsStreamAsync();
                var mediaType = nameof(MemberImageType);
                if (!UmbracoConfig.For.UmbracoSettings().Content.ImageFileTypes.Contains(extension))
                {
                    Logger.Warn(GetType(), "Invalid upload extension: '{0}' is not an accepted image type!", () => extension);
                    return Error($"'{extension}' is not an accepted image type!");
                }

                // simplify image name with a date.
                var dateFormat = Umbraco.GetDictionaryValue("Profile.MediaNameDateFormat", "MMMM-dddd");
                var dateString = DateTime.Now.ToString(dateFormat);
                var unmodifiedName = fileName;
                fileName = dateString + "-" + fileName.ToSafeAlias(true);
                fileName = fileName.CapitalizeAll().EnsureEndsWith("." + extension);

                var media = Services.MediaService.CreateMedia(fileName, mediaParent, mediaType);
                media.SetValue(Constants.Conventions.Media.File, fileName, fileStream);
                media.SetValue(nameof(MemberImageType.DisplayName), unmodifiedName);
                Services.MediaService.Save(media);

                fileList.Add(media);
            }

            var photos = fileList.Select(
                media =>
                    {
                        var typedMedia = Umbraco.TypedMedia(media.Id);
                        var mediaModel = (MemberImageType)CodeFirstHelper.TypedMedia(typedMedia);
                        
                        return mediaModel;
                    }).OrderByDescending(x => x.CreateDate).ToList();

            return Json(photos);
        }
        
        [HttpPost]
        public IHttpActionResult PhotoApprovalPost(int imageId, bool approve)
        {
            if (!ContextService.UserHelper.IsAuthenticated())
            {
                return Unauthorized();
            }

            var media = Services.MediaService.GetById(imageId);
            media.SetValue(nameof(MemberImageType.IsApproved), approve);
            Services.MediaService.Save(media);
            return Ok();
        }

        [HttpPost]
        public IHttpActionResult GetPhotoPrevaluesPost()
        {
            var payload = new PayloadResult();
            payload.SetOrUpdate(nameof(MemberImageType.HairColor), GetCachePreValues(nameof(MemberImageType), nameof(MemberImageType.HairColor)).Select(x => x.Value.Value).ToList());
            payload.SetOrUpdate(nameof(MemberImageType.HairLength), GetCachePreValues(nameof(MemberImageType), nameof(MemberImageType.HairLength)).Select(x => x.Value.Value).ToList());
            payload.SetOrUpdate(nameof(MemberImageType.ColorType), GetCachePreValues(nameof(MemberImageType), nameof(MemberImageType.ColorType)).Select(x => x.Value.Value).ToList());
            payload.SetOrUpdate(nameof(MemberImageType.Texture), GetCachePreValues(nameof(MemberImageType), nameof(MemberImageType.Texture)).Select(x => x.Value.Value).ToList());
            
            return Json(payload);
        }

        private IDictionary<string, PreValue> GetCachePreValues(string alias, string propertyAlias)
        {
            var cacheKey = $"ProfileController.GetPreValues.{alias}.{propertyAlias}";
            return ApplicationContext.ApplicationCache.RuntimeCache.GetCacheItem(cacheKey, () => GetPreValues(alias, propertyAlias)) as IDictionary<string, PreValue>;
        }

        private IDictionary<string, PreValue> GetPreValues(string alias, string propertyAlias)
        {
            var node = Services.ContentTypeService.GetMediaType(alias);
            var prop = node.PropertyTypes.FirstOrDefault(type => type.Alias.Equals(propertyAlias, StringComparison.OrdinalIgnoreCase));
            if (prop == null)
            {
                throw new Exception($"Can not find a property with alias {propertyAlias} for {node.Alias}");
            }
            
            var preValues = Umbraco.DataTypeService.GetPreValuesCollectionByDataTypeId(prop.DataTypeDefinitionId)
                    .FormatAsDictionary();

            return preValues;
        }
    }
}
