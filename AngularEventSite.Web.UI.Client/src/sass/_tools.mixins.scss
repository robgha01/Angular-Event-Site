/// <reference path="_settings.global.scss" />
/// <reference path="_settings.animation.scss" />
/// <reference path="_tools.base.scss" />
/*!
 *  Mixins & functions
 */

/// Give a border state to executing container.
/// @access public
/// @param {Base} $conf - Settings in format (border-size, border-active-color, border-active-bg-color, border-hover-color, border-hover-bg-color)
/// using default values from global settings.
/// @return {String} - bordered state css rules.
@mixin borderedState($conf: ()) {
    // Extending the default arguments with the given object
    $default-conf: (
        border-size: $border-base-size,
        border-hover-color: $border-base-hover-color,
        border-hover-bg-color: $border-base-hover-bg-color);
    $conf: extend($default-conf, $conf);

    // Dumping CSS
    border: map-get($conf, border-size) solid transparent;

    &:hover {
        border: map-get($conf, border-size) dashed map-get($conf, border-hover-color);
        background-color: map-get($conf, border-hover-bg-color);
    }
}

@mixin keyframes($animation-name) {
    @keyframes #{$animation-name} {
        @content;
    }
}

/*
    Example usage: 
    @include animation(changecolour, 10s, 5s)
 */
@mixin animation($animation, $delay: $animation-delay, $duration: $animation-duration, $iteration-count: $animation-iteration-count) {
    animation-name: $animation;
    animation-delay: $delay;
    animation-duration: $duration;
    animation-iteration-count: $iteration-count;
    animation-fill-mode: forwards; /* this prevents the animation from restarting! */
}
