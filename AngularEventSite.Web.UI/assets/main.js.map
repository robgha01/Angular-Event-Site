{"version":3,"file":"assets/main.js","sources":["webpack:///./src async","webpack:///./src/assets/images/clock-preview.png","webpack:///./src/assets/images/favicon.jpg","webpack:///./src/assets/stylesheets/ie10-viewport-bug-workaround.css?a8d4","webpack:///./src/typescript/Generics/bootstrap.ts","webpack:///./src/typescript/alert-box.service.ts","webpack:///./src/typescript/blueleet/ServiceEvent.service.ts","webpack:///./src/typescript/blueleet/Validator/AsyncObservableValidator.ts","webpack:///./src/typescript/blueleet/abstraction/AbstractValueAccessor.ts","webpack:///./src/typescript/blueleet/blueleet-umbraco.module.ts","webpack:///./src/typescript/blueleet/broadcaster.service.ts","webpack:///./src/typescript/blueleet/components/fader/fader.component.ts","webpack:///./src/typescript/blueleet/components/load-indicator/pace-progress.component.ts","webpack:///./src/typescript/blueleet/config.service.ts","webpack:///./src/typescript/blueleet/extensions/ObjectExtensions.ts","webpack:///./src/typescript/blueleet/extensions/StringExtensions.ts","webpack:///./src/typescript/blueleet/index.ts","webpack:///./src/typescript/blueleet/modules/cache/cache.service.ts","webpack:///./src/typescript/blueleet/modules/cache/module.ts","webpack:///./src/typescript/blueleet/modules/commonDirectives/focus.directive.ts","webpack:///./src/typescript/blueleet/modules/commonDirectives/focus.service.ts","webpack:///./src/typescript/blueleet/modules/commonDirectives/module.ts","webpack:///./src/typescript/blueleet/modules/commonDirectives/scrollTo.directive.ts","webpack:///./src/typescript/blueleet/modules/commonDirectives/showAtScroll.directive.ts","webpack:///./src/typescript/blueleet/modules/commonDirectives/waypointSticky.directive.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/datetime/datetime.component.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/datetime/datetime.html","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/editor-base.html","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/numeric/numeric.component.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/numeric/numeric.html","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/password/password.component.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/password/password.html","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/select/select.component.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/select/select.html","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/text/text.component.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/text/text.html","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/textarea/textarea.component.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/textarea/textarea.html","webpack:///./src/typescript/blueleet/modules/inline-editor/index.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/inline-editor-group.component.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/inline-editor-group.html","webpack:///./src/typescript/blueleet/modules/inline-editor/inline-editor.component.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/inline-editor.scss?9966","webpack:///./src/typescript/blueleet/modules/inline-editor/module.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/services/InlineEditorContext.service.ts","webpack:///./src/typescript/blueleet/modules/language/module.ts","webpack:///./src/typescript/blueleet/modules/language/translator.service.ts","webpack:///./src/typescript/blueleet/modules/search/module.ts","webpack:///./src/typescript/blueleet/modules/search/search.component.ts","webpack:///./src/typescript/blueleet/modules/search/search.scss?342e","webpack:///./src/typescript/blueleet/modules/search/search.service.ts","webpack:///./src/typescript/blueleet/modules/widgets/module.ts","webpack:///./src/typescript/blueleet/modules/widgets/widget-clock/analog-hours.png","webpack:///./src/typescript/blueleet/modules/widgets/widget-clock/analog-minutes.png","webpack:///./src/typescript/blueleet/modules/widgets/widget-clock/analog-seconds.png","webpack:///./src/typescript/blueleet/modules/widgets/widget-clock/clock.png","webpack:///./src/typescript/blueleet/modules/widgets/widget-clock/templates/clock.html","webpack:///./src/typescript/blueleet/modules/widgets/widget-clock/widget-clock.component.ts","webpack:///./src/typescript/blueleet/modules/widgets/widget-clock/widget-clock.scss?ff2d","webpack:///./src/typescript/blueleet/pipes/capitalize.pipe.ts","webpack:///./src/typescript/blueleet/pipes/truncate.pipe.ts","webpack:///./src/typescript/blueleet/umbraco-ajax-Service.ts","webpack:///./src/typescript/components/abstraction/TemplateBaseComponent.ts","webpack:///./src/typescript/components/bootstrap/alert-box/alert-box.component.ts","webpack:///./src/typescript/components/bootstrap/alert-box/templates/alert-box.html","webpack:///./src/typescript/components/bootstrap/form-input.component.ts","webpack:///./src/typescript/components/bootstrap/form-input.scss?2da9","webpack:///./src/typescript/components/bootstrap/templates/form-input.html","webpack:///./src/typescript/components/event/code.component.ts","webpack:///./src/typescript/components/event/event.component.ts","webpack:///./src/typescript/components/event/event.service.ts","webpack:///./src/typescript/components/event/templates/code.html","webpack:///./src/typescript/components/event/templates/event.html","webpack:///./src/typescript/components/forgot-password/forgot-password.component.ts","webpack:///./src/typescript/components/login-signup/login-signup-complete.component.ts","webpack:///./src/typescript/components/login-signup/login-signup.component.ts","webpack:///./src/typescript/components/login-signup/login-signup.scss?f34d","webpack:///./src/typescript/components/login-signup/signout.component.ts","webpack:///./src/typescript/components/login-signup/signout.scss?3fab","webpack:///./src/typescript/components/search-box/search-box.component.ts","webpack:///./src/typescript/components/search-box/search-box.scss?590b","webpack:///./src/typescript/components/search-wall/search-wall.component.ts","webpack:///./src/typescript/components/search-wall/search-wall.scss?324b","webpack:///./src/typescript/components/search-wall/templates/search-wall.html","webpack:///./src/typescript/components/simple-login/simple-login.component.ts","webpack:///./src/typescript/components/simple-login/templates/simple-login.html","webpack:///./src/typescript/components/simple-signup/simple-signup.component.ts","webpack:///./src/typescript/components/widget-quickNavigator/quicknav-arrow.png","webpack:///./src/typescript/components/widget-quickNavigator/templates/quicknavigator.html","webpack:///./src/typescript/components/widget-quickNavigator/umbraco.svg","webpack:///./src/typescript/components/widget-quickNavigator/widget-quickNavigator.component.ts","webpack:///./src/typescript/components/widget-quickNavigator/widget-quickNavigator.scss?6522","webpack:///./src/typescript/decorators/Protected.ts","webpack:///./src/typescript/detectDevice.service.ts","webpack:///./src/typescript/dev-helpers.ts","webpack:///./src/typescript/enums/default-view-state-enum.ts","webpack:///./src/typescript/enums/generic-messages-enum.ts","webpack:///./src/typescript/enums/index.ts","webpack:///./src/typescript/enums/member-status-enum.ts","webpack:///./src/typescript/enums/password-verdict.ts","webpack:///./src/typescript/enums/searchType.ts","webpack:///./src/typescript/hoverable.directive.ts","webpack:///./src/typescript/hoverableEvent.service.ts","webpack:///./src/typescript/icon-color.directive.ts","webpack:///./src/typescript/if-admin.directive.ts","webpack:///./src/typescript/log.pipe.ts","webpack:///./src/typescript/loginEvent.service.ts","webpack:///./src/typescript/main.app.ts","webpack:///./src/typescript/main.bootstraper.ts","webpack:///./src/typescript/main.browser.ts","webpack:///./src/typescript/navigation.service.ts","webpack:///./src/typescript/polyfills.browser.ts","webpack:///./src/typescript/user.service.ts","webpack:///./src/typescript/validation.service.ts","webpack:///./src/typescript/vendor.browser.ts","webpack:///./src/typescript/widget-search.directive.ts"],"sourcesContent":["function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"./src async recursive\";\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = ./src async recursive\n// module chunks = 1","module.exports = __webpack_public_path__ + \"./assets/images/clock-preview.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assets/images/clock-preview.png\n// module id = ./src/assets/images/clock-preview.png\n// module chunks = 1","module.exports = __webpack_public_path__ + \"./assets/images/favicon.jpg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assets/images/favicon.jpg\n// module id = ./src/assets/images/favicon.jpg\n// module chunks = 1","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/postcss-loader/index.js!./ie10-viewport-bug-workaround.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/postcss-loader/index.js!./ie10-viewport-bug-workaround.css\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/postcss-loader/index.js!./ie10-viewport-bug-workaround.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assets/stylesheets/ie10-viewport-bug-workaround.css\n// module id = ./src/assets/stylesheets/ie10-viewport-bug-workaround.css\n// module chunks = 1","// If you don't have ES6 transpiler or have TypeScript then you could use distributed version but will loose module customization\r\n// import \"src/bootstrap/dist/js/bootstrap\";\r\n\r\n// If you have ES6 transpiler then you could code below and will be able to customize what modules will be included in the build.\r\n\r\nimport \"bootstrap/js/src/alert\";\r\nimport \"bootstrap/js/src/button\";\r\nimport \"bootstrap/js/src/carousel\";\r\nimport \"bootstrap/js/src/collapse\";\r\nimport \"bootstrap/js/src/dropdown\";\r\nimport \"bootstrap/js/src/modal\";\r\nimport \"bootstrap/js/src/popover\";\r\nimport \"bootstrap/js/src/scrollspy\";\r\nimport \"bootstrap/js/src/tab\";\r\nimport \"bootstrap/js/src/tooltip\";\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/Generics/bootstrap.ts","import { Injectable, Inject } from \"@angular/core\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport * as bl from \"./blueleet/\";\r\nimport { IBroadcastSingleEvent } from \"./blueleet/broadcaster.service\";\r\n\r\nexport enum AlertBoxEventType {\r\n    Info,\r\n    Success,\r\n    Error,\r\n    Warning\r\n}\r\n\r\nexport class AlertBoxOptions {\r\n    type: AlertBoxEventType;\r\n    message: string;\r\n    showClose: boolean;\r\n\r\n    constructor(type: AlertBoxEventType, message: string, showClose: boolean = true) {\r\n        this.type = type;\r\n        this.message = message;\r\n        this.showClose = showClose;\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class AlertBoxService implements IBroadcastSingleEvent {\r\n    constructor( @Inject(bl.BroadcasterService) protected broadcaster: bl.BroadcasterService) { }\r\n\r\n    emit(data?: AlertBoxOptions): void {\r\n        let key = this.getKey();\r\n        this.broadcaster.broadcast(key, data);\r\n    }\r\n\r\n    on(): Rx.Observable<AlertBoxOptions> {\r\n        let key = this.getKey();\r\n        return this.broadcaster.on<AlertBoxOptions>(key);\r\n    }\r\n\r\n    getKey() {\r\n        return \"AlertBoxServiceEventType\";\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/alert-box.service.ts","import { Injectable, Inject } from \"@angular/core\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport { IBroadcastEvent, BroadcasterService } from \"./broadcaster.service\";\r\n\r\nexport enum ServiceEventType {\r\n    RequestBegin,\r\n    RequestEnd\r\n}\r\n\r\n@Injectable()\r\nexport class ServiceEvent implements IBroadcastEvent<ServiceEventType> {\r\n    constructor( @Inject(BroadcasterService) protected broadcaster: BroadcasterService) { }\r\n\r\n    emit(eventType: ServiceEventType, data?: any): void {\r\n        let key = this.getKey(eventType);\r\n        this.broadcaster.broadcast(key, data);\r\n    }\r\n\r\n    on(eventType: ServiceEventType): Rx.Observable<any> {\r\n        let key = this.getKey(eventType);\r\n        return this.broadcaster.on<any>(key);\r\n    }\r\n\r\n    getKey(ofType: ServiceEventType) {\r\n        switch (ofType) {\r\n            case ServiceEventType.RequestBegin:\r\n                return \"ServiceEventType:RequestBegin\";\r\n            case ServiceEventType.RequestEnd:\r\n                return \"ServiceEventType:RequestEnd\";\r\n            default:\r\n                return \"ServiceEventType:None\";\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/ServiceEvent.service.ts","import { AbstractControl, AsyncValidatorFn } from \"@angular/forms\";\r\nimport * as Rx from \"rxjs/Rx\";\r\n\r\n/**\r\n * Async validator that debounce's\r\n */\r\nexport class AsyncObservableValidator {\r\n    static create(callback: (value: any) => Promise<any>, debounceTime: number = 1000): AsyncValidatorFn {\r\n        let changed$ = new Rx.Subject<any>();\r\n        return (control: AbstractControl): Rx.Observable<any | null> => {\r\n            changed$.next(); // This will signal the previous stream (if any) to terminate.\r\n            return control.valueChanges\r\n                .takeUntil(changed$)\r\n                .take(1)\r\n                .debounceTime(debounceTime, Rx.Scheduler.async)\r\n                .switchMap(value => {\r\n                    return callback(value);\r\n                });\r\n        };\r\n    };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/Validator/AsyncObservableValidator.ts","import { forwardRef } from \"@angular/core\";\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\nimport * as Rx from \"rxjs/Rx\";\r\n\r\nexport abstract class AbstractValueAccessor implements ControlValueAccessor {\r\n    private _onValueChange: Rx.Subject<any> = new Rx.Subject();\r\n    onValueChange = this._onValueChange.asObservable();\r\n\r\n    protected $value$: any = \"\";\r\n    get value(): any { return this.$value$; };\r\n    set value(v: any) {\r\n        if (v !== this.$value$) {\r\n            this.$value$ = v;\r\n            this._onValueChange.next(v);\r\n            this.onChange(v);\r\n        }\r\n        if (!this.$preValue$) {\r\n            this.$preValue$ = this.$value$;\r\n        }\r\n    }\r\n\r\n    protected $preValue$: any = null;\r\n    get preValue(): any {\r\n        if (!this.$preValue$) {\r\n            this.$preValue$ = this.$value$;\r\n        }\r\n\r\n        return this.$preValue$;\r\n    };\r\n\r\n    writeValue(value: any) {\r\n        this.value = value;\r\n    }\r\n\r\n    onChange(_): void { };\r\n    onTouched(): void { };\r\n\r\n    registerOnChange(fn: (_: any) => void): void {\r\n        this.onChange = fn;\r\n    }\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n}\r\n\r\nexport function MakeProvider(type: any): any {\r\n    return { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => type), multi: true };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/abstraction/AbstractValueAccessor.ts","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { HttpModule } from \"@angular/http\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { CookieService } from \"angular2-cookie/core\";\r\nimport { UmbracoAjaxService } from \"./umbraco-ajax-Service\";\r\nimport { ConfigService } from \"./config.service\";\r\nimport { BroadcasterService } from \"./broadcaster.service\";\r\nimport { ServiceEvent } from \"./ServiceEvent.service\";\r\nimport { InlineEditorModule } from \"./modules/inline-editor/module\";\r\nimport { CapitalizePipe } from \"./pipes/capitalize.pipe\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { TruncatePipe } from \"./pipes/truncate.pipe\";\r\nimport { FaderComponent } from \"./components/fader/fader.component\";\r\nimport { PaceProgressComponent } from \"./components/load-indicator/pace-progress.component\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, HttpModule, BrowserAnimationsModule, ReactiveFormsModule, InlineEditorModule],\r\n    exports: [TruncatePipe, CapitalizePipe, FaderComponent, PaceProgressComponent, InlineEditorModule],\r\n    declarations: [TruncatePipe, CapitalizePipe, FaderComponent, PaceProgressComponent]\r\n})\r\nexport class BlueLeetUmbracoModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: BlueLeetUmbracoModule,\r\n            providers: [CookieService, TruncatePipe, CapitalizePipe, BroadcasterService, UmbracoAjaxService, ConfigService, ServiceEvent]\r\n        };\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/blueleet-umbraco.module.ts","import { Injectable } from \"@angular/core\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport { IBroadcastEventArgs } from \"./abstraction/IBroadcastEventArgs\";\r\n\r\nexport interface IBroadcastEvent<TEventType> {\r\n    emit(eventType: TEventType, data: any): void;\r\n    on(eventType: TEventType): Rx.Observable<any>;\r\n    getKey(eventType: TEventType);\r\n}\r\n\r\nexport interface IBroadcastSingleEvent {\r\n    emit(data: any): void;\r\n    on(): Rx.Observable<any>;\r\n    getKey();\r\n}\r\n\r\n@Injectable()\r\nexport class BroadcasterService {\r\n    private eventBus: Rx.Subject<IBroadcastEventArgs>;\r\n\r\n    constructor() {\r\n        this.eventBus = new Rx.Subject<IBroadcastEventArgs>();\r\n    }\r\n\r\n    broadcast(key: string, data?: any) {\r\n        this.eventBus.next({ key, data });\r\n    }\r\n\r\n    on<T>(key: string): Rx.Observable<T> {\r\n        const observable = this.eventBus.asObservable()\r\n            .filter((event: IBroadcastEventArgs) => {\r\n                if (event.key === key) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            })\r\n            .map((event: IBroadcastEventArgs) => <T>event.data);\r\n\r\n        return observable;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/broadcaster.service.ts","import { Component, Input, trigger, state, animate, transition, style, keyframes } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"bl-fader\",\r\n    animations: [\r\n        trigger(\"visibilityChanged\", [\r\n            state(\"true\", style({ opacity: 1 })),\r\n            state(\"false\", style({ opacity: 0 })),\r\n            transition(\"1 => 0\", animate(300, keyframes([\r\n                style({ \"opacity\": \"1\" }),\r\n                style({ \"opacity\": \"0.7\" }),\r\n                style({ \"opacity\": \"0\" })\r\n            ]))),\r\n            transition(\"0 => 1\", animate(300, keyframes([\r\n                style({ \"opacity\": \"0\" }),\r\n                style({ \"opacity\": \"0.7\" }),\r\n                style({ \"opacity\": \"1\" })\r\n            ])))\r\n        ])\r\n    ],\r\n    template: `\r\n      <div [@visibilityChanged]=\"isVisible\" >\r\n        <ng-content></ng-content>\r\n      </div>\r\n  `\r\n})\r\nexport class FaderComponent {\r\n    @Input() isVisible: boolean = true;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/components/fader/fader.component.ts","import { Component, Input, NgZone, Inject, ElementRef, OnInit } from \"@angular/core\";\r\nimport * as $ from \"jquery\";\r\nconst Pace = require(\"pace-progress\");\r\n\r\n@Component({\r\n    selector: \"pace-progress\",\r\n    template: `<div class=\"pace-overlay\"></div>`\r\n})\r\nexport class PaceProgressComponent implements OnInit {\r\n    defaultOptions: any = {\r\n\r\n        /**\r\n         * How long should it take for the bar to animate to a new\r\n         * point after receiving it\r\n         */\r\n        catchupTime: 100,\r\n\r\n        /**\r\n         * How quickly should the bar be moving before it has any progress\r\n         * info from a new source in %/ms\r\n         */\r\n        initialRate: .03,\r\n\r\n        /**\r\n         * What is the minimum amount of time the bar should be on the\r\n         * screen.  Irrespective of this number, the bar will always be on screen for\r\n         * 33 * (100 / maxProgressPerFrame) + ghostTime ms.\r\n         */\r\n        minTime: 250,\r\n\r\n        /**\r\n         * What is the minimum amount of time the bar should sit after the last update before disappearing\r\n         */\r\n        ghostTime: 100,\r\n\r\n        /**\r\n         * Its easy for a bunch of the bar to be eaten in the first few frames\r\n         * before we know how much there is to load.  This limits how much of\r\n         * the bar can be used per frame\r\n         */\r\n        maxProgressPerFrame: 20,\r\n\r\n        /**\r\n         * This tweaks the animation easing\r\n         */\r\n        easeFactor: 1.25,\r\n\r\n        /**\r\n         * Should pace automatically start when the page is loaded, or should it wait for `start` to\r\n         * be called?  Always false if pace is loaded with AMD or CommonJS.\r\n         */\r\n        startOnPageLoad: true,\r\n\r\n        /**\r\n         * Should we restart the browser when pushState or replaceState is called? (Generally\r\n         * means Ajax navigation has occurred)\r\n         */\r\n        restartOnPushState: true,\r\n\r\n        /**\r\n         * Should we show the progress bar for every Ajax request (not just regular or Ajax-y page\r\n         * navigation)? Set to false to disable.\r\n         *\r\n         * If so, how many ms does the request have to be running for before we show the progress?\r\n         */\r\n        restartOnRequestAfter: 5000,\r\n\r\n        /**\r\n         * What element should the pace element be appended to on the page?\r\n         */\r\n        target: \"body\",\r\n\r\n        elements: {\r\n            /**\r\n             * How frequently in ms should we check for the elements being tested for\r\n             * using the element monitor?\r\n             */\r\n            checkInterval: 100,\r\n\r\n            /**\r\n             * What elements should we wait for before deciding the page is fully loaded (not required)\r\n             */\r\n            selectors: [\"body\"]\r\n        },\r\n\r\n        eventLag: {\r\n            /**\r\n             * When we first start measuring event lag, not much is going on in the browser yet, so it's\r\n             * not uncommon for the numbers to be abnormally low for the first few samples.  This configures\r\n             * how many samples we need before we consider a low number to mean completion.\r\n             */\r\n            minSamples: 10,\r\n\r\n            /**\r\n             * How many samples should we average to decide what the current lag is?\r\n             */\r\n            sampleCount: 3,\r\n\r\n            /**\r\n             * Above how many ms of lag is the CPU considered busy?\r\n             */\r\n            lagThreshold: 3\r\n        },\r\n\r\n        ajax: {\r\n            /**\r\n             * Which HTTP methods should we track?\r\n             */\r\n            trackMethods: [\"GET\",\"POST\"],\r\n\r\n            /**\r\n             * Should we track web socket connections?\r\n             */\r\n            trackWebSockets: false,\r\n\r\n            /**\r\n             * A list of regular expressions or substrings of URLS we should ignore (for both tracking and restarting)\r\n             */\r\n            ignoreURLs: [/\\/umbraco/, /\\/dev-server\\.js/, /\\/browserLink/]\r\n        }\r\n    };\r\n\r\n    @Input(\"options\") options: any;\r\n\r\n    constructor(\r\n        @Inject(NgZone) private zone: NgZone,\r\n        @Inject(ElementRef) private elementRef: ElementRef) { }\r\n\r\n    ngOnInit(): void {\r\n        let opt: any = {};\r\n        $.extend(opt, this.defaultOptions, this.options);\r\n        Pace.start(opt);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/components/load-indicator/pace-progress.component.ts","import { Inject, Injectable } from \"@angular/core\";\r\nimport { Http, Response } from \"@angular/http\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport { CookieService } from \"angular2-cookie/core\";\r\n\r\n@Injectable()\r\nexport class ConfigService {\r\n    siteConstants: any = {};\r\n    localStore: any = {};\r\n    url: string;\r\n    cookieKey: string = \"configsKey\";\r\n    localStorageKey = `${this.cookieKey}:localStorage`;\r\n    useCookieStore: boolean = true;\r\n    loadingInProgress: boolean = false;\r\n\r\n    private configSubject = new Rx.BehaviorSubject(null);\r\n    private configObservable = this.configSubject.asObservable();\r\n\r\n    constructor( @Inject(Http) protected $http: Http,\r\n        @Inject(Window) protected window,\r\n        @Inject(CookieService) protected cookieService: CookieService) {\r\n        this.url = window.location.protocol + \"//\" + window.location.host + \"/\" + \"umbraco/surface/configsurface/index\";\r\n    }\r\n\r\n    getCookieConfigs(): Object {\r\n        if (this.useCookieStore) {\r\n            const cookieValue = this.cookieService.getObject(this.cookieKey);\r\n\r\n            if (cookieValue) {\r\n                return cookieValue;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    setCookieConfigs(data: any): void {\r\n        if (this.useCookieStore) {\r\n            let expireDate = new Date();\r\n            expireDate.setMinutes(expireDate.getMinutes() + 30);\r\n            this.cookieService.putObject(this.cookieKey, data, { expires: expireDate });\r\n        }\r\n    }\r\n\r\n    ensureConfigs(): Promise<any> {\r\n        let tryGetCookie = this.getCookieConfigs();\r\n\r\n        if (tryGetCookie != null) {\r\n            return new Promise((resolve) => {\r\n                resolve(tryGetCookie);\r\n            });\r\n        }\r\n\r\n        if (Object.keys(this.siteConstants).length) {\r\n            return new Promise((resolve) => {\r\n                resolve(this.siteConstants);\r\n            });\r\n        }\r\n\r\n        // No siteConstants found, load them.\r\n        if (!this.loadingInProgress) {\r\n            this.loadingInProgress = true;\r\n\r\n            let observable = this.$http.post(this.url, null)\r\n                .finally(() => this.loadingInProgress = false)\r\n                .map((res: Response) => {\r\n                    return res.json();\r\n                }).toPromise().then(configs => {\r\n                    // Assign the configuration keys with the correct properties from the server.\r\n                    let keys = Object.keys(configs);\r\n                    let values = Object.values(configs);\r\n\r\n                    keys.forEach((key, i) => {\r\n                        let value = values[i];\r\n                        this.siteConstants[key] = value;\r\n                    });\r\n\r\n                    this.setCookieConfigs(this.siteConstants);\r\n                    this.configSubject.next(this.siteConstants);\r\n\r\n                    return this.siteConstants;\r\n                });\r\n\r\n            return observable;\r\n        }\r\n\r\n        return this.configObservable.toPromise();\r\n    }\r\n\r\n    getLocalConfig(key): any {\r\n        return this.localStore[key];\r\n    }\r\n\r\n    addLocalConfig(key, value): void {\r\n        let tryGetValue = this.getLocalConfig(key);\r\n        if (tryGetValue) {\r\n            this.localStore[key] = value;\r\n        }\r\n    };\r\n\r\n    setLocalConfig(key, value): void {\r\n        this.localStore[key] = value;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/config.service.ts","/**\r\n * Static extensions\r\n */\r\ninterface ObjectConstructor {\r\n    isNullOrUndefined(object: any): boolean;\r\n    isNotNullOrUndefined(object: any): boolean;\r\n    getQueryStringValue(param: any): string;\r\n};\r\n\r\nObject.isNullOrUndefined = (object: any): boolean => {\r\n    return !(object !== null && object !== undefined);\r\n};\r\n\r\nObject.isNotNullOrUndefined = (object: any): boolean => {\r\n    return object !== null && object !== undefined;\r\n};\r\n\r\nObject.getQueryStringValue = (param: any): string => {\r\n    let sPageUrl = window.location.search.substring(1);\r\n    let sUrlVariables = sPageUrl.split(\"&\");\r\n\r\n    for (let i = 0; i < sUrlVariables.length; i++) {\r\n        let sParameterName = sUrlVariables[i].split(\"=\");\r\n\r\n        if (sParameterName[0] === param) {\r\n            return decodeURIComponent(sParameterName[1]);\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Prototyped extensions\r\n */\r\ninterface Object { }\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/extensions/ObjectExtensions.ts","/**\r\n * Static extensions\r\n */\r\ninterface StringConstructor {\r\n    isNullOrEmpty(str: string): boolean;\r\n};\r\n\r\nString.isNullOrEmpty = (str: string) => !str;\r\n\r\n\r\n/**\r\n * Prototyped extensions\r\n */\r\ninterface String {\r\n    asUrl(): URL;\r\n}\r\n\r\nString.prototype.asUrl = function (): URL {\r\n    let url: URL;\r\n    try {\r\n        url = new URL(this);\r\n    } catch (e) {\r\n        // url is not absolut\r\n        url = new URL(this, document.baseURI);\r\n    }\r\n\r\n    return url;\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/extensions/StringExtensions.ts","/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs.\r\n */\r\nexport * from \"./broadcaster.service\";\r\nexport * from \"./umbraco-ajax-Service\";\r\nexport * from \"./config.service\";\r\nexport * from \"./ServiceEvent.service\";\r\n\r\n// Export modules\r\nexport * from \"./blueleet-umbraco.module\";\r\nexport * from \"./modules/commonDirectives/module\";\r\nexport * from \"./modules/inline-editor/module\";\r\nexport * from \"./modules/widgets/module\";\r\nexport * from \"./modules/language/module\";\r\nexport * from \"./modules/language/translator.service\";\r\nexport * from \"./modules/cache/module\";\r\nexport * from \"./modules/search/module\";\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/index.ts","import { Inject, Injectable, forwardRef } from \"@angular/core\";\r\nimport { CookieService } from \"angular2-cookie/core\";\r\nconst storageAvailable = require(\"storage-available\");\r\n\r\nexport enum CacheType {\r\n    Session,\r\n    Local,\r\n    Cookie\r\n}\r\n\r\nexport interface ICacheProvider {\r\n    /**\r\n     * Prefix for all cache keys\r\n     */\r\n    cachePrefix: string;\r\n\r\n    /**\r\n     * Suffix for the key name on the expiration items in localStorage\r\n     */\r\n    cacheSuffix: string;\r\n\r\n    /**\r\n     * Expiration date radix (set to Base-36 for most space savings)\r\n     */\r\n    expiryRadix: number;\r\n\r\n    /**\r\n     * Gets (and adds if necessary) an item from the cache with all of the default parameters\r\n     * @param cacheKey\r\n     * @param getCacheItem\r\n     * @param expireDate\r\n     * @param storageType\r\n     */\r\n    getCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, expireDate?: Date): Promise<any>;\r\n\r\n    insertCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, expireDate?: Date): void;\r\n\r\n    removeCacheItem(cacheKey: string): void;\r\n}\r\n\r\nexport interface ICacheService {\r\n    sessionCache: SessionStorageCacheProvider;\r\n    localCache: LocalStorageCacheProvider;\r\n    cookieCache: CookieCacheService;\r\n\r\n    /**\r\n     * Gets (and adds if necessary) an item from the cache with all of the default parameters\r\n     * @param cacheKey\r\n     * @param getCacheItem\r\n     * @param expireDate\r\n     * @param storageType\r\n     */\r\n    getCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, cacheType?: CacheType, expireDate?: Date): Promise<any>;\r\n\r\n    insertCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, cacheType?: CacheType, expireDate?: Date): void;\r\n}\r\n\r\nexport abstract class CacheProviderBase implements ICacheProvider {\r\n    /**\r\n     * Prefix for all cache keys\r\n     */\r\n    cachePrefix: string = \"bl-\";\r\n\r\n    /**\r\n     * Suffix for the key name on the expiration items in localStorage\r\n     */\r\n    cacheSuffix: string = \"-cacheExpiration\";\r\n\r\n    /**\r\n     * Expiration date radix (set to Base-36 for most space savings)\r\n     */\r\n    expiryRadix: number = 10;\r\n\r\n    /**\r\n     * Gets (and adds if necessary) an item from the cache with all of the default parameters\r\n     * @param cacheKey\r\n     * @param getCacheItem\r\n     * @param expireDate\r\n     * @param storageType\r\n     */\r\n    abstract getCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, expireDate?: Date): Promise<any>;\r\n\r\n    abstract insertCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, expireDate?: Date): void;\r\n\r\n    abstract removeCacheItem(cacheKey: string): void;\r\n}\r\n\r\nexport abstract class WindowStorageCacheProviderBase extends CacheProviderBase {\r\n    isSupported: boolean;\r\n\r\n    constructor(protected storage: Storage, protected storageSupported: boolean) {\r\n        super();\r\n\r\n        this.isSupported = storageSupported;\r\n    }\r\n\r\n    getCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, expireDate?: Date): Promise<any> {\r\n        if (this.storageSupported === false) {\r\n            return Promise.resolve(null);\r\n        }\r\n\r\n        const item = this.storage.getItem(cacheKey);\r\n        if (item === null) {\r\n            return getCacheItem().then(value => {\r\n                let entry = { data: value, expire: expireDate };\r\n                this.storage.setItem(cacheKey, JSON.stringify(entry));\r\n\r\n                return value;\r\n            });\r\n        }\r\n\r\n        try {\r\n            let entry = JSON.parse(item);\r\n\r\n            /* return entry as is if not expired. */\r\n            if (!entry.data && !entry.expire) {\r\n                return Promise.resolve(entry);\r\n            }\r\n\r\n            const { data, expire } = entry;\r\n            const now = new Date();\r\n            const expiration = new Date(expire);\r\n\r\n            if (expire !== -1 && now.getTime() > expiration.getTime()) {\r\n                this.storage.removeItem(cacheKey);\r\n\r\n                return getCacheItem().then(value => {\r\n                    entry = { data: value, expire: expireDate };\r\n                    this.storage.setItem(cacheKey, JSON.stringify(entry));\r\n\r\n                    return value;\r\n                });\r\n            }\r\n\r\n            return Promise.resolve(data);\r\n        } catch (e) {\r\n            /* return item as is if not an object. */\r\n            return Promise.resolve(item);\r\n        }\r\n    }\r\n\r\n    insertCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, expireDate?: Date): void {\r\n        if (this.storageSupported === false) {\r\n            return;\r\n        }\r\n\r\n        getCacheItem().then(value => {\r\n            const entry = { data: value, expire: expireDate };\r\n            window.sessionStorage.setItem(cacheKey, JSON.stringify(entry));\r\n\r\n            return value;\r\n        });\r\n    }\r\n\r\n    removeCacheItem(cacheKey: string): void {\r\n        if (this.storageSupported === false) {\r\n            return;\r\n        }\r\n\r\n        this.storage.removeItem(cacheKey);\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class CacheService implements ICacheService {\r\n    sessionCache: SessionStorageCacheProvider;\r\n    localCache: LocalStorageCacheProvider;\r\n    cookieCache: CookieCacheService;\r\n\r\n    constructor(\r\n        @Inject(forwardRef(() => SessionStorageCacheProvider)) sessionCache: SessionStorageCacheProvider,\r\n        @Inject(forwardRef(() => LocalStorageCacheProvider)) localCache: LocalStorageCacheProvider,\r\n        @Inject(forwardRef(() => CookieCacheService)) cookieCache: CookieCacheService) {\r\n        this.sessionCache = sessionCache;\r\n        this.localCache = localCache;\r\n        this.cookieCache = cookieCache;\r\n    }\r\n\r\n    getCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, cacheType: CacheType = CacheType.Session, expireDate?: Date): Promise<any> {\r\n        if (cacheType === CacheType.Local && this.localCache.isSupported) {\r\n            return this.localCache.getCacheItem(cacheKey, getCacheItem, expireDate);\r\n        } else if (cacheType === CacheType.Session && this.sessionCache.isSupported) {\r\n            return this.sessionCache.getCacheItem(cacheKey, getCacheItem, expireDate);\r\n        } else {\r\n            return this.cookieCache.getCacheItem(cacheKey, getCacheItem, expireDate);\r\n        }\r\n    }\r\n\r\n    insertCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, cacheType: CacheType = CacheType.Session, expireDate?: Date): void {\r\n        if (cacheType === CacheType.Local && this.localCache.isSupported) {\r\n            return this.localCache.insertCacheItem(cacheKey, getCacheItem, expireDate);\r\n        } else if (cacheType === CacheType.Session && this.sessionCache.isSupported) {\r\n            return this.sessionCache.insertCacheItem(cacheKey, getCacheItem, expireDate);\r\n        } else {\r\n            return this.cookieCache.insertCacheItem(cacheKey, getCacheItem, expireDate);\r\n        }\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class SessionStorageCacheProvider extends WindowStorageCacheProviderBase {\r\n    constructor( @Inject(CookieService) protected cookieService: CookieService) {\r\n        super(window.sessionStorage, storageAvailable(\"sessionStorage\"));\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class LocalStorageCacheProvider extends WindowStorageCacheProviderBase {\r\n    constructor( @Inject(CookieService) protected cookieService: CookieService) {\r\n        super(window.localStorage, storageAvailable(\"localStorage\"));\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class CookieCacheService extends CacheProviderBase {\r\n    constructor( @Inject(CookieService) protected cookieService: CookieService) {\r\n        super();\r\n    }\r\n\r\n    getCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, expireDate: Date = null): Promise<any> {\r\n        let item = this.cookieService.getObject(`${this.cachePrefix}:${cacheKey}`);\r\n        if (item === undefined || item === null) {\r\n            return getCacheItem().then(value => {\r\n                if (expireDate) {\r\n                    this.cookieService.putObject(`${this.cachePrefix}:${cacheKey}`, value, { expires: expireDate });\r\n                } else {\r\n                    this.cookieService.putObject(`${this.cachePrefix}:${cacheKey}`, value);\r\n                }\r\n\r\n                return value;\r\n            });\r\n        }\r\n\r\n        return Promise.resolve(item);\r\n    }\r\n\r\n    insertCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, expireDate: Date = null): void {\r\n        getCacheItem().then(value => {\r\n            if (expireDate) {\r\n                this.cookieService.putObject(`${this.cachePrefix}:${cacheKey}`, value, { expires: expireDate });\r\n            } else {\r\n                this.cookieService.putObject(`${this.cachePrefix}:${cacheKey}`, value);\r\n            }\r\n        });\r\n    }\r\n\r\n    removeCacheItem(cacheKey: string): void {\r\n        this.cookieService.remove(`${this.cachePrefix}:${cacheKey}`);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/cache/cache.service.ts","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { CacheService, SessionStorageCacheProvider, LocalStorageCacheProvider, CookieCacheService } from \"./cache.service\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [],\r\n    providers: [CacheService, SessionStorageCacheProvider, LocalStorageCacheProvider, CookieCacheService]\r\n})\r\nexport class CacheModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/cache/module.ts","import { Directive, ElementRef, Inject, Input, OnChanges, SimpleChanges, AfterContentInit, AfterContentChecked } from \"@angular/core\";\r\nimport { FocusService } from \"./focus.service\";\r\n\r\n@Directive({ selector: \"[focuser]\" })\r\nexport class FocuserDirective implements OnChanges, AfterContentInit, AfterContentChecked {\r\n    @Input() focuser: boolean = false; // focus this element when \"OnChange\" or \"AfterContentChecked\" is triggered if this is set to true.\r\n    hasFocus: boolean;\r\n\r\n    private contentChecked: boolean = null;\r\n\r\n    constructor( @Inject(ElementRef) private element: ElementRef, @Inject(FocusService) private focusService: FocusService) { }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        let focus = changes[\"focuser\"];\r\n\r\n        // We only wants to focus if the previous value was false.\r\n        if (focus.currentValue && focus.previousValue === false) {\r\n            this.focusService.focus(this.element);\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.focusService.register(this, this.element);\r\n    }\r\n\r\n    ngAfterContentChecked(): void {\r\n        if (this.focuser) {\r\n            // We need to track if this is the first call to content checked.\r\n            if (this.contentChecked === null) {\r\n                this.contentChecked = false;\r\n                return;\r\n            }\r\n\r\n            // If content checked is set to false we run the focus else do nothing.\r\n            if (this.contentChecked === false) {\r\n                this.contentChecked = true;\r\n                this.focusService.focus(this.element);\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/commonDirectives/focus.directive.ts","import { Injectable, ElementRef } from \"@angular/core\";\r\nimport { FocuserDirective as FocusDirective } from \"./focus.directive\";\r\n\r\n@Injectable()\r\nexport class FocusService {\r\n    focusDirectives: { focusDir: FocusDirective, element: ElementRef }[] = [];\r\n\r\n    register(focusDir: FocusDirective, element: ElementRef) {\r\n        this.focusDirectives.push({ focusDir, element });\r\n    }\r\n\r\n    focus(element: ElementRef) {\r\n        this.focusDirectives.forEach((value) => {\r\n            if (element === value.element) {\r\n                this.doFocus(value);\r\n            }\r\n        });\r\n    }\r\n\r\n    reFocus() {\r\n        this.focusDirectives.forEach((value) => {\r\n            if (value.focusDir.hasFocus) {\r\n                value.element.nativeElement.focus(); // Trigger a focus.\r\n            }\r\n        });\r\n    }\r\n\r\n    private doFocus(item: { focusDir: FocusDirective, element: ElementRef }) {\r\n        // Reset all hasFocus to false exept item\r\n        this.focusDirectives.forEach((value) => {\r\n            if (item !== value) {\r\n                value.focusDir.hasFocus = false;\r\n                value.focusDir.focuser = false;\r\n            }\r\n        });\r\n\r\n        item.element.nativeElement.focus(); // Trigger the focus.\r\n        item.focusDir.focuser = true; // Ensure item focus is true.\r\n        item.focusDir.hasFocus = true; // Ensure item hasFocus is true.\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/commonDirectives/focus.service.ts","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { FocuserDirective } from \"./focus.directive\";\r\nimport { ScrollToDirective } from \"./scrollTo.directive\";\r\nimport { WaypointStickyDirective } from \"./waypointSticky.directive\";\r\nimport { ShowAtScrollDirective } from \"./showAtScroll.directive\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [FocuserDirective, ScrollToDirective, WaypointStickyDirective, ShowAtScrollDirective],\r\n    declarations: [FocuserDirective, ScrollToDirective, WaypointStickyDirective, ShowAtScrollDirective]\r\n})\r\nexport class CommonDirectivesModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/commonDirectives/module.ts","import { Directive, HostListener, ElementRef, Inject, Input, Renderer, OnInit } from \"@angular/core\";\r\nimport * as $ from \"jquery\";\r\nconst _ = require(\"lodash\");\r\n\r\n@Directive({ selector: \"[scroll-to]\" })\r\nexport class ScrollToDirective implements OnInit {\r\n    @Input(\"scroll-to\") scrollTo: string;\r\n    @Input(\"scroll-duration\") scrollDuration: number = 1000;\r\n\r\n    element: JQuery;\r\n\r\n    constructor( @Inject(ElementRef) public elementRef: ElementRef, @Inject(Renderer) public renderer: Renderer) { }\r\n\r\n    @HostListener(\"click\", [\"$event\"])\r\n    onClick(event) {\r\n        event.preventDefault();\r\n        let scrollOptions: any = null;\r\n\r\n        if (Object.isNotNullOrUndefined(this.scrollTo) && this.scrollTo !== \"\") {\r\n            if (_.isNumber(this.scrollTo)) {\r\n                scrollOptions = {\r\n                    scrollTop: this.scrollTo\r\n                };\r\n            } else {\r\n                const target = $(this.scrollTo);\r\n                if (target.length) {\r\n                    scrollOptions = {\r\n                        scrollTop: target.offset().top\r\n                    };\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!scrollOptions) {\r\n            // If we get here just scroll until this element is no longer in the viewport\r\n            let offset = this.element.offset();\r\n            let bottom = offset.top + this.element.outerHeight();\r\n\r\n            scrollOptions = {\r\n                scrollTop: bottom\r\n            };\r\n        }\r\n\r\n        $(\"html, body\").stop().animate(scrollOptions, this.scrollDuration);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.element = $(this.elementRef.nativeElement);\r\n        if (!this.scrollTo) {\r\n            const href = this.element.attr(\"href\");\r\n            if (href.startsWith(\"#\")) {\r\n                this.scrollTo = href;\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/commonDirectives/scrollTo.directive.ts","import { Directive, TemplateRef, ViewContainerRef, Inject, Input, OnInit } from \"@angular/core\";\r\nimport * as Rx from \"rxjs\";\r\n\r\n@Directive({ selector: \"[showAtScroll]\" })\r\nexport class ShowAtScrollDirective implements OnInit {\r\n    onStateChange = new Rx.BehaviorSubject<boolean>(false);\r\n    isVisible: boolean = false;\r\n\r\n    private hasView: boolean = false;\r\n    @Input() private showAtScroll: number;\r\n\r\n    constructor( @Inject(TemplateRef) private templateRef: TemplateRef<any>, @Inject(ViewContainerRef) private viewContainer: ViewContainerRef) { }\r\n\r\n    onWindowScroll() {\r\n        let scrollTop = $(window).scrollTop();\r\n\r\n        if (scrollTop < 0) {\r\n            scrollTop = 0;\r\n        }\r\n\r\n        if (scrollTop > $(\"body\").height() - $(window).height()) {\r\n            scrollTop = $(\"body\").height() - $(window).height();\r\n        }\r\n\r\n        // console.log($(window).scrollTop(), scrollTop);\r\n        this.isVisible = scrollTop > this.showAtScroll;\r\n        this.onStateChange.next(this.isVisible);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.viewContainer.clear();\r\n        this.hasView = false;\r\n        this.onStateChange.subscribe((showView) => {\r\n            if (showView && !this.hasView) {\r\n                this.hasView = true;\r\n                this.viewContainer.createEmbeddedView(this.templateRef);\r\n            } else if (!showView && this.hasView) {\r\n                this.hasView = false;\r\n                this.viewContainer.clear();\r\n            }\r\n        });\r\n\r\n        // Check if we should show this view or not after the view has initialized.\r\n        this.onWindowScroll();\r\n\r\n        Rx.Observable.fromEvent(window, \"scroll\").throttle(() => { return this.onStateChange; }).subscribe(() => {\r\n            this.onWindowScroll();\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/commonDirectives/showAtScroll.directive.ts","import { Directive, ElementRef, Inject, Input, Renderer, OnInit } from \"@angular/core\";\r\nimport * as $ from \"jquery\";\r\nimport * as Rx from \"rxjs\";\r\nconst _ = require(\"lodash\");\r\nrequire(\"waypoints/lib/jquery.waypoints.js\");\r\nrequire(\"waypoints/lib/shortcuts/sticky.js\");\r\ndeclare const Waypoint: any;\r\n\r\n@Directive({ selector: \"[waypoint-sticky]\" })\r\nexport class WaypointStickyDirective implements OnInit {\r\n    @Input(\"waypoint-sticky\") options: { top: string, bottom: string, scrolledClass: string, stuckClass: string };\r\n\r\n    scrolled: boolean = false;\r\n    scrollTopBoundry: number = 10;\r\n\r\n    private scrollEventLock = new Rx.BehaviorSubject(null);\r\n    private prevScrollTop = $(window).scrollTop();\r\n\r\n    constructor( @Inject(ElementRef) protected elementRef: ElementRef, @Inject(Renderer) protected renderer: Renderer) { }\r\n\r\n    ngOnInit(): void {\r\n        const self = this;\r\n        this.options = _.extend({}, { bottom: \"\", top: \"\", scrolledClass: \"scrolled\", stuckClass: \"stuck\" }, this.options);\r\n\r\n        let el = $(this.elementRef.nativeElement);\r\n        let offset = el.position().top;\r\n\r\n        // ReSharper disable once UnusedLocals\r\n        const sticky = new Waypoint.Sticky({\r\n            element: $(this.elementRef.nativeElement)[0],\r\n            stuckClass: this.options.stuckClass\r\n        });\r\n\r\n        (<any>$(\"body\")).waypoint({\r\n            offset: -(this.scrollTopBoundry + offset),\r\n            handler() {\r\n                // add / remove scrolled class\r\n                el.toggleClass(self.options.scrolledClass);\r\n\r\n                // remove swatch class\r\n                let prefix = \"swatch-\";\r\n                let classes = el[0].className.split(\" \").filter(c => c.lastIndexOf(prefix, 0) !== 0);\r\n                el[0].className = classes.join(\" \");\r\n                // add back swatch class depending on direction above / below scroll point\r\n                // menuContainer.addClass(oxyThemeData.navbarScrolledSwatches[direction]);\r\n\r\n                el.one(\"MSTransitionEnd webkitTransitionEnd oTransitionEnd transitionend\", () => {\r\n                    // refresh waypoints only once transition ends in order to get correct offsets for sections.\r\n                    if (!el.hasClass(\"refreshing\")) {\r\n                        Waypoint.refreshAll();\r\n                    }\r\n                    el.toggleClass(\"refreshing\");\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/commonDirectives/waypointSticky.directive.ts","import { NgZone, Component, forwardRef, ElementRef, Renderer } from \"@angular/core\";\r\nimport { InlineEditorComponent } from \"../../inline-editor.component\";\r\nimport { MakeProvider } from \"../../../../abstraction/AbstractValueAccessor\";\r\nimport { CapitalizePipe } from \"../../../../pipes/capitalize.pipe\";\r\nimport { InlineEditorContextService, InlineEditorGroupContextService } from \"../../services/InlineEditorContext.service\";\r\nimport { FocusService } from \"../../../commonDirectives/focus.service\";\r\n\r\n@Component({\r\n    selector: \"inline-datetime-editor\",\r\n    template: require(\"../editor-base.html\") + require(\"./datetime.html\"),\r\n    styles: [require(\"../../inline-editor.scss\").toString()],\r\n    providers: [MakeProvider(InlineDatetimeComponent), { provide: InlineEditorComponent, useExisting: forwardRef(() => InlineDatetimeComponent), multi: true }, CapitalizePipe, InlineEditorContextService, FocusService]\r\n})\r\nexport class InlineDatetimeComponent extends InlineEditorComponent {\r\n    constructor(\r\n        protected element: ElementRef,\r\n        protected renderer: Renderer,\r\n        protected zone: NgZone,\r\n        protected contextService: InlineEditorContextService,\r\n        protected contextGroupService: InlineEditorGroupContextService) {\r\n        super(element, renderer, zone, contextService, contextGroupService);\r\n    }\r\n\r\n    // Method to display the editable value as text and emit save event to host\r\n    onSubmit(value = this.value) {\r\n        super.onSubmit(value);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/inline-editor/editors/datetime/datetime.component.ts","module.exports = \"<ng-template #DefaultPresentation>\\r\\n    <div *ngIf=\\\"!editing\\\">\\r\\n        <a [ngClass]=\\\"{'editable-empty': isEmpty }\\\" (click)=\\\"edit(value)\\\">{{ presentControl() }}</a>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<ng-template #DefaultEdit>\\r\\n    <input #inlineEditControl class=\\\"form-control\\\" (blur)=\\\"onTouched()\\\" (focusout)=\\\"onTouched()\\\" [value]=\\\"value\\\" (input)=\\\"value = $event.target.value\\\" [required]=\\\"required\\\"\\r\\n           type=\\\"datetime\\\" [disabled]=\\\"disabled\\\" [name]=\\\"name\\\" [(focuser)]=\\\"focusThis\\\" />\\r\\n</ng-template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/editors/datetime/datetime.html\n// module id = ./src/typescript/blueleet/modules/inline-editor/editors/datetime/datetime.html\n// module chunks = 1","module.exports = \"<ng-template *ngIf=\\\"showPresentation()\\\" [ngTemplateOutlet]=\\\"this.presentationTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\"></ng-template>\\r\\n\\r\\n<div class=\\\"inlineEditForm\\\" *ngIf=\\\"showEdit() && !openInModal\\\">\\r\\n    <div class=\\\"form-group\\\" [class.row]=\\\"formHorizontal\\\">\\r\\n        <ng-template [ngTemplateOutlet]=\\\"this.editTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\">\\r\\n        </ng-template>\\r\\n        <div *ngIf=\\\"showButtons\\\" class=\\\"btn-group\\\" role=\\\"saveOrCancel\\\" aria-label=\\\"save or cancel\\\">\\r\\n            <button [disabled]=\\\"invalid\\\" class=\\\"btn btn-sm btn-primary\\\" (click)=\\\"onSubmit(value)\\\"><span class=\\\"fa fa-check\\\"></span></button>\\r\\n            <button class=\\\"btn btn-sm btn-danger\\\" (click)=\\\"cancel()\\\"><span class=\\\"fa fa-remove\\\"></span></button>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<div *ngIf=\\\"openInModal\\\" bsModal #editModal=\\\"bs-modal\\\" #editModalRef (onShown)=\\\"onModalShown()\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"edit\\\" aria-hidden=\\\"true\\\">\\r\\n    <div class=\\\"modal-dialog\\\">\\r\\n        <div class=\\\"modal-content\\\">\\r\\n            <div class=\\\"modal-header\\\">\\r\\n                <h4 class=\\\"modal-title pull-left\\\">Redigera</h4>\\r\\n                <button class=\\\"close\\\" (click)=\\\"cancel()\\\"><span aria-hidden=\\\"true\\\">&times;</span><span class=\\\"sr-only\\\">Stäng</span></button>\\r\\n            </div>\\r\\n            <div class=\\\"modal-body\\\">\\r\\n                <ng-template [ngTemplateOutlet]=\\\"this.editTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\">\\r\\n                </ng-template>\\r\\n            </div>\\r\\n            <div class=\\\"modal-footer\\\">\\r\\n                <button class=\\\"btn btn-secondary\\\" (click)=\\\"cancel()\\\"><span class=\\\"fa fa-remove\\\"></span> Avbryt</button>\\r\\n                <button [disabled]=\\\"invalid\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onSubmit(value)\\\"><span class=\\\"fa fa-check\\\"></span> Spara</button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/editors/editor-base.html\n// module id = ./src/typescript/blueleet/modules/inline-editor/editors/editor-base.html\n// module chunks = 1","import { NgZone, Component, forwardRef, Input, ElementRef, Renderer } from \"@angular/core\";\r\nimport { InlineEditorComponent } from \"../../inline-editor.component\";\r\nimport { MakeProvider } from \"../../../../abstraction/AbstractValueAccessor\";\r\nimport { CapitalizePipe } from \"../../../../pipes/capitalize.pipe\";\r\nimport { InlineEditorContextService, InlineEditorGroupContextService } from \"../../services/InlineEditorContext.service\";\r\nimport { FocusService } from \"../../../commonDirectives/focus.service\";\r\nconst numericTypes: string[] = [\"range\", \"number\"];\r\n\r\n@Component({\r\n    selector: \"inline-numeric-editor\",\r\n    template: require(\"../editor-base.html\") + require(\"./numeric.html\"),\r\n    styles: [require(\"../../inline-editor.scss\").toString()],\r\n    providers: [MakeProvider(InlineNumericComponent), { provide: InlineEditorComponent, useExisting: forwardRef(() => InlineNumericComponent), multi: true }, CapitalizePipe, InlineEditorContextService, FocusService]\r\n})\r\nexport class InlineNumericComponent extends InlineEditorComponent {\r\n    @Input()\r\n    min: number = 1;\r\n    @Input()\r\n    max = Infinity;\r\n    type: string = \"number\";\r\n\r\n    constructor(protected element: ElementRef, protected renderer: Renderer, protected zone: NgZone, protected contextService: InlineEditorContextService, protected contextGroupService: InlineEditorGroupContextService) {\r\n        super(element, renderer, zone, contextService, contextGroupService);\r\n    }\r\n\r\n    // Method to display the editable value as text and emit save event to host\r\n    onSubmit(value = this.value) {\r\n        // This is for the range editor.\r\n        const length = (numericTypes.indexOf(this.type) !== -1) ? Number(value) : value.length;\r\n        if (length < this.min || length > this.max) {\r\n        }\r\n\r\n        super.onSubmit(value);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/inline-editor/editors/numeric/numeric.component.ts","module.exports = \"<ng-template #DefaultPresentation>\\r\\n    <div *ngIf=\\\"!editing\\\">\\r\\n        <a [ngClass]=\\\"{'editable-empty': isEmpty }\\\" (click)=\\\"edit(value)\\\">{{ presentControl() }}</a>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<ng-template #DefaultEdit>\\r\\n    <input #inlineEditControl class=\\\"form-control\\\" [value]=\\\"value\\\" (input)=\\\"value = $event.target.value\\\" [required]=\\\"required\\\"\\r\\n           (blur)=\\\"onTouched()\\\" (focusout)=\\\"onTouched()\\\"\\r\\n           type=\\\"range\\\" [disabled]=\\\"disabled\\\" [max]=\\\"max\\\" [min]=\\\"min\\\" [name]=\\\"name\\\" [(focuser)]=\\\"focusThis\\\" />\\r\\n</ng-template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/editors/numeric/numeric.html\n// module id = ./src/typescript/blueleet/modules/inline-editor/editors/numeric/numeric.html\n// module chunks = 1","import { NgZone, Component, forwardRef, ElementRef, Renderer } from \"@angular/core\";\r\nimport { InlineEditorComponent } from \"../../inline-editor.component\";\r\nimport { MakeProvider } from \"../../../../abstraction/AbstractValueAccessor\";\r\nimport { CapitalizePipe } from \"../../../../pipes/capitalize.pipe\";\r\nimport { InlineEditorContextService, InlineEditorGroupContextService } from \"../../services/InlineEditorContext.service\";\r\nimport { FocusService } from \"../../../commonDirectives/focus.service\";\r\n\r\n@Component({\r\n    selector: \"inline-password-editor\",\r\n    template: require(\"../editor-base.html\") + require(\"./password.html\"),\r\n    styles: [require(\"../../inline-editor.scss\").toString()],\r\n    providers: [MakeProvider(InlinePasswordComponent), { provide: InlineEditorComponent, useExisting: forwardRef(() => InlinePasswordComponent), multi: true }, CapitalizePipe, InlineEditorContextService, FocusService]\r\n})\r\nexport class InlinePasswordComponent extends InlineEditorComponent {\r\n    constructor(protected element: ElementRef, protected renderer: Renderer, protected zone: NgZone, protected contextService: InlineEditorContextService, protected contextGroupService: InlineEditorGroupContextService) {\r\n        super(element, renderer, zone, contextService, contextGroupService);\r\n    }\r\n\r\n    // Method to display the editable value as text and emit save event to host\r\n    onSubmit(value = this.value) {\r\n        super.onSubmit(value);\r\n    }\r\n\r\n    presentControl(): string {\r\n        return \"*\".repeat(this.value.length);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/inline-editor/editors/password/password.component.ts","module.exports = \"<ng-template #DefaultPresentation>\\r\\n    <div *ngIf=\\\"!editing\\\">\\r\\n        <a [ngClass]=\\\"{'editable-empty': isEmpty }\\\" (click)=\\\"edit(value)\\\">{{ presentControl() }}</a>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<ng-template #DefaultEdit>\\r\\n    <input #inlineEditControl class=\\\"form-control\\\" [value]=\\\"value\\\" (input)=\\\"value = $event.target.value\\\" [required]=\\\"required\\\"\\r\\n           (blur)=\\\"onTouched()\\\" (focusout)=\\\"onTouched()\\\"\\r\\n           type=\\\"password\\\" [disabled]=\\\"disabled\\\" [name]=\\\"name\\\" [placeholder]=\\\"placeholder\\\" [size]=\\\"size\\\" [(focuser)]=\\\"focusThis\\\" />\\r\\n</ng-template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/editors/password/password.html\n// module id = ./src/typescript/blueleet/modules/inline-editor/editors/password/password.html\n// module chunks = 1","import { NgZone, Component, forwardRef, Input, ElementRef, Renderer } from \"@angular/core\";\r\nimport { InlineEditorComponent } from \"../../inline-editor.component\";\r\nimport { MakeProvider } from \"../../../../abstraction/AbstractValueAccessor\";\r\nimport { CapitalizePipe } from \"../../../../pipes/capitalize.pipe\";\r\nimport { InlineEditorContextService, InlineEditorGroupContextService } from \"../../services/InlineEditorContext.service\";\r\nimport { FocusService } from \"../../../commonDirectives/focus.service\";\r\n\r\n@Component({\r\n    selector: \"inline-select-editor\",\r\n    template: require(\"../editor-base.html\") + require(\"./select.html\"),\r\n    styles: [require(\"../../inline-editor.scss\").toString()],\r\n    providers: [MakeProvider(InlineSelectComponent), { provide: InlineEditorComponent, useExisting: forwardRef(() => InlineSelectComponent), multi: true }, CapitalizePipe, InlineEditorContextService, FocusService]\r\n})\r\nexport class InlineSelectComponent extends InlineEditorComponent {\r\n    protected $options$;\r\n\r\n    constructor(\r\n        protected element: ElementRef,\r\n        protected renderer: Renderer,\r\n        protected zone: NgZone,\r\n        protected contextService: InlineEditorContextService,\r\n        protected contextGroupService: InlineEditorGroupContextService) {\r\n        super(element, renderer, zone, contextService, contextGroupService);\r\n    }\r\n\r\n    get options() { return this.$options$; }\r\n\r\n    @Input()\r\n    set options(options) {\r\n        this.$options$ = options;\r\n    }\r\n\r\n    // Method to display the editable value as text and emit save event to host\r\n    onSubmit(value = this.value) {\r\n        super.onSubmit(value);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/inline-editor/editors/select/select.component.ts","module.exports = \"<ng-template #DefaultPresentation>\\r\\n    <div *ngIf=\\\"!editing\\\">\\r\\n        <a [ngClass]=\\\"{'editable-empty': isEmpty }\\\" (click)=\\\"edit(value)\\\">{{ presentControl() }}</a>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<ng-template #DefaultEdit>\\r\\n    <select #inlineEditControl class=\\\"form-control\\\" [value]=\\\"value\\\" (change)=\\\"value = $event.target.value\\\" (blur)=\\\"onTouched()\\\" (focusout)=\\\"onTouched()\\\" [(focuser)]=\\\"focusThis\\\">\\r\\n        <option *ngFor=\\\"let opt of options\\\" [value]=\\\"opt\\\">{{opt}}</option>\\r\\n    </select>\\r\\n</ng-template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/editors/select/select.html\n// module id = ./src/typescript/blueleet/modules/inline-editor/editors/select/select.html\n// module chunks = 1","import { NgZone, Component, forwardRef, ElementRef, Renderer } from \"@angular/core\";\r\nimport { InlineEditorComponent } from \"../../inline-editor.component\";\r\nimport { MakeProvider } from \"../../../../abstraction/AbstractValueAccessor\";\r\nimport { CapitalizePipe } from \"../../../../pipes/capitalize.pipe\";\r\nimport { InlineEditorContextService, InlineEditorGroupContextService } from \"../../services/InlineEditorContext.service\";\r\nimport { FocusService } from \"../../../commonDirectives/focus.service\";\r\n\r\n@Component({\r\n    selector: \"inline-text-editor\",\r\n    template: require(\"../editor-base.html\") + require(\"./text.html\"),\r\n    styles: [require(\"../../inline-editor.scss\").toString()],\r\n    providers: [MakeProvider(InlineTextComponent), { provide: InlineEditorComponent, useExisting: forwardRef(() => InlineTextComponent), multi: true }, CapitalizePipe, InlineEditorContextService, FocusService]\r\n})\r\nexport class InlineTextComponent extends InlineEditorComponent {\r\n    constructor(protected element: ElementRef,\r\n        protected renderer: Renderer,\r\n        protected zone: NgZone,\r\n        protected contextService: InlineEditorContextService,\r\n        protected contextGroupService: InlineEditorGroupContextService) {\r\n        super(element, renderer, zone, contextService, contextGroupService);\r\n    }\r\n\r\n    // Method to display the editable value as text and emit save event to host\r\n    onSubmit(value = this.value) {\r\n        super.onSubmit(value);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/inline-editor/editors/text/text.component.ts","module.exports = \"<ng-template #DefaultPresentation>\\r\\n    <div *ngIf=\\\"!editing\\\">\\r\\n        <a [ngClass]=\\\"{'editable-empty': isEmpty }\\\" (click)=\\\"edit(value)\\\">{{ presentControl() }}</a>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<ng-template #DefaultEdit>\\r\\n    <input #inlineEditControl class=\\\"form-control\\\" id=\\\"inline-editor-{{ this.name }}\\\" [value]=\\\"value\\\" (input)=\\\"value = $event.target.value\\\"\\r\\n           (blur)=\\\"onTouched()\\\" (focusout)=\\\"onTouched()\\\"\\r\\n           [required]=\\\"required\\\" [disabled]=\\\"disabled\\\" [name]=\\\"name\\\" [placeholder]=\\\"placeholder\\\" [(focuser)]=\\\"focusThis\\\" />\\r\\n</ng-template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/editors/text/text.html\n// module id = ./src/typescript/blueleet/modules/inline-editor/editors/text/text.html\n// module chunks = 1","import { NgZone, Component, forwardRef, Input, ElementRef, Renderer } from \"@angular/core\";\r\nimport { InlineEditorComponent } from \"../../inline-editor.component\";\r\nimport { MakeProvider } from \"../../../../abstraction/AbstractValueAccessor\";\r\nimport { CapitalizePipe } from \"../../../../pipes/capitalize.pipe\";\r\nimport { InlineEditorContextService, InlineEditorGroupContextService } from \"../../services/InlineEditorContext.service\";\r\nimport { FocusService } from \"../../../commonDirectives/focus.service\";\r\n\r\n@Component({\r\n    selector: \"inline-textarea-editor\",\r\n    template: require(\"../editor-base.html\") + require(\"./textarea.html\"),\r\n    styles: [require(\"../../inline-editor.scss\").toString()],\r\n    providers: [MakeProvider(InlineTextareaComponent), { provide: InlineEditorComponent, useExisting: forwardRef(() => InlineTextareaComponent), multi: true }, CapitalizePipe, InlineEditorContextService, FocusService]\r\n})\r\nexport class InlineTextareaComponent extends InlineEditorComponent {\r\n    @Input()\r\n    cols: number = 50;\r\n    @Input()\r\n    rows: number = 4;\r\n\r\n    constructor(protected element: ElementRef,\r\n        protected renderer: Renderer,\r\n        protected zone: NgZone,\r\n        protected contextService: InlineEditorContextService,\r\n        protected contextGroupService: InlineEditorGroupContextService) {\r\n        super(element, renderer, zone, contextService, contextGroupService);\r\n    }\r\n\r\n    // Method to display the editable value as text and emit save event to host\r\n    onSubmit(value = this.value) {\r\n        super.onSubmit(value);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/inline-editor/editors/textarea/textarea.component.ts","module.exports = \"<ng-template #DefaultPresentation>\\r\\n    <div *ngIf=\\\"!editing\\\">\\r\\n        <a [ngClass]=\\\"{'editable-empty': isEmpty }\\\" (click)=\\\"edit(value)\\\">{{ presentControl() }}</a>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<ng-template #DefaultEdit>\\r\\n    <textarea [rows]=\\\"rows\\\" [cols]=\\\"cols\\\" #inlineEditControl class=\\\"form-control\\\" [value]=\\\"value\\\" (change)=\\\"value = $event.target.value\\\"\\r\\n              (blur)=\\\"onTouched()\\\" (focusout)=\\\"onTouched()\\\"\\r\\n              [required]=\\\"required\\\" [placeholder]=\\\"placeholder\\\" [disabled]=\\\"disabled\\\" [(focuser)]=\\\"focusThis\\\"></textarea>\\r\\n</ng-template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/editors/textarea/textarea.html\n// module id = ./src/typescript/blueleet/modules/inline-editor/editors/textarea/textarea.html\n// module chunks = 1","/**\r\n * @module\r\n * @description\r\n * Entry point for all inline editors.\r\n */\r\nimport { forwardRef } from \"@angular/core\";\r\nimport { MakeProvider } from \"../../abstraction/AbstractValueAccessor\";\r\nimport { InlineEditorContextService, InlineEditorGroupContextService } from \"./services/InlineEditorContext.service\";\r\nimport { InlineEditorGroupComponent, ButtonChangeComponent } from \"./inline-editor-group.component\";\r\nimport { InlineEditorComponent, RenderEditorComponent, PresentationStateComponent, EditStateComponent } from \"./inline-editor.component\";\r\nimport { InlineNumericComponent as NumericComponent } from \"./editors/numeric/numeric.component\";\r\nimport { InlineSelectComponent as SelectComponent } from \"./editors/select/select.component\";\r\nimport { InlineDatetimeComponent as DatetimeComponent } from \"./editors/datetime/datetime.component\";\r\nimport { InlinePasswordComponent as PasswordComponent } from \"./editors/password/password.component\";\r\nimport { InlineTextComponent as TextComponent } from \"./editors/text/text.component\";\r\nimport { InlineTextareaComponent as TextareaComponent } from \"./editors/textarea/textarea.component\";\r\n\r\n// exports\r\nexport * from \"./inline-editor-group.component\";\r\nexport * from \"./inline-editor.component\";\r\nexport * from \"./editors/datetime/datetime.component\";\r\nexport * from \"./editors/numeric/numeric.component\";\r\nexport * from \"./editors/password/password.component\";\r\nexport * from \"./editors/select/select.component\";\r\nexport * from \"./editors/text/text.component\";\r\nexport * from \"./editors/textarea/textarea.component\";\r\n\r\nexport function inizialize() {\r\n    const inlineEditors: any[] = [DatetimeComponent, NumericComponent, PasswordComponent, SelectComponent, TextComponent, TextareaComponent];\r\n    const editors: any[] = [InlineEditorGroupComponent, ButtonChangeComponent, RenderEditorComponent, PresentationStateComponent, EditStateComponent].concat(inlineEditors);\r\n    const editorProviders: any[] = [];\r\n    const exports = editors;\r\n\r\n    for (let editor of inlineEditors) {\r\n        let provider = MakeProvider(editor);\r\n\r\n        // Register a value accessor.\r\n        editorProviders.push(provider);\r\n\r\n        // Register a relation between base and implamentor.\r\n        editorProviders.push({ provide: InlineEditorComponent, useExisting: forwardRef(() => editor), multi: true });\r\n    }\r\n\r\n    editorProviders.push(InlineEditorContextService);\r\n    editorProviders.push(InlineEditorGroupContextService);\r\n\r\n    return { editors, editorProviders, exports };\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/inline-editor/index.ts","import { Component, TemplateRef, Input, OnInit, AfterContentInit, Output, EventEmitter, ElementRef, ContentChildren, ViewChild, Renderer, QueryList } from \"@angular/core\";\r\nimport { ModalDirective } from \"ngx-bootstrap\";\r\nimport { InlineEditorComponent } from \"./inline-editor.component\";\r\nimport { FocusService } from \"../commonDirectives/focus.service\";\r\nimport { InlineEditorGroupContextService } from \"./services/InlineEditorContext.service\";\r\nimport * as Rx from \"rxjs/Rx\";\r\n\r\nexport enum InlineEditorState {\r\n    Save,\r\n    Edit,\r\n    Cancel\r\n}\r\n\r\n@Component({\r\n    selector: \"button-change\",\r\n    template: `<button class=\"btn btn-default\" (click)=\"this.inlineEditorGroup.edit()\"><span class=\"fa fa-pencil\"></span> <ng-content></ng-content></button>`\r\n})\r\nexport class ButtonChangeComponent {\r\n    @Input() inlineEditorGroup: InlineEditorGroupComponent;\r\n}\r\n\r\n@Component({\r\n    selector: \"inline-editor-group\",\r\n    template: require(\"./inline-editor-group.html\"),\r\n    providers: [FocusService, InlineEditorGroupContextService]\r\n})\r\nexport class InlineEditorGroupComponent implements OnInit, AfterContentInit {\r\n    @ViewChild(\"editGroupModal\")\r\n    editGroupModal: ModalDirective;\r\n    @ContentChildren(InlineEditorComponent, { descendants: true })\r\n    inlineEditors: QueryList<InlineEditorComponent>;\r\n\r\n    // Events\r\n    @Output()\r\n    onSave: EventEmitter<any> = new EventEmitter();\r\n    @Output()\r\n    onEdit: EventEmitter<any> = new EventEmitter();\r\n    @Output()\r\n    onCancel: EventEmitter<any> = new EventEmitter();\r\n\r\n    // Settings\r\n    @Input()\r\n    disableSave: boolean = false;\r\n    @Input()\r\n    openInModal: boolean = false;\r\n    @Input()\r\n    visible: boolean = true;\r\n\r\n    protected subjectStateChange: Rx.ReplaySubject<InlineEditorState> = new Rx.ReplaySubject(1);\r\n    stateChange = this.subjectStateChange.asObservable();\r\n\r\n    editTemplates: TemplateRef<any>[] = [];\r\n\r\n    isEditing: boolean = false;\r\n\r\n    constructor(protected element: ElementRef, protected renderer: Renderer, protected focusService: FocusService, protected contextGroupService: InlineEditorGroupContextService) { }\r\n\r\n    ngAfterContentInit(): void {\r\n        if (this.contextGroupService.editorGroupInstance.value === null) {\r\n            this.inlineEditors.forEach((item) => {\r\n                item.openInModal = false;\r\n                item.showButtons = false;\r\n                item.showEditState = this.openInModal === false;\r\n                item.onSave = null;\r\n                item.onEdit = null;\r\n                item.onCancel = null;\r\n                item.onClick = () => { };\r\n                if (item.editing === false && this.isEditing) {\r\n                    item.edit();\r\n                }\r\n            });\r\n\r\n            this.contextGroupService.editorGroupInstance.next(this);\r\n        }\r\n    }\r\n\r\n    ngOnInit() { }\r\n\r\n    onShown() {\r\n        if (this.openInModal) {\r\n            this.focusService.reFocus();\r\n        }\r\n    }\r\n\r\n    toggleGroupModal() {\r\n        if (this.editGroupModal.isShown) {\r\n            this.editGroupModal.hide();\r\n        } else {\r\n            this.editGroupModal.show();\r\n        }\r\n        this.inlineEditors.forEach((item) => {\r\n            item.editing = this.editGroupModal.isShown;\r\n        });\r\n    }\r\n\r\n    edit() {\r\n        this.isEditing = true;\r\n        if (this.openInModal) {\r\n            this.toggleGroupModal();\r\n        } else {\r\n            this.inlineEditors.forEach((item) => {\r\n                item.edit();\r\n            });\r\n        }\r\n\r\n        if (this.onEdit) {\r\n            this.onEdit.emit(this);\r\n        }\r\n\r\n        this.subjectStateChange.next(InlineEditorState.Edit);\r\n    }\r\n\r\n    // Method to display the editable value as text and emit save event to host\r\n    protected onSubmit() {\r\n        this.isEditing = false;\r\n        this.subjectStateChange.next(InlineEditorState.Save);\r\n        this.onSave.emit(this);\r\n\r\n        if (this.openInModal) {\r\n            this.toggleGroupModal();\r\n        }\r\n\r\n        this.inlineEditors.forEach((item) => {\r\n            item.onSubmit();\r\n        });\r\n    }\r\n\r\n    // Method to reset the editable value\r\n    protected cancel() {\r\n        this.isEditing = false;\r\n        if (this.openInModal) {\r\n            this.toggleGroupModal();\r\n        }\r\n\r\n        this.inlineEditors.forEach((item) => {\r\n            item.cancel();\r\n        });\r\n\r\n        if (this.onCancel) {\r\n            this.onCancel.emit(this);\r\n        }\r\n\r\n        this.subjectStateChange.next(InlineEditorState.Cancel);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/inline-editor/inline-editor-group.component.ts","module.exports = \"<ng-content></ng-content>\\r\\n\\r\\n<div *ngIf=\\\"openInModal\\\" bsModal #editGroupModal=\\\"bs-modal\\\" (onShown)=\\\"onShown()\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"edit\\\" aria-hidden=\\\"true\\\">\\r\\n    <div class=\\\"modal-dialog\\\">\\r\\n        <div class=\\\"modal-content\\\">\\r\\n            <div class=\\\"modal-header\\\">\\r\\n                <h4 class=\\\"modal-title pull-left\\\">Redigera</h4>\\r\\n                <button class=\\\"close\\\" (click)=\\\"cancel()\\\"><span aria-hidden=\\\"true\\\">&times;</span><span class=\\\"sr-only\\\">Stäng</span></button>\\r\\n            </div>\\r\\n            <div class=\\\"modal-body\\\">\\r\\n                <div class=\\\"modal-item\\\" *ngFor=\\\"let editor of inlineEditors\\\">\\r\\n                    <ng-template [ngTemplateOutlet]=\\\"editor.editTemplate\\\" [ngOutletContext]=\\\"{ $implicit: editor }\\\">\\r\\n                    </ng-template>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"modal-footer\\\">\\r\\n                <button class=\\\"btn btn-secondary\\\" (click)=\\\"cancel()\\\"><span class=\\\"fa fa-remove\\\"></span> Avbryt</button>\\r\\n                <button [disabled]=\\\"invalid\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onSubmit(value)\\\"><span class=\\\"fa fa-check\\\"></span> Spara</button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<button *ngIf=\\\"!isEditing\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"edit()\\\"><span class=\\\"fa fa-pencil\\\"></span> Ändra</button>\\r\\n<div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Avbryt eller spara\\\" *ngIf=\\\"!openInModal && isEditing\\\">\\r\\n    <button class=\\\"btn btn-secondary\\\" (click)=\\\"cancel()\\\"><span class=\\\"fa fa-remove\\\"></span> Avbryt</button>\\r\\n    <button [disabled]=\\\"this.disableSave\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onSubmit(value)\\\"><span class=\\\"fa fa-check\\\"></span> Spara</button>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/inline-editor-group.html\n// module id = ./src/typescript/blueleet/modules/inline-editor/inline-editor-group.html\n// module chunks = 1","import { NgZone, Component, HostListener, TemplateRef, Input, OnInit, AfterContentInit, Output, EventEmitter, ElementRef, ViewChild, ContentChild, Renderer } from \"@angular/core\";\r\nimport { ModalDirective } from \"ngx-bootstrap\";\r\nimport { AbstractValueAccessor } from \"../../abstraction/AbstractValueAccessor\";\r\nimport * as EditorContextService from \"./services/InlineEditorContext.service\";\r\nimport { InlineEditorGroupComponent } from \"./inline-editor-group.component\";\r\n\r\n@Component({\r\n    selector: \"render-editor\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"editor?.defaultEditTemplate\" [ngOutletContext]=\"{ $implicit: this?.editor }\"></ng-template>`\r\n})\r\nexport class RenderEditorComponent implements OnInit {\r\n    @Input() editor = null;\r\n\r\n    constructor(protected contextService: EditorContextService.InlineEditorContextService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.contextService.editorInstance.subscribe((value: any) => {\r\n            if (Object.isNotNullOrUndefined(value)) {\r\n                this.editor = value;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: \"presentation-state\",\r\n    template: `<ng-template *ngIf=\"this.editor\" [ngTemplateOutlet]=\"this?.template\" [ngOutletContext]=\"{ $implicit: editor }\"></ng-template>`\r\n})\r\nexport class PresentationStateComponent implements OnInit {\r\n    @ContentChild(TemplateRef) template: TemplateRef<any>;\r\n    @Input() editor = null;\r\n\r\n    constructor(protected contextService: EditorContextService.InlineEditorContextService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.contextService.editorInstance.subscribe((value: any) => {\r\n            if (Object.isNotNullOrUndefined(value)) {\r\n                this.editor = value;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: \"edit-state\",\r\n    template: `<ng-template *ngIf=\"this.editor\" [ngTemplateOutlet]=\"this?.template\" [ngOutletContext]=\"{ $implicit: editor }\"></ng-template>`\r\n})\r\nexport class EditStateComponent implements AfterContentInit {\r\n    @ContentChild(TemplateRef) template: TemplateRef<any>;\r\n    @Input() editor = null;\r\n\r\n    constructor(protected contextService: EditorContextService.InlineEditorContextService) { }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.contextService.editorInstance.subscribe((value: any) => {\r\n            if (Object.isNotNullOrUndefined(value)) {\r\n                this.editor = value;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport abstract class InlineEditorComponent extends AbstractValueAccessor implements OnInit, AfterContentInit {\r\n    @ViewChild(\"inlineEditControl\") inlineEditControl: ElementRef;\r\n    @ViewChild(\"editModal\")\r\n    editModal: ModalDirective;\r\n    @ViewChild(\"editModalRef\")\r\n    editModalRef: ElementRef;\r\n    @ContentChild(RenderEditorComponent) protected renderEditorComponent: RenderEditorComponent;\r\n\r\n    // View templates\r\n    @ViewChild(\"DefaultPresentation\") defaultPresentationTemplate: TemplateRef<any>;\r\n    @ViewChild(\"DefaultEdit\") defaultEditTemplate: TemplateRef<any>;\r\n\r\n    // User specefic templates\r\n    @ContentChild(PresentationStateComponent) inputPresentationTemplate: PresentationStateComponent;\r\n    @ContentChild(EditStateComponent) inputEditTemplate: EditStateComponent;\r\n\r\n    // Events\r\n    @Output()\r\n    onSave: EventEmitter<any> = new EventEmitter();\r\n    @Output()\r\n    onEdit: EventEmitter<any> = new EventEmitter();\r\n    @Output()\r\n    onCancel: EventEmitter<any> = new EventEmitter();\r\n\r\n    // Handles presentation and edit state.\r\n    presentationTemplate: TemplateRef<any>;\r\n    editTemplate: TemplateRef<any>;\r\n\r\n    // input's attribute\r\n    @Input()\r\n    type: string;\r\n    @Input()\r\n    disabled: boolean;\r\n    @Input()\r\n    placeholder: string;\r\n    @Input()\r\n    name: string;\r\n    @Input()\r\n    size: number;\r\n    @Input()\r\n    openInModal: boolean;\r\n    @Input()\r\n    focusThis: boolean;\r\n    @Input()\r\n    formHorizontal: boolean = true;\r\n\r\n    // Configuration attribute\r\n    @Input()\r\n    empty: string;\r\n\r\n    showEditState: boolean = null;\r\n    showButtons: boolean;\r\n    editing: boolean;\r\n    isEmpty: boolean;\r\n    invalid: boolean;\r\n\r\n    protected editorGroup: InlineEditorGroupComponent;\r\n\r\n    constructor(\r\n        protected element: ElementRef,\r\n        protected renderer: Renderer,\r\n        protected zone: NgZone,\r\n        protected contextService: EditorContextService.InlineEditorContextService,\r\n        protected contextGroupService: EditorContextService.InlineEditorGroupContextService\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    @HostListener(\"click\", [\"$event\"])\r\n    onClick($event: MouseEvent): void {\r\n        let targetElement = $event.target;\r\n        if (this.editModalRef.nativeElement.contains(targetElement)) {\r\n            // We are in the edit modal.\r\n            return;\r\n        }\r\n        if (this.showButtons) {\r\n            this.edit();\r\n        }\r\n    }\r\n\r\n    showPresentation() {\r\n        if (Object.isNotNullOrUndefined(this.showEditState) && this.showEditState === false) {\r\n            return true;\r\n        }\r\n\r\n        if (this.openInModal) {\r\n            return true;\r\n        }\r\n\r\n        if (this.editing === false) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    showEdit() {\r\n        if (Object.isNotNullOrUndefined(this.showEditState) && this.showEditState === false) {\r\n            return false;\r\n        }\r\n\r\n        return this.editing;\r\n    }\r\n\r\n    onModalShown() { }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.invalid = isDisabled;\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.contextGroupService.editorGroupInstance.subscribe((editorGroup) => {\r\n            if (editorGroup) {\r\n                this.editorGroup = editorGroup;\r\n                this.showButtons = false;\r\n\r\n                if (this.editorGroup.isEditing && this.editing === false) {\r\n                    this.edit();\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this.editorGroup) {\r\n            this.showButtons = false;\r\n            if (this.editorGroup.isEditing && this.editing === false) {\r\n                this.edit();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.setDefaults();\r\n\r\n        if (Object.isNotNullOrUndefined(this.inputPresentationTemplate)) {\r\n            this.presentationTemplate = this.inputPresentationTemplate.template;\r\n        } else {\r\n            this.presentationTemplate = this.defaultPresentationTemplate;\r\n        }\r\n\r\n        if (Object.isNotNullOrUndefined(this.inputEditTemplate)) {\r\n            this.editTemplate = this.inputEditTemplate.template;\r\n        } else {\r\n            this.editTemplate = this.defaultEditTemplate;\r\n        }\r\n\r\n        if (this.editModal) {\r\n            this.editModal.config = { backdrop: \"static\" };\r\n        }\r\n\r\n        this.contextService.editorInstance.next(this);\r\n    }\r\n\r\n    writeValue(value: any) {\r\n        if (value) {\r\n            super.writeValue(value);\r\n            this.isEmpty = false;\r\n        } else {\r\n            this.isEmpty = true;\r\n        }\r\n    }\r\n\r\n    hasValue() {\r\n        return !this.isEmpty;\r\n    }\r\n\r\n    // Method to display the editable value as text and emit save event to host\r\n    onSubmit(value = this.value) {\r\n        this.writeValue(value);\r\n        if (this.onSave) {\r\n            this.onSave.emit(value);\r\n        }\r\n\r\n        if (this.editModal) {\r\n            this.editModal.hide();\r\n        }\r\n\r\n        this.editing = false;\r\n        this.isEmpty = false;\r\n    }\r\n\r\n    // Method to display the inline edit form and hide the <a> element\r\n    edit(value = this.value) {\r\n        this.$preValue$ = value;  // Store original value in case the form is cancelled\r\n        this.editing = true;\r\n\r\n        if (this.onEdit) {\r\n            this.onEdit.emit(this);\r\n        }\r\n\r\n        if (this.openInModal && this.editModal) {\r\n            this.editModal.show();\r\n        }\r\n    }\r\n\r\n    // Method to reset the editable value\r\n    cancel() {\r\n        this.value = this.$preValue$;\r\n\r\n        if (this.editModal) {\r\n            this.editModal.hide();\r\n        }\r\n\r\n        this.editing = false;\r\n        if (this.onCancel) {\r\n            this.onCancel.emit(this);\r\n        }\r\n    }\r\n\r\n    protected presentControl(): string {\r\n        return (this.isEmpty) ? this.empty : this.value;\r\n    }\r\n\r\n    private setDefaults(): void {\r\n        // Configuratable properties.\r\n        if (Object.isNullOrUndefined(this.type)) {\r\n            this.type = \"text\";\r\n        }\r\n        if (Object.isNullOrUndefined(this.disabled)) {\r\n            this.disabled = false;\r\n        }\r\n        if (Object.isNullOrUndefined(this.placeholder)) {\r\n            this.placeholder = \"\";\r\n        }\r\n        if (Object.isNullOrUndefined(this.name)) {\r\n            this.name = \"\";\r\n        }\r\n        if (Object.isNullOrUndefined(this.size)) {\r\n            this.size = 8;\r\n        }\r\n        if (Object.isNullOrUndefined(this.openInModal)) {\r\n            this.openInModal = false;\r\n        }\r\n        if (Object.isNullOrUndefined(this.focusThis)) {\r\n            this.focusThis = false;\r\n        }\r\n        if (Object.isNullOrUndefined(this.empty)) {\r\n            this.empty = \"empty\";\r\n        }\r\n\r\n        // Public state properties.\r\n        if (Object.isNullOrUndefined(this.showButtons)) {\r\n            this.showButtons = true;\r\n        }\r\n        if (Object.isNullOrUndefined(this.editing)) {\r\n            this.editing = false;\r\n        }\r\n        if (Object.isNullOrUndefined(this.isEmpty)) {\r\n            this.isEmpty = false;\r\n        }\r\n        if (Object.isNullOrUndefined(this.invalid)) {\r\n            this.invalid = false;\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/inline-editor/inline-editor.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/index.js!../../../../../node_modules/sass-loader/index.js!./inline-editor.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/index.js!../../../../../node_modules/sass-loader/index.js!./inline-editor.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/index.js!../../../../../node_modules/sass-loader/index.js!./inline-editor.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/inline-editor.scss\n// module id = ./src/typescript/blueleet/modules/inline-editor/inline-editor.scss\n// module chunks = 1","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { SelectModule } from \"ng2-select-compat\";\r\nimport { AlertModule } from \"ngx-bootstrap/alert\";\r\nimport { ModalModule } from \"ngx-bootstrap/modal\";\r\nimport * as index from \"./index\";\r\nimport { CommonDirectivesModule } from \"../commonDirectives/module\";\r\nconst configs = index.inizialize();\r\n\r\n@NgModule({\r\n    imports: [CommonModule, ReactiveFormsModule, CommonDirectivesModule, SelectModule, AlertModule.forRoot(), ModalModule.forRoot()],\r\n    exports: configs.exports,\r\n    declarations: configs.editors\r\n})\r\nexport class InlineEditorModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: InlineEditorModule,\r\n            providers: configs.editorProviders\r\n        };\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/inline-editor/module.ts","import { Injectable } from \"@angular/core\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport * as components from \"../inline-editor.component\";\r\nimport { InlineEditorGroupComponent } from \"../inline-editor-group.component\";\r\n\r\n@Injectable()\r\nexport class InlineEditorContextService {\r\n    editorInstance: Rx.BehaviorSubject<components.InlineEditorComponent> = new Rx.BehaviorSubject(null);\r\n}\r\n\r\n@Injectable()\r\nexport class InlineEditorGroupContextService {\r\n    editorGroupInstance: Rx.BehaviorSubject<InlineEditorGroupComponent> = new Rx.BehaviorSubject(null);\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/inline-editor/services/InlineEditorContext.service.ts","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { TranslatorService } from \"./translator.service\";\r\nimport { CacheModule } from \"../cache/module\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, CacheModule],\r\n    exports: [CacheModule],\r\n    declarations: [],\r\n    providers: [TranslatorService]\r\n})\r\nexport class LanguageModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/language/module.ts","import { Injectable, Inject } from \"@angular/core\";\r\nimport { UmbracoAjaxService } from \"../../umbraco-ajax-Service\";\r\nimport { CacheService } from \"../cache/cache.service\";\r\nconst _ = require(\"lodash\");\r\n\r\n@Injectable()\r\nexport class TranslatorService {\r\n    constructor( @Inject(UmbracoAjaxService) protected umbracoAjaxService: UmbracoAjaxService, @Inject(CacheService) protected cacheService: CacheService) { }\r\n\r\n    translate(key: string, altText: string = \"\", cache: boolean = true): Promise<string> {\r\n        const valueFactory = () => this.umbracoAjaxService.post(\"TranslatorService\", \"TranslationPost\", { key, altText });\r\n\r\n        return this.cacheService.getCacheItem(`TranslatorService:TranslationPost:${key}`, valueFactory);\r\n    }\r\n\r\n    smartTranslate(key: string, value: any, altText: string = \"\", cache: boolean = true): Promise<string> {\r\n        const valueFactory = () => this.umbracoAjaxService.post(\"TranslatorService\", \"TranslationPost\", { key, altText });\r\n\r\n        return this.cacheService.getCacheItem(`TranslatorService:TranslationPost:${key}`, valueFactory).then(v => {\r\n            _.templateSettings.interpolate = /{([\\s\\S]+?)}/g;\r\n            const compiled = _.template(v);\r\n            const compiledValue = compiled(value);\r\n\r\n            return compiledValue;\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/language/translator.service.ts","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { SearchComponent } from \"./search.component\";\r\nimport { SearchService } from \"./search.service\";\r\nimport { BlueLeetUmbracoModule } from \"../../blueleet-umbraco.module\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, BlueLeetUmbracoModule],\r\n    exports: [BlueLeetUmbracoModule, SearchComponent],\r\n    declarations: [SearchComponent]\r\n})\r\nexport class SearchModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: SearchModule,\r\n            providers: [SearchService]\r\n        };\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/search/module.ts","import { Component, Input, NgZone, Inject, ElementRef, TemplateRef, ContentChild, OnChanges, SimpleChanges, Output, EventEmitter } from \"@angular/core\";\r\nimport { SearchService, ISearchResult } from \"./search.service\";\r\n\r\n@Component({\r\n    selector: \"bl-search\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"this?.searchTemplate\" [ngOutletContext]=\"{ $implicit: this }\"></ng-template>`,\r\n    styles: [require(\"./search.scss\").toString()]\r\n})\r\nexport class SearchComponent implements OnChanges {\r\n    @ContentChild(TemplateRef) searchTemplate: TemplateRef<any> = null;\r\n\r\n    @Input(\"searchTerm\") searchTerm: string;\r\n\r\n    @Output(\"onSearchUpdate\") onSearchUpdate: EventEmitter<any> = new EventEmitter<ISearchResult>();\r\n    @Output(\"onMatchingWordsUpdate\") onMatchingWordsUpdate: EventEmitter<any> = new EventEmitter<string[]>();\r\n\r\n    constructor(\r\n        @Inject(SearchService) private searchService: SearchService,\r\n        @Inject(NgZone) private zone: NgZone,\r\n        @Inject(ElementRef) private elementRef: ElementRef) { }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        let searchTerm = changes[\"searchTerm\"];\r\n\r\n        // We only wants to trigger a search if the previous value was different.\r\n        if (searchTerm != null && searchTerm.currentValue !== searchTerm.previousValue) {\r\n            // Only call lookFor if we have any observers\r\n            if (this.onSearchUpdate.observers.length > 0) {\r\n                this.searchService.lookFor(searchTerm.currentValue).then(value => {\r\n                    this.onSearchUpdate.emit(value);\r\n                });\r\n            }\r\n\r\n            // Only call lookFor if we have any observers\r\n            if (this.onMatchingWordsUpdate.observers.length > 0) {\r\n                this.searchService.lookForMatchingWords(searchTerm.currentValue).then(value => {\r\n                    this.onMatchingWordsUpdate.emit(value);\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/search/search.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/index.js!../../../../../node_modules/sass-loader/index.js!./search.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/index.js!../../../../../node_modules/sass-loader/index.js!./search.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/index.js!../../../../../node_modules/sass-loader/index.js!./search.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/search/search.scss\n// module id = ./src/typescript/blueleet/modules/search/search.scss\n// module chunks = 1","import { Injectable, Inject } from \"@angular/core\";\r\nimport { UmbracoAjaxService } from \"../../umbraco-ajax-Service\";\r\n\r\nexport interface ISearchResult {\r\n    searchTime: number;\r\n    resultMessage: string;\r\n    results: any[];\r\n}\r\n\r\n@Injectable()\r\nexport class SearchService {\r\n    constructor( @Inject(UmbracoAjaxService) protected umbracoAjaxService: UmbracoAjaxService) { }\r\n\r\n    lookFor(term: string): Promise<ISearchResult> {\r\n        return this.umbracoAjaxService.post(\"Search\", \"PostLookFor\", { searchTerm: term });\r\n    }\r\n\r\n    lookForMatchingWords(term: string): Promise<string[]> {\r\n        return this.umbracoAjaxService.post(\"Search\", \"PostLookForMatchingWords\", { searchTerm: term });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/search/search.service.ts","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { WidgetClockComponent } from \"./widget-clock/widget-clock.component\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [WidgetClockComponent],\r\n    declarations: [WidgetClockComponent]\r\n})\r\nexport class WidgetsModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/widgets/module.ts","module.exports = __webpack_public_path__ + \"./assets/blueleet/modules/widgets/widget-clock/analog-hours.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/widgets/widget-clock/analog-hours.png\n// module id = ./src/typescript/blueleet/modules/widgets/widget-clock/analog-hours.png\n// module chunks = 1","module.exports = __webpack_public_path__ + \"./assets/blueleet/modules/widgets/widget-clock/analog-minutes.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/widgets/widget-clock/analog-minutes.png\n// module id = ./src/typescript/blueleet/modules/widgets/widget-clock/analog-minutes.png\n// module chunks = 1","module.exports = __webpack_public_path__ + \"./assets/blueleet/modules/widgets/widget-clock/analog-seconds.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/widgets/widget-clock/analog-seconds.png\n// module id = ./src/typescript/blueleet/modules/widgets/widget-clock/analog-seconds.png\n// module chunks = 1","module.exports = __webpack_public_path__ + \"./assets/blueleet/modules/widgets/widget-clock/clock.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/widgets/widget-clock/clock.png\n// module id = ./src/typescript/blueleet/modules/widgets/widget-clock/clock.png\n// module chunks = 1","module.exports = \"<ul #Clock class=\\\"widget-clock hidden-xs-down hidden-xs-up\\\">\\r\\n    <li #Sec class=\\\"ticker-sec\\\"></li>\\r\\n    <li #Hour class=\\\"ticker-hour\\\"></li>\\r\\n    <li #Min class=\\\"ticker-min\\\"></li>\\r\\n</ul>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/widgets/widget-clock/templates/clock.html\n// module id = ./src/typescript/blueleet/modules/widgets/widget-clock/templates/clock.html\n// module chunks = 1","import { Component, NgZone, Inject, ElementRef, ViewChild, AfterContentInit } from \"@angular/core\";\r\nimport * as $ from \"jquery\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport * as UmbracoajaxService from \"../../../umbraco-ajax-Service\";\r\nrequire(\"./clock.png\");\r\n\r\n@Component({\r\n    selector: \"widget-clock\",\r\n    template: require(\"./templates/clock.html\"),\r\n    styles: [require(\"./widget-clock.scss\").toString()]\r\n})\r\nexport class WidgetClockComponent implements AfterContentInit {\r\n    @ViewChild(\"Clock\") clock: ElementRef;\r\n    @ViewChild(\"Sec\") clockSec: ElementRef;\r\n    @ViewChild(\"Hour\") clockHour: ElementRef;\r\n    @ViewChild(\"Min\") clockMin: ElementRef;\r\n\r\n    timeObservable: Rx.Observable<Date> = Rx.Observable.interval(1000).map(() => new Date());\r\n\r\n    constructor(\r\n        @Inject(UmbracoajaxService.UmbracoAjaxService) private umbracoAjaxService: UmbracoajaxService.UmbracoAjaxService,\r\n        @Inject(NgZone) private zone: NgZone,\r\n        @Inject(ElementRef) private elementRef: ElementRef) { }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.timeObservable.subscribe((value: Date) => {\r\n            let hours = value.getHours();\r\n            let mins = value.getMinutes();\r\n            let seconds = value.getSeconds();\r\n\r\n            let sdegree = seconds * 6;\r\n            let srotate = \"rotate(\" + sdegree + \"deg)\";\r\n            $(this.clockSec.nativeElement).css({\r\n                \"-moz-transform\": srotate,\r\n                \"-webkit-transform\": srotate,\r\n                \"-ms-transform\": srotate,\r\n                \"transform\": srotate\r\n            });\r\n\r\n            let hdegree = hours * 30 + (mins / 2);\r\n            let hrotate = \"rotate(\" + hdegree + \"deg)\";\r\n            $(this.clockHour.nativeElement).css({\r\n                \"-moz-transform\": hrotate,\r\n                \"-webkit-transform\": hrotate,\r\n                \"-ms-transform\": hrotate,\r\n                \"transform\": hrotate\r\n            });\r\n\r\n            let mdegree = mins * 6;\r\n            let mrotate = \"rotate(\" + mdegree + \"deg)\";\r\n            $(this.clockMin.nativeElement).css({\r\n                \"-moz-transform\": mrotate,\r\n                \"-webkit-transform\": mrotate,\r\n                \"-ms-transform\": mrotate,\r\n                \"transform\": mrotate\r\n            });\r\n        });\r\n\r\n        setTimeout(() => {\r\n            $(this.clock.nativeElement).removeClass(\"hidden-xs-up\");\r\n        }, 1000);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/modules/widgets/widget-clock/widget-clock.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../node_modules/css-loader/index.js!../../../../../../node_modules/postcss-loader/index.js!../../../../../../node_modules/sass-loader/index.js!./widget-clock.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../../node_modules/css-loader/index.js!../../../../../../node_modules/postcss-loader/index.js!../../../../../../node_modules/sass-loader/index.js!./widget-clock.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../../node_modules/css-loader/index.js!../../../../../../node_modules/postcss-loader/index.js!../../../../../../node_modules/sass-loader/index.js!./widget-clock.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/widgets/widget-clock/widget-clock.scss\n// module id = ./src/typescript/blueleet/modules/widgets/widget-clock/widget-clock.scss\n// module chunks = 1","import { Pipe, PipeTransform } from \"@angular/core\";\r\n\r\n@Pipe({ name: \"Capitalize\" })\r\nexport class CapitalizePipe implements PipeTransform {\r\n    transform(value: string): any {\r\n        if (!value) {\r\n            return value;\r\n        }\r\n\r\n        return value.replace(/\\w\\S*/g, txt => (txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/pipes/capitalize.pipe.ts","import { Pipe, PipeTransform } from \"@angular/core\";\r\n\r\n@Pipe({ name: \"truncate\" })\r\nexport class TruncatePipe implements PipeTransform {\r\n    transform(value: string, args: string[]): string {\r\n        let limit: any;\r\n        if (Object.isNullOrUndefined(args.length)) {\r\n            limit = args;\r\n        } else if (args.length > 0) {\r\n            limit = parseInt(args[0], 10);\r\n        } else {\r\n            limit = 10;\r\n        }\r\n\r\n        let trail: string;\r\n        if (args.length > 1) {\r\n            trail = args[1];\r\n        } else {\r\n            trail = \"...\";\r\n        }\r\n\r\n        if (value.length > limit) {\r\n            return value.substring(0, limit) + trail;\r\n        }\r\n\r\n        return value;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/pipes/truncate.pipe.ts","import { Inject, Injectable, isDevMode } from \"@angular/core\";\r\nimport { RequestOptions, RequestMethod, Http, Headers, Response } from \"@angular/http\";\r\nimport * as $ from \"jquery\";\r\nimport { ConfigService } from \"./config.service\";\r\nimport { ServiceEvent, ServiceEventType } from \"./ServiceEvent.service\";\r\n\r\n@Injectable()\r\nexport class UmbracoAjaxService {\r\n    private url: string;\r\n\r\n    constructor(\r\n        @Inject(Http) protected $http: Http,\r\n        @Inject(Window) protected window,\r\n        @Inject(ConfigService) protected blueLeetConfigService: ConfigService,\r\n        @Inject(ServiceEvent) protected serviceEvent: ServiceEvent) {\r\n        const currentCulture = $(\"head\").data(\"culture\");\r\n        this.blueLeetConfigService.addLocalConfig(\"currentCulture\", currentCulture);\r\n        this.url = this.getUrl();\r\n    }\r\n\r\n    private transform(data) {\r\n        return $.param(data);\r\n    }\r\n\r\n    private transformJsonRequest(data) {\r\n        return JSON.stringify(data);\r\n    }\r\n\r\n    private getUrl() {\r\n        return window.location.protocol + \"//\" + window.location.host + \"/\";\r\n    }\r\n\r\n    private getEncryptedRoute(controller: string, action: string, area: string = \"\", additionalRouteVals: any = null): Promise<any> {\r\n        let url = this.url + \"umbraco/Api/JsonHelper/SurfaceActionPost\";\r\n        console.log(`getEncryptedRoute(controller:'${controller}', action:'${action}', area:'${area}')`, additionalRouteVals);\r\n\r\n        let body: any = {\r\n            controllerName: controller,\r\n            controllerAction: action,\r\n            area: area,\r\n            additionalRouteVals: additionalRouteVals\r\n        };\r\n\r\n        let headers = new Headers({ \"Content-Type\": \"application/json\" });\r\n        let options = new RequestOptions({ headers: headers });\r\n        body = this.transformJsonRequest(body);\r\n\r\n        return this.$http.post(url, body, options)\r\n            .map((res: Response) => {\r\n                let json = res.json();\r\n                return json;\r\n            }).toPromise();\r\n    }\r\n\r\n    private getHeaders(): Headers {\r\n        const headers = new Headers();\r\n        headers.set(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\r\n\r\n        let ajaxVerificationToken = $(\"head\").data(\"ajaxVerificationToken\");\r\n        if (ajaxVerificationToken) {\r\n            headers.set(\"RequestVerificationToken\", ajaxVerificationToken);\r\n            console.log(\"setting ajaxVerificationToken header\", ajaxVerificationToken);\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    private getValidController(controller: string): string {\r\n        const endsWithControllerRegex = new RegExp(\"controller$\", \"gi\");\r\n        if (endsWithControllerRegex.test(controller)) {\r\n            console.warn(\"[blueleet-http] a request was made with controller: '\" + controller + \"' which is ending with 'controller' please remove the controller part as it is not needed!\");\r\n            return controller.replace(new RegExp(\"controller$\", \"gi\"), \"\");\r\n        }\r\n\r\n        return controller;\r\n    }\r\n\r\n    private validateNamingConventionForAction(controller: string, action: string, isPost: boolean = false) {\r\n        if (isDevMode() === false) {\r\n            return;\r\n        }\r\n\r\n        const postConventionRegex = new RegExp(\"(post$)|(^post)\", \"gi\");\r\n        const getConventionRegex = new RegExp(\"(get$)|(^get)\", \"gi\");\r\n\r\n        if (isPost && !postConventionRegex.test(action)) {\r\n            console.error(`Convention: A request was made to controller: '${controller}' with an incorrectly named action: '${action}' make sure it starts or ends with 'post'.`);\r\n        } else if (!isPost && getConventionRegex.test(action)) {\r\n            console.error(`Convention: A request was made to controller: '${controller}' with an incorrectly named action: '${action}' make sure it starts or ends with 'get'.`);\r\n        }\r\n    }\r\n\r\n    private handleServerError(response: Response, silentTry: boolean): any {\r\n        this.handleDone(response);\r\n\r\n        if (silentTry) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (Object.isNullOrUndefined(response.headers)) {\r\n            return Promise.reject(response);\r\n        } else if (response.headers.has(\"Content-Type\") && response.headers.get(\"Content-Type\").indexOf(\"application/json\") >= 0) {\r\n            let json = response.json();\r\n            return Promise.reject(json);\r\n        } else {\r\n            return Promise.reject(response.text());\r\n        }\r\n    }\r\n\r\n    private handleDone(value) {\r\n        if (!Object.isNullOrUndefined(value)) {\r\n            this.serviceEvent.emit(ServiceEventType.RequestEnd, value);\r\n        }\r\n    }\r\n\r\n    post(controller, action, parameters: any = null, info?: { area?: string, silentTry?: boolean }): Promise<any> {\r\n        const defaultInfo = { area: \"\", noThrow: false };\r\n        info = $.extend(defaultInfo, info || {});\r\n        controller = this.getValidController(controller);\r\n        this.validateNamingConventionForAction(controller, action, true);\r\n        return this.getEncryptedRoute(controller, action, info.area, parameters)\r\n            .then(response => {\r\n                this.serviceEvent.emit(ServiceEventType.RequestBegin);\r\n                const options = new RequestOptions({\r\n                    headers: this.getHeaders()\r\n                });\r\n\r\n                return this.$http.post(window.location.href, this.transform(response), options)\r\n                    .map((res: Response) => {\r\n                        let data: any;\r\n                        if (res.headers.has(\"Content-Type\") && res.headers.get(\"Content-Type\").indexOf(\"application/json\") >= 0) {\r\n                            data = res.json();\r\n                        } else {\r\n                            data = res.text();\r\n                            if (!data) {\r\n                                data = res;\r\n                            }\r\n                        }\r\n\r\n                        this.handleDone(data);\r\n                        return data;\r\n                    })\r\n                    .catch(r => this.handleServerError(r, info.silentTry))\r\n                    .toPromise();\r\n            });\r\n    }\r\n\r\n    get(controller, action, parameters: any = null, info?: { area?: string, silentTry?: boolean }): Promise<any> {\r\n        const defaultInfo = { area: \"\", noThrow: false };\r\n        info = $.extend(defaultInfo, info || {});\r\n        controller = this.getValidController(controller);\r\n        this.validateNamingConventionForAction(controller, action);\r\n        return this.getEncryptedRoute(controller, action, info.area, parameters)\r\n            .then(response => {\r\n                this.serviceEvent.emit(ServiceEventType.RequestBegin);\r\n                const options = new RequestOptions({\r\n                    method: RequestMethod.Get,\r\n                    headers: this.getHeaders(),\r\n                    body: response\r\n                });\r\n                return this.$http.request(window.location.href, options)\r\n                    .map((res: Response) => {\r\n                        let data: any;\r\n                        if (res.headers.has(\"Content-Type\") && res.headers.get(\"Content-Type\").indexOf(\"application/json\") >= 0) {\r\n                            data = res.json();\r\n                        } else {\r\n                            data = res.text();\r\n                            if (!data) {\r\n                                data = res;\r\n                            }\r\n                        }\r\n\r\n                        this.handleDone(data);\r\n                        return data;\r\n                    })\r\n                    .catch(r => this.handleServerError(r, info.silentTry))\r\n                    .toPromise();\r\n            });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/blueleet/umbraco-ajax-Service.ts","import { ContentChild, TemplateRef, EmbeddedViewRef, ViewContainerRef, AfterContentInit, OnChanges, ChangeDetectorRef, SimpleChanges } from \"@angular/core\";\r\nimport * as enums from \"../../enums/\";\r\nimport { ITemplateBase } from \"./ITemplateBase\";\r\n\r\nexport abstract class TemplateBaseComponent implements ITemplateBase<enums.DefaultViewState>, AfterContentInit, OnChanges {\r\n    @ContentChild(TemplateRef) defaultTemplate: TemplateRef<any>;\r\n    viewRef: EmbeddedViewRef<any>;\r\n    currentTemplate: TemplateRef<any>;\r\n    context: Object;\r\n    protected viewState$: enums.DefaultViewState | any;\r\n\r\n    constructor(\r\n        protected changeDetectorRef: ChangeDetectorRef,\r\n        protected viewContainerRef: ViewContainerRef,\r\n        private readonly handleTemplateOutput: boolean = false\r\n    ) { }\r\n\r\n    get viewState(): enums.DefaultViewState | any {\r\n        return this.viewState$;\r\n    }\r\n\r\n    set viewState(value: enums.DefaultViewState | any) {\r\n        this.viewState$ = value;\r\n        this.updateTemplate();\r\n    }\r\n\r\n    getTemplate(): TemplateRef<any> {\r\n        let template = null;\r\n        switch (this.viewState) {\r\n            case enums.DefaultViewState.DefaultTemplate:\r\n                template = this.defaultTemplate;\r\n                break;\r\n        }\r\n\r\n        this.currentTemplate = template;\r\n        return template;\r\n    }\r\n\r\n    updateTemplate(): void {\r\n        const template = this.getTemplate();\r\n\r\n        if (this.currentTemplate !== template) {\r\n            this.currentTemplate = template;\r\n        }\r\n    }\r\n\r\n    init(templateRef): void {\r\n        if (this.handleTemplateOutput) {\r\n            this.context = { $implicit: this };\r\n            if (Object.isNullOrUndefined(this.viewState)) {\r\n                this.viewState = enums.DefaultViewState.DefaultTemplate;\r\n            }\r\n            this.viewRef = this.viewContainerRef.createEmbeddedView(templateRef, this.context);\r\n            this.changeDetectorRef.detectChanges();\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes?: SimpleChanges) {\r\n        this.updateTemplate();\r\n        if (this.handleTemplateOutput) {\r\n            if (this.viewRef) {\r\n                this.viewContainerRef.remove(this.viewContainerRef.indexOf(this.viewRef));\r\n            }\r\n\r\n            let templateRef = this.currentTemplate;\r\n            if (templateRef) {\r\n                this.viewRef = this.viewContainerRef.createEmbeddedView(templateRef, this.context);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        if (this.handleTemplateOutput) {\r\n            setTimeout(() => {\r\n                this.context = { $implicit: this };\r\n                if (Object.isNullOrUndefined(this.viewState)) {\r\n                    this.viewState = enums.DefaultViewState.DefaultTemplate;\r\n                }\r\n                this.viewRef = this.viewContainerRef.createEmbeddedView(this.getTemplate(), this.context);\r\n                this.changeDetectorRef.detectChanges();\r\n            },\r\n                1);\r\n        } else {\r\n            if (Object.isNullOrUndefined(this.viewState)) {\r\n                this.viewState = enums.DefaultViewState.DefaultTemplate;\r\n            } else {\r\n                this.updateTemplate();\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/components/abstraction/TemplateBaseComponent.ts","import { Component, Inject, NgZone, Input, ViewChild, ChangeDetectorRef, TemplateRef, ViewContainerRef, OnInit, AfterContentInit } from \"@angular/core\";\r\nimport { TemplateBaseComponent } from \"../../abstraction/TemplateBaseComponent\";\r\nimport * as enums from \"../../../enums/\";\r\nimport { AlertBoxService, AlertBoxOptions, AlertBoxEventType } from \"../../../alert-box.service\";\r\n\r\n@Component({\r\n    selector: \"alert-box\",\r\n    template: require(\"./templates/alert-box.html\")\r\n})\r\nexport class BootstrapAlertBoxComponent extends TemplateBaseComponent implements OnInit, AfterContentInit {\r\n    @ViewChild(\"DefaultTemplate\") defaultTemplate: TemplateRef<any>;\r\n    @Input(\"isGlobal\") isGlobal: boolean = false;\r\n    alertTemplate: TemplateRef<any> = null;\r\n    options: AlertBoxOptions = null;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(NgZone) private ngZone: NgZone,\r\n        @Inject(AlertBoxService) private alertBoxService: AlertBoxService\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.viewState$ = enums.DefaultViewState.None;\r\n        super.ngAfterContentInit();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const self = this;\r\n        if (self.isGlobal) {\r\n            self.alertBoxService.on().subscribe((value: AlertBoxOptions) => {\r\n                self.ngZone.run(() => {\r\n                    self.options = value;\r\n                    if (Object.isNullOrUndefined(value)) {\r\n                        self.viewState = enums.DefaultViewState.None;\r\n                    } else {\r\n                        self.viewState = enums.DefaultViewState.DefaultTemplate;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    show(options: AlertBoxOptions, alertTemplate: TemplateRef<any> = null) {\r\n        this.alertTemplate = alertTemplate;\r\n        this.options = options;\r\n        this.viewState = enums.DefaultViewState.DefaultTemplate;\r\n    }\r\n\r\n    isTypeInfo(): boolean {\r\n        return this.options != null && this.options.type === AlertBoxEventType.Info;\r\n    }\r\n\r\n    isTypeSuccess(): boolean {\r\n        return this.options != null && this.options.type === AlertBoxEventType.Success;\r\n    }\r\n\r\n    isTypeWarning(): boolean {\r\n        return this.options != null && this.options.type === AlertBoxEventType.Warning;\r\n    }\r\n\r\n    isTypeError(): boolean {\r\n        return this.options != null && this.options.type === AlertBoxEventType.Error;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/components/bootstrap/alert-box/alert-box.component.ts","module.exports = \"<ng-template [ngTemplateOutlet]=\\\"this.currentTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\"></ng-template>\\r\\n<ng-template #DefaultTemplate>\\r\\n    <div class=\\\"alert\\\" [ngClass]=\\\"{'alert-info': this.isTypeInfo(), 'alert-success': this.isTypeSuccess(), 'alert-warning': this.isTypeWarning(), 'alert-danger': this.isTypeError() }\\\" style=\\\"z-index: 1;\\\">\\r\\n        <span *ngIf=\\\"this?.options?.showClose\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</span>\\r\\n        <p>{{ this?.options?.message }}</p>\\r\\n        <ng-template [ngTemplateOutlet]=\\\"this.alertTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\"></ng-template>\\r\\n    </div>\\r\\n</ng-template>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/bootstrap/alert-box/templates/alert-box.html\n// module id = ./src/typescript/components/bootstrap/alert-box/templates/alert-box.html\n// module chunks = 1","import { Component, SecurityContext, Sanitizer, ViewChild, Host, HostBinding, Input, ElementRef, Renderer, OnInit, AfterViewInit } from \"@angular/core\";\r\nimport { AbstractControl, FormGroupDirective } from \"@angular/forms\";\r\nimport { AbstractValueAccessor, MakeProvider } from \"../../blueleet/abstraction/AbstractValueAccessor\";\r\nimport * as $ from \"jquery\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport { ValidationService } from \"../../validation.service\";\r\nimport { CapitalizePipe } from \"../../blueleet/pipes/capitalize.pipe\";\r\nimport { PasswordVerdict } from \"../../enums/password-verdict\";\r\n\r\n@Component({\r\n    selector: \"bs-form-input\",\r\n    template: require(\"./templates/form-input.html\"),\r\n    styles: [require(\"./form-input.scss\").toString()],\r\n    providers: [MakeProvider(BootstrapFormInputComponent), CapitalizePipe]\r\n})\r\nexport class BootstrapFormInputComponent extends AbstractValueAccessor implements OnInit, AfterViewInit {\r\n    @HostBinding(\"class.has-error\") hasError: boolean = false;\r\n\r\n    @Input(\"FormControl\") control: AbstractControl;\r\n    @Input(\"renderedInForm\") renderedInForm: boolean = true;\r\n    @Input(\"lowercase\") lowercase: boolean = false;\r\n    @Input(\"label\") label: string = null;\r\n    @Input(\"name\") name: string = null;\r\n    @Input(\"type\") type: string = \"text\";\r\n    @Input(\"placeholder\") placeholder: string = \"\";\r\n    @Input(\"showPasswordStrength\") showPasswordStrength: boolean = false;\r\n    @Input(\"validateOnBlur\") validateOnBlur: boolean = true;\r\n    @Input(\"css\") cssClass: string = \"form-control\";\r\n\r\n    @ViewChild(\"input\") inputElement: ElementRef;\r\n    @ViewChild(\"progressBar\") progressBar: ElementRef;\r\n\r\n    progressBarModel: { message: string, passwordVerdict: PasswordVerdict };\r\n    element: JQuery;\r\n    inputSubject = new Rx.Subject<string>();\r\n    inputValue: string = \"\"; // We use this instead of mapping against value to not trigger automatic updates so we can control when validators fire.\r\n    errorMessage: string = \"\";\r\n\r\n    constructor(\r\n        public elementRef: ElementRef,\r\n        private renderer: Renderer,\r\n        private capitalizePipe: CapitalizePipe,\r\n        private validationService: ValidationService,\r\n        private sanitizer: Sanitizer,\r\n        @Host() private form: FormGroupDirective\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    updateErrorMessage() {\r\n        let errorMessage: string = \"\";\r\n        for (let propertyName in this.control.errors) {\r\n            if (this.control.errors.hasOwnProperty(propertyName) && this.control.touched) {\r\n                // First check if we have a attribute with the error message if not use the ValidationService.getValidatorErrorMessage.\r\n                const errorAttr = this.element.attr(`error${this.capitalizePipe.transform(propertyName)}`);\r\n                if (errorAttr) {\r\n                    errorMessage = errorAttr;\r\n                } else {\r\n                    errorMessage = this.sanitizer.sanitize(SecurityContext.HTML, ValidationService.getValidatorErrorMessage(propertyName, this.control.errors[propertyName]));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (this.errorMessage !== errorMessage) {\r\n            this.errorMessage = this.sanitizer.sanitize(SecurityContext.HTML, errorMessage);\r\n        }\r\n    }\r\n\r\n    triggerUpdate(value: string, event: Event) {\r\n        if (this.lowercase) {\r\n            value = value.toLowerCase();\r\n        }\r\n\r\n        if (!event.bubbles) {\r\n            this.inputSubject.next(value);\r\n        }\r\n    }\r\n\r\n    onBlur(value): void {\r\n        const self = this;\r\n        if (self.validateOnBlur && self.control.untouched) {\r\n            self.control.markAsTouched();\r\n            self.inputSubject.next(value);\r\n        }\r\n    }\r\n\r\n    onFocusout(value) {\r\n        const self = this;\r\n        if (self.control.untouched) {\r\n            self.control.markAsTouched();\r\n        }\r\n        self.inputSubject.next(value);\r\n    }\r\n\r\n    onFocus(value): void {\r\n        const self = this;\r\n        if (self.validateOnBlur === false && self.control.untouched) {\r\n            self.control.markAsTouched();\r\n            self.inputSubject.next(value);\r\n        }\r\n    }\r\n\r\n    updateValue(value: string) {\r\n        const self = this;\r\n        if (self.control.value === value) {\r\n            // Same value, already validated.\r\n            return;\r\n        }\r\n\r\n        if (value === \"\" || Object.isNullOrUndefined(value)) {\r\n            self.control.markAsUntouched();\r\n        } else {\r\n            // Set the control value but trigger value events only if the control is touched.\r\n            self.control.patchValue(value, { emitEvent: self.control.touched });\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        const self = this;\r\n\r\n        if (self.lowercase) {\r\n            self.renderer.setElementStyle(this.inputElement.nativeElement, \"text-transform\", \"lowercase\");\r\n        }\r\n\r\n        // subscribe on keyup event and debounce it to prevent spam updatings.\r\n        let inputKeyUpObservable = Rx.Observable\r\n            .fromEvent(this.inputElement.nativeElement, \"keyup\")\r\n            .map((i: any) => i.currentTarget.value);\r\n\r\n        Rx.Observable\r\n            .merge(inputKeyUpObservable, this.inputSubject)\r\n            .debounceTime(500)\r\n            .subscribe((value: string) => this.updateValue(value));\r\n\r\n        this.control.statusChanges.subscribe(() => {\r\n            console.log(this.control.errors);\r\n\r\n            let hasError = this.control.touched && this.control.invalid;\r\n            if (hasError) {\r\n                this.updateErrorMessage();\r\n            } else {\r\n                this.errorMessage = \"\";\r\n            }\r\n            this.hasError = hasError;\r\n        });\r\n\r\n        if (self.showPasswordStrength) {\r\n            self.validationService.onPasswordStrengthChange().subscribe((value) => {\r\n                if (self.progressBar) {\r\n                    self.progressBarModel = self.validationService.getPasswordVerdict(value.score);\r\n\r\n                    if (self.value === \"\") {\r\n                        self.progressBarModel.message = \"\";\r\n                        self.renderer.setElementStyle(self.progressBar.nativeElement, \"width\", \"0%\");\r\n                        return;\r\n                    }\r\n\r\n                    switch (self.progressBarModel.passwordVerdict) {\r\n                        case PasswordVerdict.Weak:\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-danger\", true);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-warning\", false);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-success\", false);\r\n                            self.renderer.setElementStyle(self.progressBar.nativeElement, \"width\", \"15%\");\r\n                            break;\r\n                        case PasswordVerdict.Normal:\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-danger\", false);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-warning\", true);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-success\", false);\r\n                            self.renderer.setElementStyle(self.progressBar.nativeElement, \"width\", \"25%\");\r\n                            break;\r\n                        case PasswordVerdict.Medium:\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-danger\", false);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-warning\", false);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-success\", true);\r\n                            self.renderer.setElementStyle(self.progressBar.nativeElement, \"width\", \"50%\");\r\n                            break;\r\n                        case PasswordVerdict.Strong:\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-danger\", false);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-warning\", false);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-success\", true);\r\n                            self.renderer.setElementStyle(self.progressBar.nativeElement, \"width\", \"75%\");\r\n                            break;\r\n                        case PasswordVerdict.VeryStrong:\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-danger\", false);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-warning\", false);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-success\", true);\r\n                            self.renderer.setElementStyle(self.progressBar.nativeElement, \"width\", \"100%\");\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.element = $(this.elementRef.nativeElement);\r\n\r\n        if (Object.isNullOrUndefined(this.control)) {\r\n            const controlName = this.element.attr(\"formControlName\");\r\n\r\n            if (Object.isNullOrUndefined(controlName)) {\r\n                throw \"No formControlName set and 'FormControl' input is not set, either of those must be set!\";\r\n            }\r\n\r\n            // Find the control in the Host (Parent) form\r\n            let allControls = this.form.form.controls;\r\n            this.control = allControls.hasOwnProperty(controlName) ? allControls[controlName] : null;\r\n            if (Object.isNullOrUndefined(this.control)) {\r\n                throw `Could not find control by ${controlName}!`;\r\n            }\r\n        }\r\n\r\n        this.renderer.setElementClass(this.elementRef.nativeElement, \"form-group\", true);\r\n        this.renderer.setElementClass(this.elementRef.nativeElement, \"has-feedback\", true);\r\n\r\n        if (Object.isNullOrUndefined(this.label) || this.label === \"\") {\r\n            this.label = this.placeholder;\r\n        }\r\n\r\n        // We may have a value already if the form is created with one.\r\n        this.inputValue = this.control.value;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/components/bootstrap/form-input.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./form-input.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./form-input.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./form-input.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/bootstrap/form-input.scss\n// module id = ./src/typescript/components/bootstrap/form-input.scss\n// module chunks = 1","module.exports = \"<!--<label *ngIf=\\\"this.renderedInForm\\\" class=\\\"col-md-3 form-control-label\\\">{{label}}</label>\\r\\n<div *ngIf=\\\"this.renderedInForm\\\" class=\\\"col-md-9\\\">\\r\\n    <input #input [class]=\\\"cssClass\\\" [name]=\\\"name\\\" [type]=\\\"type\\\" [placeholder]=\\\"placeholder\\\" (blur)=\\\"onBlur($event.target.value)\\\" (focus)=\\\"onFocus($event.target.value)\\\" (focusout)=\\\"onFocusout($event.target.value)\\\" [value]=\\\"inputValue\\\" (input)=\\\"triggerUpdate($event.target.value, $event)\\\">\\r\\n    <span class=\\\"glyphicon glyphicon-remove form-control-feedback\\\" aria-hidden=\\\"true\\\" *ngIf=\\\"hasError\\\"></span>\\r\\n    <div *ngIf=\\\"showPasswordStrength\\\" class=\\\"form-text progress password-progress\\\">\\r\\n        <div #progressBar class=\\\"progress-bar\\\" role=\\\"progressbar\\\" style=\\\"width: 0;\\\">\\r\\n            <p class=\\\"text-center\\\">{{ progressBarModel?.message }}</p>\\r\\n        </div>\\r\\n    </div>\\r\\n    <small *ngIf=\\\"showPasswordStrength && errorMessage !== null\\\" class=\\\"form-text\\\" [innerHTML]=\\\"errorMessage\\\"></small>\\r\\n    <span class=\\\"form-text\\\" aria-hidden=\\\"true\\\" [innerHTML]=\\\"errorMessage\\\" *ngIf=\\\"!showPasswordStrength && control.touched && control.invalid && errorMessage !== null\\\"></span>\\r\\n</div>\\r\\n<input *ngIf=\\\"!this.renderedInForm\\\" #input [class]=\\\"cssClass\\\" [name]=\\\"name\\\" [type]=\\\"type\\\" [placeholder]=\\\"placeholder\\\" (blur)=\\\"onBlur($event.target.value)\\\" (focus)=\\\"onFocus($event.target.value)\\\" (focusout)=\\\"onFocusout($event.target.value)\\\" [value]=\\\"inputValue\\\" (input)=\\\"triggerUpdate($event.target.value, $event)\\\">-->\\r\\n<input #input [class]=\\\"cssClass\\\" [name]=\\\"name\\\" [type]=\\\"type\\\" [placeholder]=\\\"placeholder\\\" (blur)=\\\"onBlur($event.target.value)\\\" (focus)=\\\"onFocus($event.target.value)\\\" (focusout)=\\\"onFocusout($event.target.value)\\\" [value]=\\\"inputValue\\\" (input)=\\\"triggerUpdate($event.target.value, $event)\\\">\\r\\n<span class=\\\"glyphicon glyphicon-remove form-control-feedback\\\" aria-hidden=\\\"true\\\" *ngIf=\\\"hasError\\\"></span>\\r\\n<div *ngIf=\\\"showPasswordStrength\\\" class=\\\"form-text progress password-progress\\\">\\r\\n    <div #progressBar class=\\\"progress-bar\\\" role=\\\"progressbar\\\" style=\\\"width: 0;\\\">\\r\\n        <p class=\\\"text-center\\\">{{ progressBarModel?.message }}</p>\\r\\n    </div>\\r\\n</div>\\r\\n<small *ngIf=\\\"showPasswordStrength && errorMessage !== null\\\" class=\\\"form-text\\\" [innerHTML]=\\\"errorMessage\\\"></small>\\r\\n<span class=\\\"form-text\\\" aria-hidden=\\\"true\\\" [innerHTML]=\\\"errorMessage\\\" *ngIf=\\\"!showPasswordStrength && control.touched && control.invalid && errorMessage !== null\\\"></span>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/bootstrap/templates/form-input.html\n// module id = ./src/typescript/components/bootstrap/templates/form-input.html\n// module chunks = 1","import {\r\n    Component, Inject, NgZone, ViewChild, ContentChild, ChangeDetectorRef, TemplateRef, ViewContainerRef,\r\n    OnInit, AfterViewInit\r\n} from \"@angular/core\";\r\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\r\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\nimport * as bl from \"../../blueleet\";\r\nimport * as enums from \"../../enums/\";\r\nimport { UserService } from \"../../user.service\";\r\nimport { EventService, EventStatus, IEvent } from \"./event.service\";\r\nimport { IUser } from \"../../abstraction/IUser\";\r\nimport { LoginEventService, LoginEventType } from \"../../loginEvent.service\";\r\nimport { NavigationService } from \"../../navigation.service\";\r\nconst pace = require(\"pace-progress\");\r\n\r\n@Component({\r\n    selector: \"event-code\",\r\n    template: require(\"./templates/code.html\"),\r\n    providers: [EventService, NavigationService]\r\n})\r\nexport class EventCodeComponent extends TemplateBaseComponent implements OnInit, AfterViewInit {\r\n    @ViewChild(\"DefaultTemplate\") defaultTemplate: TemplateRef<any>;\r\n\r\n    // Modal templates\r\n    @ViewChild(\"CompanyRegisterModalTemplate\") companyRegisterModalTemplate: TemplateRef<any>;\r\n    @ViewChild(\"SuccessModalTemplate\") successModalTemplate: TemplateRef<any>;\r\n    @ViewChild(\"WrongCodeModalTemplate\") wrongCodeModalTemplate: TemplateRef<any>;\r\n\r\n    // Content templates\r\n    @ContentChild(TemplateRef) contentTemplate: TemplateRef<any>;\r\n\r\n    unlockCodeForm: FormGroup;\r\n    member: IUser = null;\r\n    modalRef: BsModalRef;\r\n    eventCode: string = \"\";\r\n    event: IEvent;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(NgZone) private ngZone: NgZone,\r\n        @Inject(FormBuilder) private formBuilder: FormBuilder,\r\n        @Inject(BsModalService) private modalService: BsModalService,\r\n        @Inject(bl.UmbracoAjaxService) private umbracoAjaxService: bl.UmbracoAjaxService,\r\n        @Inject(LoginEventService) protected loginEventService: LoginEventService,\r\n        @Inject(UserService) public userService: UserService,\r\n        @Inject(EventService) private eventService: EventService,\r\n        @Inject(NavigationService) private navigationService: NavigationService\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    openModal(template: TemplateRef<any>) {\r\n        const self = this;\r\n        self.modalRef = self.modalService.show(template, { class: \"modal-sm\" });\r\n    }\r\n\r\n    closeModal() {\r\n        const self = this;\r\n        if (self.modalRef) {\r\n            self.modalRef.hide();\r\n        }\r\n    }\r\n\r\n    performUnlockCode($event?: Event) {\r\n        if ($event !== null) {\r\n            $event.preventDefault();\r\n        }\r\n        const self = this;\r\n        this.ngZone.run(() => {\r\n            self.userService.hasAccess(true).then(hasAccess => {\r\n                if (hasAccess === false) {\r\n                    // Not logged in!\r\n                    self.loginEventService.emit(LoginEventType.ShowLoginView);\r\n                } else {\r\n                    pace.stop();\r\n                    pace.bar.render();\r\n                    self.eventService.unlockEvent(self.unlockCodeForm.value.eventcode).then(value => {\r\n                        switch (value.status) {\r\n                            case EventStatus.Unlocked:\r\n                                self.event = value.event;\r\n                                //self.closeModal();\r\n                                //self.openModal(self.successModalTemplate);\r\n                                self.navigationService.navigate(value.event.url);\r\n                                break;\r\n                            case EventStatus.WrongEventCode:\r\n                                self.closeModal();\r\n                                self.openModal(self.wrongCodeModalTemplate);\r\n                                break;\r\n                            case EventStatus.CompanyAlreadyExists:\r\n                                self.closeModal();\r\n                                self.openModal(self.companyRegisterModalTemplate);\r\n                            default:\r\n                        }\r\n\r\n                        pace.stop();\r\n                        pace.start();\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        const self = this;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const self = this;\r\n\r\n        self.unlockCodeForm = this.formBuilder.group({\r\n            eventcode: [\"\", Validators.required]\r\n        });\r\n\r\n        self.loginEventService.on(LoginEventType.Success).subscribe((): void => {\r\n            if (self.unlockCodeForm.valid) {\r\n                self.performUnlockCode(null);\r\n            }\r\n        });\r\n\r\n        self.viewState$ = enums.DefaultViewState.DefaultTemplate;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/components/event/code.component.ts","import {\r\n    Component, Inject, NgZone, Input, ViewChild, ContentChild, ChangeDetectorRef, TemplateRef, ViewContainerRef,\r\n    OnInit, AfterViewInit, ChangeDetectionStrategy\r\n} from \"@angular/core\";\r\n\r\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\nimport * as bl from \"../../blueleet\";\r\nimport * as enums from \"../../enums/\";\r\nimport { UserService } from \"../../user.service\";\r\nimport { EventService, IEventState, EventStatus, IEvent } from \"./event.service\";\r\nimport {IUser} from \"../../abstraction/IUser\";\r\n\r\n@Component({\r\n    selector: \"event\",\r\n    template: require(\"./templates/event.html\"),\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [EventService]\r\n})\r\nexport class EventComponent extends TemplateBaseComponent implements OnInit, AfterViewInit {\r\n    @ViewChild(\"DefaultTemplate\") defaultTemplate: TemplateRef<any>;\r\n    \r\n    // Modal templates\r\n    @ViewChild(\"RegisterModalTemplate\") registerModalTemplate: TemplateRef<any>;\r\n    @ViewChild(\"RegisteredModalTemplate\") registeredModalTemplate: TemplateRef<any>;\r\n    @ViewChild(\"CompanyRegisterModalTemplate\") companyRegisterModalTemplate: TemplateRef<any>;\r\n    @ViewChild(\"RegisterReserveModalTemplate\") registerReserveModalTemplate: TemplateRef<any>;\r\n    @ViewChild(\"RegisteredReserveModalTemplate\") registeredReserveModalTemplate: TemplateRef<any>;\r\n    @ViewChild(\"UnregisterModalTemplate\") unregisterModalTemplate: TemplateRef<any>;\r\n    @ViewChild(\"UnregisteredModalTemplate\") unregisteredModalTemplate: TemplateRef<any>;\r\n\r\n    // Content templates\r\n    @ContentChild(TemplateRef) contentTemplate: TemplateRef<any>;\r\n    \r\n    @Input() updateInterval: number = 5000;\r\n    @Input() eventId: number;\r\n    @Input() memberId: number;\r\n    @Input() btnRegisterText: string;\r\n    @Input() btnRegisterReserveText: string;\r\n    @Input() btnUnregisterText: string;\r\n    @Input() btnUnregisterClosedText: string;\r\n    @Input() btnEventClosedText: string;\r\n    @Input() registeredText: string;\r\n    @Input() unregisteredText: string;\r\n\r\n    activeButtonTemplate: TemplateRef<any>;\r\n    eventPage: IEvent = null;\r\n    member: IUser = null;\r\n    modalRef: BsModalRef;\r\n    state: IEventState;\r\n    isFull: boolean = false;\r\n    buttonText: string = null;\r\n    isUpdating: boolean = false;\r\n    alerts: any = [];\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(NgZone) private ngZone: NgZone,\r\n        @Inject(BsModalService) private modalService: BsModalService,\r\n        @Inject(bl.UmbracoAjaxService) private umbracoAjaxService: bl.UmbracoAjaxService,\r\n        @Inject(UserService) public userService: UserService,\r\n        @Inject(EventService) private eventService: EventService\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    openModal(template: TemplateRef<any>) {\r\n        const self = this;\r\n        self.modalRef = self.modalService.show(template, { class: \"modal-sm\" });\r\n    }\r\n\r\n    closeModal() {\r\n        const self = this;\r\n        self.modalRef.hide();\r\n    }\r\n\r\n    performRegister() {\r\n        const self = this;\r\n        self.eventService.register(self.eventId, self.memberId).then(value => {\r\n            switch (value) {\r\n                case EventStatus.Registered:\r\n                    self.closeModal();\r\n                    self.openModal(self.registeredModalTemplate);\r\n                    break;\r\n                case EventStatus.CompanyAlreadyExists:\r\n                    self.closeModal();\r\n                    self.openModal(self.registeredModalTemplate);\r\n                    break;\r\n                default:\r\n            }\r\n        });\r\n    }\r\n\r\n    performUnregister() {\r\n        const self = this;\r\n        self.eventService.unregister(self.eventId, self.memberId).then(value => {\r\n            switch (value) {\r\n                case EventStatus.Unregistered:\r\n                    self.closeModal();\r\n                    self.openModal(self.unregisteredModalTemplate);\r\n                    self.updateState();\r\n                    break;\r\n                default:\r\n            }\r\n        });\r\n    }\r\n    \r\n    ngAfterViewInit(): void {\r\n        const self = this;\r\n\r\n        self.eventService.stateChange.subscribe((value: IEventState) => {\r\n            if (value == null) {\r\n                self.state = null;\r\n                return;\r\n            }\r\n\r\n            self.state = value;\r\n            //self.isFull = 1 % self.state.openSpots === 0 || self.state.openSpots === 0;\r\n            \r\n            if (value.closed) {\r\n                self.buttonText = self.btnEventClosedText;\r\n            } else if (self.isFull && value.isParticipating === false) {\r\n                // Reserv anmälan\r\n                self.buttonText = self.btnRegisterReserveText;\r\n                self.activeButtonTemplate = self.registerReserveModalTemplate;\r\n            } else if (value.isParticipating && value.canUnregister === false) {\r\n                self.buttonText = self.btnUnregisterClosedText;\r\n            } else if (value.isParticipating) {\r\n                self.buttonText = self.btnUnregisterText;\r\n                self.activeButtonTemplate = self.unregisterModalTemplate;\r\n            } else {\r\n                self.buttonText = self.btnRegisterText;\r\n                self.activeButtonTemplate = self.registerModalTemplate;\r\n            }\r\n\r\n            self.changeDetectorRef.markForCheck();\r\n        });\r\n\r\n        setInterval(() => {\r\n            self.updateState();\r\n        }, self.updateInterval);\r\n    }\r\n\r\n    updateState() {\r\n        const self = this;\r\n        if (self.isUpdating) {\r\n            return;\r\n        }\r\n\r\n        self.isUpdating = true;\r\n        self.eventService.updateState(self.eventId, self.memberId).then(() => {\r\n            self.isUpdating = false;\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const self = this;\r\n        System.import(\"./event.scss\");\r\n\r\n        self.eventService.getEvent(self.eventId).then((value: IEvent) => {\r\n            self.eventPage = value;\r\n        });\r\n\r\n        self.userService.getMember().then(value => {\r\n            self.member = value;\r\n        });\r\n\r\n        self.viewState$ = enums.DefaultViewState.DefaultTemplate;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/components/event/event.component.ts","import { Injectable, Inject } from \"@angular/core\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport * as bl from \"../../blueleet\";\r\nconst _ = require(\"lodash\");\r\n\r\n@Injectable()\r\nexport class EventService {\r\n    public stateChange: Rx.BehaviorSubject<IEventState> = new Rx.BehaviorSubject(null);\r\n    public statusUpdate: Rx.BehaviorSubject<EventStatus> = new Rx.BehaviorSubject(null);\r\n\r\n    constructor( @Inject(bl.UmbracoAjaxService) private umbracoAjaxService: bl.UmbracoAjaxService) { }\r\n\r\n    public updateState(eventId: number, memberId?: number): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            return this.umbracoAjaxService.post(\"Event\", \"BuildStatePost\", { eventId: eventId, memberId: memberId })\r\n                .catch((value) => {\r\n                    reject(value);\r\n                    this.stateChange.error(value);\r\n                })\r\n                .then((value: IEventState) => {\r\n                    if (_.isEqual(value, this.stateChange.value)) {\r\n                        console.log(\"updateState => No changes.\");\r\n                        // No changes\r\n                        resolve();\r\n                        return;\r\n                    }\r\n\r\n                    resolve(value);\r\n                    this.stateChange.next(value);\r\n                });\r\n        });\r\n    }\r\n\r\n    public getEvent(eventId: number): Promise<IEvent> {\r\n        return this.umbracoAjaxService.post(\"Event\", \"GetEventPost\", { eventId: eventId });\r\n    }\r\n\r\n    public getMyEvents(): Promise<{ activeEvents: IEvent[], oldEvents: IEvent[] }> {\r\n        return new Promise((resolve, reject) => {\r\n            return this.umbracoAjaxService.post(\"Event\", \"GetMyEventsPost\")\r\n                .catch((value) => {\r\n                    reject(value);\r\n                })\r\n                .then((value: { activeEvents: IEvent[], oldEvents: IEvent[] }) => {\r\n                    if (_.isEmpty(value)) {\r\n                        resolve([]);\r\n                        return;\r\n                    }\r\n\r\n                    resolve(value);\r\n                });\r\n        });\r\n    }\r\n\r\n    public register(eventId: number, memberId: number): Promise<EventStatus> {\r\n        const args = { eventId: eventId, memberId: memberId };\r\n        return this.umbracoAjaxService.post(\"Event\", \"RegisterPost\", args)\r\n            .then(value => {\r\n                this.statusUpdate.next(value);\r\n\r\n                return value;\r\n            });\r\n    }\r\n\r\n    public unregister(eventId: number, memberId: number): Promise<EventStatus> {\r\n        const args = { eventId: eventId, memberId: memberId };\r\n        return this.umbracoAjaxService.post(\"Event\", \"UnregisterPost\", args)\r\n            .then(value => {\r\n                this.statusUpdate.next(value);\r\n\r\n                return value;\r\n            });\r\n    }\r\n\r\n    public unlockEvent(eventCode: string): Promise<IUnlockEventResult> {\r\n        const args = { eventCode: eventCode };\r\n        return this.umbracoAjaxService.post(\"Event\", \"UnlockEventPost\", args)\r\n            .then(value => {\r\n                this.statusUpdate.next(value);\r\n\r\n                return value;\r\n            });\r\n    }\r\n}\r\n\r\nexport interface IUnlockEventResult {\r\n    status: EventStatus;\r\n    event?: IEvent;\r\n}\r\n\r\nexport interface IEvent {\r\n    id: number;\r\n    name: string;\r\n    startDate: string;\r\n    endDate: string;\r\n    url: string;\r\n}\r\n\r\nexport enum EventStatus {\r\n    Unknown,\r\n    Registered,\r\n    Unregistered,\r\n    Full,\r\n    CompanyAlreadyExists,\r\n    Unlocked,\r\n    WrongEventCode\r\n}\r\n\r\nexport interface IEventState {\r\n    //openSpots: number;\r\n    //totalSpots: number;\r\n    canUnregister: boolean;\r\n    closed: boolean;\r\n    isParticipating: boolean;\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/components/event/event.service.ts","module.exports = \"<template [ngTemplateOutlet]=\\\"this.currentTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\">\\r\\n</template>\\r\\n<template #DefaultTemplate>\\r\\n    <div *ngIf=\\\"alerts?.length > 0\\\" class=\\\"row\\\">\\r\\n        <div class=\\\"col-xs-12\\\" *ngFor=\\\"let alert of this?.alerts\\\">\\r\\n            <alert [type]=\\\"alert.type\\\" dismissOnTimeout=\\\"5000\\\" [dismissible]=\\\"true\\\"><span [innerHtml]=\\\"alert.msg\\\"></span></alert>\\r\\n        </div>\\r\\n    </div>\\r\\n    <template [ngTemplateOutlet]=\\\"this?.contentTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\">\\r\\n    </template>\\r\\n    <form class=\\\"unlock-code-form\\\" [formGroup]=\\\"unlockCodeForm\\\" (ngSubmit)=\\\"performUnlockCode($event)\\\" role=\\\"form\\\" autocomplete=\\\"off\\\" ngNoForm>\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"event-code\\\">Eventkod</label>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control form-control-lg rounded-0\\\" name=\\\"event-code\\\" id=\\\"event-code\\\" formControlName=\\\"eventcode\\\">\\r\\n        </div>\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-success btn-lg float-right\\\" [disabled]=\\\"!unlockCodeForm.valid\\\">Lås upp</button>\\r\\n    </form>\\r\\n    <ng-template #SuccessModalTemplate>\\r\\n        <div class=\\\"modal-body\\\">\\r\\n            <div class=\\\"container-fluid\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-4\\\">\\r\\n                        <i class=\\\"fa fa-check-circle-o fa-4x\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-8\\\">\\r\\n                        <p>Eventet <a [href]=\\\"this?.event.url\\\">{{this?.event.name}}</a> är upplåst!</p>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </ng-template>\\r\\n    <ng-template #WrongCodeModalTemplate>\\r\\n        <div class=\\\"modal-body\\\">\\r\\n            <div class=\\\"container-fluid\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-4\\\">\\r\\n                        <i class=\\\"fa fa-times-circle-o fa-4x\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-8\\\">\\r\\n                        <p>Fel eventkod!</p>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </ng-template>\\r\\n    <ng-template #CompanyRegisterModalTemplate>\\r\\n        <div class=\\\"modal-body\\\">\\r\\n            <div class=\\\"container-fluid\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-4\\\">\\r\\n                        <i class=\\\"fa fa-times-circle-o fa-4x\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-8\\\">\\r\\n                        <p>Det finns redan en person registerad på eventet för {{ member.company }}</p>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </ng-template>\\r\\n</template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/event/templates/code.html\n// module id = ./src/typescript/components/event/templates/code.html\n// module chunks = 1","module.exports = \"<template [ngTemplateOutlet]=\\\"this.currentTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\">\\r\\n</template>\\r\\n<template #DefaultTemplate>\\r\\n    <div *ngIf=\\\"alerts?.length > 0\\\" class=\\\"row\\\">\\r\\n        <div class=\\\"col-xs-12\\\" *ngFor=\\\"let alert of this?.alerts\\\">\\r\\n            <alert [type]=\\\"alert.type\\\" dismissOnTimeout=\\\"5000\\\" [dismissible]=\\\"true\\\"><span [innerHtml]=\\\"alert.msg\\\"></span></alert>\\r\\n        </div>\\r\\n    </div>\\r\\n    <template [ngTemplateOutlet]=\\\"this?.contentTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\">\\r\\n    </template>\\r\\n    <button class=\\\"btn btn-primary d-block mx-auto\\\" *ngIf=\\\"this.state && this?.buttonText\\\" [disabled]=\\\"!this.activeButtonTemplate\\\" (click)=\\\"openModal(activeButtonTemplate)\\\">{{ buttonText }}</button>\\r\\n    <ng-template #RegisterModalTemplate>\\r\\n        <div class=\\\"modal-header\\\">\\r\\n            <h5 class=\\\"modal-title\\\">Jag anmäler mig till {{ eventPage.eventName }} eventet!</h5>\\r\\n            <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\">\\r\\n                <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n            </button>\\r\\n        </div>\\r\\n        <div class=\\\"modal-body text-center\\\">\\r\\n            <p>{{ member?.name }}</p>\\r\\n            <p>{{ member?.company }}</p>\\r\\n            <p>{{ member?.email }}</p>\\r\\n            <p>{{ member?.phone }}</p>\\r\\n        </div>\\r\\n        <div class=\\\"modal-footer\\\">\\r\\n            <button class=\\\"btn btn-primary d-block mx-auto\\\" (click)=\\\"performRegister()\\\">Bekräftar Anmälan</button>\\r\\n        </div>\\r\\n    </ng-template>\\r\\n    <ng-template #RegisteredModalTemplate>\\r\\n        <div class=\\\"modal-body\\\">\\r\\n            <div class=\\\"container-fluid\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-4\\\">\\r\\n                        <i class=\\\"fa fa-check-circle-o fa-4x\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-8\\\">\\r\\n                        <p>Du är anmäld!</p>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </ng-template>\\r\\n    <ng-template #CompanyRegisterModalTemplate>\\r\\n        <div class=\\\"modal-body\\\">\\r\\n            <div class=\\\"container-fluid\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-4\\\">\\r\\n                        <i class=\\\"fa fa-times-circle-o fa-4x\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-8\\\">\\r\\n                        <p>Det finns redan en person registerad på eventet för {{ member.company }}</p>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </ng-template>\\r\\n    \\r\\n    <ng-template #UnregisterModalTemplate>\\r\\n        <div class=\\\"modal-header\\\">\\r\\n            <h5 class=\\\"modal-title\\\">Jag avanmäler mig till {{ eventPage.eventName }} eventet!</h5>\\r\\n            <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\">\\r\\n                <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n            </button>\\r\\n        </div>\\r\\n        <div class=\\\"modal-body text-center\\\">\\r\\n            <p>{{ member?.name }}</p>\\r\\n            <p>{{ member?.company }}</p>\\r\\n            <p>{{ member?.email }}</p>\\r\\n            <p>{{ member?.phone }}</p>\\r\\n        </div>\\r\\n        <div class=\\\"modal-footer\\\">\\r\\n            <button class=\\\"btn btn-primary d-block mx-auto\\\" (click)=\\\"performUnregister()\\\">Bekräftar Avanmälan</button>\\r\\n        </div>\\r\\n    </ng-template>\\r\\n    <ng-template #UnregisteredModalTemplate>\\r\\n        <div class=\\\"modal-body\\\">\\r\\n            <div class=\\\"container-fluid\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-4\\\">\\r\\n                        <i class=\\\"fa fa-check-circle-o fa-4x\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-8\\\">\\r\\n                        <p>Du är avanmäld!</p>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </ng-template>\\r\\n</template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/event/templates/event.html\n// module id = ./src/typescript/components/event/templates/event.html\n// module chunks = 1","import { Component, Inject, NgZone, TemplateRef, ContentChild, ChangeDetectorRef, ViewContainerRef, OnInit, AfterContentInit } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormBuilder } from \"@angular/forms\";\r\nimport { IMemberPayload } from \"../../abstraction/IMemberPayload\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\nimport * as bl from \"../../blueleet\";\r\nimport { LoginEventService, LoginEventType } from \"../../loginEvent.service\";\r\nimport { ValidationService } from \"../../validation.service\";\r\nimport * as enums from \"../../enums/\";\r\n\r\nexport enum ForgotPasswordViewState {\r\n    None,\r\n    DefaultTemplate,\r\n    NewPasswordTemplate,\r\n    MailSent\r\n}\r\n\r\n@Component({\r\n    selector: \"forgot-password\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"this.currentTemplate\" [ngOutletContext]=\"{ $implicit: this }\"></ng-template>`\r\n})\r\nexport class ForgotPasswordComponent extends TemplateBaseComponent implements OnInit, AfterContentInit {\r\n    @ContentChild(\"NewPassword\") newPasswordTemplate: TemplateRef<any>;\r\n    @ContentChild(\"MailSent\") mailSentTemplate: TemplateRef<any>;\r\n    forgotPasswordForm: FormGroup;\r\n    payload: IMemberPayload;\r\n    token: string;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(FormBuilder) private formBuilder: FormBuilder,\r\n        @Inject(NgZone) private ngZone: NgZone,\r\n        @Inject(bl.UmbracoAjaxService) private umbracoAjaxService: bl.UmbracoAjaxService,\r\n        @Inject(LoginEventService) private loginEventService: LoginEventService\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    get viewState(): ForgotPasswordViewState {\r\n        return this.viewState$;\r\n    }\r\n\r\n    set viewState(value: ForgotPasswordViewState) {\r\n        this.viewState$ = value;\r\n        this.updateTemplate();\r\n    }\r\n\r\n    getTemplate(): TemplateRef<any> {\r\n        let template = null;\r\n\r\n        switch (this.viewState) {\r\n            case ForgotPasswordViewState.DefaultTemplate:\r\n                template = this.defaultTemplate;\r\n                break;\r\n            case ForgotPasswordViewState.NewPasswordTemplate:\r\n                template = this.newPasswordTemplate;\r\n                break;\r\n            case ForgotPasswordViewState.MailSent:\r\n                template = this.mailSentTemplate;\r\n                break;\r\n        }\r\n\r\n        return template;\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (!Object.isNullOrUndefined(this.payload) && this.payload.messageType === enums.GenericMessages.Danger) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    doSubmit($event: Event) {\r\n        $event.preventDefault();\r\n\r\n        this.ngZone.run(() => {\r\n            this.umbracoAjaxService.post(\"MemberSurface\", \"ForgotPasswordPost\", this.forgotPasswordForm.value)\r\n                .catch((error: any) => {\r\n                    this.payload = error;\r\n                    if (error.messageType === enums.GenericMessages.Danger && error.status === (enums.MemberStatus.AuthorizationFailure || enums.MemberStatus.FacebookIntegrated)) {\r\n                        this.loginEventService.emit(LoginEventType.SignInError, error);\r\n                    } else {\r\n                        this.loginEventService.emit(LoginEventType.GenericError, error);\r\n                    }\r\n                })\r\n                .then((value: IMemberPayload) => {\r\n                    if (value) {\r\n                        this.payload = value;\r\n                        if (value.messageType === enums.GenericMessages.Success) {\r\n                            this.viewState = ForgotPasswordViewState.MailSent;\r\n                        }\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    doSubmitNewPassword($event: Event) {\r\n        $event.preventDefault();\r\n\r\n        this.ngZone.run(() => {\r\n            this.umbracoAjaxService.post(\"MemberSurface\", \"NewPasswordPost\", this.forgotPasswordForm.value)\r\n                .catch((error: any) => {\r\n                    this.payload = error;\r\n                    if (error.messageType === enums.GenericMessages.Danger && error.status === (enums.MemberStatus.AuthorizationFailure || enums.MemberStatus.FacebookIntegrated)) {\r\n                        this.loginEventService.emit(LoginEventType.SignInError, error);\r\n                    } else if (error.messageType === enums.GenericMessages.Danger && error.status === enums.MemberStatus.LoginExpired) {\r\n                        this.viewState = ForgotPasswordViewState.DefaultTemplate;\r\n                        this.forgotPasswordForm = this.formBuilder.group({\r\n                            email: [\"\", Validators.compose([Validators.required, ValidationService.email])]\r\n                        });\r\n                        if (history) {\r\n                            // Remove the query string.\r\n                            history.pushState(null, \"\", location.href.split(\"?\")[0]);\r\n                        }\r\n                    } else {\r\n                        this.loginEventService.emit(LoginEventType.GenericError, error);\r\n                    }\r\n                })\r\n                .then((value: IMemberPayload) => {\r\n                    if (value) {\r\n                        this.payload = value;\r\n                        if (value.messageType === enums.GenericMessages.Success) {\r\n                            this.loginEventService.emit(LoginEventType.ShowLoginView, value);\r\n                        }\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.token = Object.getQueryStringValue(\"token\");\r\n        if (Object.isNullOrUndefined(this.token)) {\r\n            this.viewState = ForgotPasswordViewState.DefaultTemplate;\r\n        } else {\r\n            this.viewState = ForgotPasswordViewState.NewPasswordTemplate;\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.token = Object.getQueryStringValue(\"token\");\r\n        if (Object.isNullOrUndefined(this.token)) {\r\n            this.forgotPasswordForm = this.formBuilder.group({\r\n                email: [\"\", Validators.compose([Validators.required, ValidationService.email])]\r\n            });\r\n        } else {\r\n            // Switch the view to forgot password\r\n            this.loginEventService.emit(LoginEventType.ShowForgotPasswordView);\r\n            let password = this.formBuilder.control(\"\", ValidationService.passwordValidator(8));\r\n            let confirmPassword = this.formBuilder.control(\"\", ValidationService.equalTo(password, \"Password\", \"Confirm Password\"));\r\n            this.forgotPasswordForm = this.formBuilder.group({\r\n                password: password,\r\n                confirmPassword: confirmPassword\r\n            });\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/components/forgot-password/forgot-password.component.ts","import { Component, Inject, NgZone, ViewContainerRef, ChangeDetectorRef, Renderer, OnInit } from \"@angular/core\";\r\nimport { LoginEventService, LoginEventType } from \"../../loginEvent.service\";\r\nimport { IMemberPayload } from \"../../abstraction/IMemberPayload\";\r\nimport * as enums from \"../../enums/\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\n\r\n@Component({\r\n    selector: \"login-signup-complete\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"this.currentTemplate\" [ngOutletContext]=\"{ $implicit: this }\"></ng-template>`,\r\n    styles: [require(\"./login-signup.scss\").toString()]\r\n})\r\nexport class LoginSignupCompleteComponent extends TemplateBaseComponent implements OnInit {\r\n    viewState$: enums.DefaultViewState = enums.DefaultViewState.None;\r\n    model: IMemberPayload;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(NgZone) protected ngZone: NgZone,\r\n        @Inject(Renderer) protected renderer: Renderer,\r\n        @Inject(LoginEventService) protected loginEventService: LoginEventService) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    isNeedApproval(): boolean {\r\n        if (Object.isNullOrUndefined(this.model)) {\r\n            return false;\r\n        }\r\n\r\n        return this.model.status === enums.MemberStatus.NeedApproval;\r\n    }\r\n\r\n    isEmailAuthorisationNeeded(): boolean {\r\n        if (Object.isNullOrUndefined(this.model)) {\r\n            return false;\r\n        }\r\n\r\n        return this.model.status === enums.MemberStatus.EmailAuthorisationNeeded;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.loginEventService.on(LoginEventType.Success).subscribe(value => {\r\n            this.ngZone.run(() => {\r\n                this.model = value;\r\n                this.viewState = enums.DefaultViewState.DefaultTemplate;\r\n            });\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/components/login-signup/login-signup-complete.component.ts","import { Component, Inject, NgZone, QueryList, ContentChildren, ContentChild, TemplateRef, ViewContainerRef, Renderer, OnInit, AfterContentInit } from \"@angular/core\";\r\nimport { LoginEventService, LoginEventType } from \"../../loginEvent.service\";\r\nimport { BootstrapFormInputComponent } from \"../bootstrap/form-input.component\";\r\nimport { UserService } from \"../../user.service\";\r\nimport { IMemberPayload as MemberPayload } from \"../../abstraction/IMemberPayload\";\r\nimport { GenericMessages } from \"../../enums/generic-messages-enum\";\r\nimport { MemberStatus } from \"../../enums/member-status-enum\";\r\nimport * as bl from \"../../blueleet\";\r\n\r\nexport enum LoginSignupViewState {\r\n    None,\r\n    LoginTemplate,\r\n    SignupTemplate,\r\n    ForgotPasswordTemplate,\r\n    EventCodeTemplate\r\n}\r\n\r\n@Component({\r\n    selector: \"login-signup\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"this.currentTemplate\" [ngOutletContext]=\"{ $implicit: this }\"></ng-template>`,\r\n    styles: [require(\"./login-signup.scss\").toString()]\r\n})\r\nexport class LoginSignupComponent implements OnInit, AfterContentInit {\r\n    @ContentChild(\"Login\") loginTemplate: TemplateRef<any>;\r\n    @ContentChild(\"Signup\") signupTemplate: TemplateRef<any>;\r\n    @ContentChild(\"ForgotPassword\") forgotPasswordTemplate: TemplateRef<any>;\r\n    @ContentChild(\"EventCode\") eventCodeTemplate: TemplateRef<any>;\r\n    @ContentChildren(BootstrapFormInputComponent, { descendants: true }) vc: QueryList<BootstrapFormInputComponent>;\r\n    viewState$: LoginSignupViewState = LoginSignupViewState.LoginTemplate;\r\n\r\n    get viewState() {\r\n        return this.viewState$;\r\n    }\r\n\r\n    set viewState(value: LoginSignupViewState) {\r\n        this.viewState$ = value;\r\n        this.currentTemplate = this.getTemplate();\r\n    }\r\n\r\n    currentTemplate: TemplateRef<any>;\r\n\r\n    constructor(\r\n        @Inject(NgZone) protected ngZone: NgZone,\r\n        @Inject(ViewContainerRef) protected viewContainerRef: ViewContainerRef,\r\n        @Inject(Renderer) protected renderer: Renderer,\r\n        @Inject(LoginEventService) protected loginEventService: LoginEventService,\r\n        @Inject(UserService) protected userService: UserService,\r\n        @Inject(bl.UmbracoAjaxService) private umbracoAjaxService: bl.UmbracoAjaxService) {\r\n    }\r\n\r\n    getTemplate(): TemplateRef<any> {\r\n        switch (this.viewState) {\r\n            case LoginSignupViewState.LoginTemplate:\r\n                return this.loginTemplate;\r\n            case LoginSignupViewState.SignupTemplate:\r\n                return this.signupTemplate;\r\n            case LoginSignupViewState.ForgotPasswordTemplate:\r\n                return this.forgotPasswordTemplate;\r\n            case LoginSignupViewState.EventCodeTemplate:\r\n                return this.eventCodeTemplate;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    showLogin($event: Event): void {\r\n        $event.preventDefault();\r\n        this.ngZone.run(() => {\r\n            this.viewState = LoginSignupViewState.LoginTemplate;\r\n            console.log(this.vc);\r\n        });\r\n    }\r\n\r\n    showSignup($event: Event): void {\r\n        $event.preventDefault();\r\n        this.ngZone.run(() => {\r\n            this.viewState = LoginSignupViewState.SignupTemplate;\r\n            console.log(this.vc);\r\n        });\r\n    }\r\n\r\n    showForgotPassword($event: Event): void {\r\n        $event.preventDefault();\r\n        this.ngZone.run(() => {\r\n            this.viewState = LoginSignupViewState.ForgotPasswordTemplate;\r\n        });\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.userService.getMember().catch((reason: MemberPayload) => {\r\n            if (reason.status === MemberStatus.LoginExpired) {\r\n                this.currentTemplate = this.getTemplate();\r\n                this.vc.changes.subscribe((value: BootstrapFormInputComponent) => {\r\n                });\r\n            }\r\n        }).then((value: MemberPayload) => {\r\n            if (value && value.messageType === GenericMessages.Success) {\r\n                window.location.href = \"/\";\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const forgotPassToken = Object.getQueryStringValue(\"token\");\r\n        if (!Object.isNullOrUndefined(forgotPassToken)) {\r\n            this.viewState = LoginSignupViewState.ForgotPasswordTemplate;\r\n        }\r\n\r\n        const eventCode = Object.getQueryStringValue(\"code\");\r\n        if (!Object.isNullOrUndefined(eventCode) || window.location.pathname === \"/kod\") {\r\n            this.viewState = LoginSignupViewState.EventCodeTemplate;\r\n        }\r\n\r\n        this.loginEventService.on(LoginEventType.None).subscribe((): void => {\r\n            this.viewState = LoginSignupViewState.None;\r\n        });\r\n        this.loginEventService.on(LoginEventType.Success).subscribe((): void => {\r\n            // ToDo: change this!\r\n            if (window.location.pathname === \"/kod\") {\r\n                this.viewState = LoginSignupViewState.EventCodeTemplate;\r\n            } else {\r\n                this.viewState = LoginSignupViewState.None;\r\n            }\r\n        });\r\n        this.loginEventService.on(LoginEventType.ShowLoginView).subscribe((): void => {\r\n            this.viewState = LoginSignupViewState.LoginTemplate;\r\n        });\r\n        this.loginEventService.on(LoginEventType.ShowSignupView).subscribe((): void => {\r\n            this.viewState = LoginSignupViewState.SignupTemplate;\r\n        });\r\n        this.loginEventService.on(LoginEventType.ShowForgotPasswordView).subscribe((): void => {\r\n            this.viewState = LoginSignupViewState.ForgotPasswordTemplate;\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/components/login-signup/login-signup.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./login-signup.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./login-signup.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./login-signup.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/login-signup/login-signup.scss\n// module id = ./src/typescript/components/login-signup/login-signup.scss\n// module chunks = 1","import { Component, Inject, NgZone, ViewContainerRef, ChangeDetectorRef, Renderer, OnInit } from \"@angular/core\";\r\nimport { IMemberPayload } from \"../../abstraction/IMemberPayload\";\r\nimport * as enums from \"../../enums/\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\nimport * as bl from \"../../blueleet\";\r\n\r\n// @Protected\r\n@Component({\r\n    selector: \"auth-signout\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"this.currentTemplate\" [ngOutletContext]=\"{ $implicit: this }\"></ng-template>`,\r\n    styles: [require(\"./signout.scss\").toString()]\r\n})\r\nexport class SignoutComponent extends TemplateBaseComponent implements OnInit {\r\n    viewState$: enums.DefaultViewState = enums.DefaultViewState.DefaultTemplate;\r\n    model: IMemberPayload;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(NgZone) protected ngZone: NgZone,\r\n        @Inject(Renderer) protected renderer: Renderer,\r\n        @Inject(bl.UmbracoAjaxService) protected umbracoAjaxService: bl.UmbracoAjaxService) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    signout() {\r\n        this.ngZone.run(() => {\r\n            this.umbracoAjaxService.post(\"MemberSurface\", \"SignOutPost\").then((value: IMemberPayload) => {\r\n                window.location.href = value.loginUrl;\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.ngZone.run(() => {\r\n            this.umbracoAjaxService.post(\"MemberSurface\", \"GetMemberPost\").then(value => {\r\n                this.model = value;\r\n            }).catch((reason: IMemberPayload) => {\r\n                if (reason.status === enums.MemberStatus.LoginExpired) {\r\n                    this.viewState = enums.DefaultViewState.None;\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/components/login-signup/signout.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./signout.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./signout.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./signout.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/login-signup/signout.scss\n// module id = ./src/typescript/components/login-signup/signout.scss\n// module chunks = 1","import { ChangeDetectorRef, Component, Inject, ViewContainerRef, OnInit } from \"@angular/core\";\r\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\nimport { Protected } from \"../../decorators/Protected\";\r\nimport * as enums from \"../../enums\";\r\n\r\n@Protected\r\n@Component({\r\n    selector: \"search-box\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"this?.currentTemplate\" [ngOutletContext]=\"{ $implicit: this }\"></ng-template>`,\r\n    styles: [require(\"./search-box.scss\").toString()]\r\n})\r\nexport class SearchBoxComponent extends TemplateBaseComponent implements OnInit {\r\n    searchForm: FormGroup;\r\n\r\n    constructor(\r\n        // @Inject(bl.ConfigService) private configService: bl.ConfigService,\r\n        // @Inject(bl.UmbracoAjaxService) private umbracoAjaxService: bl.UmbracoAjaxService\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(FormBuilder) private formBuilder: FormBuilder\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    doSearch($event: Event) {\r\n        $event.preventDefault();\r\n        console.log(\"[SearchBoxComponent]:OnSubmit -> search()\", this.searchForm);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.viewState = enums.DefaultViewState.DefaultTemplate;\r\n\r\n        this.searchForm = this.formBuilder.group({\r\n            searchWord: [\"\", Validators.required]\r\n        });\r\n\r\n        this.searchForm.valueChanges.subscribe(value => {\r\n            // do something with value here\r\n            console.log(\"[SearchBoxComponent] new value:'\" + value.searchWord + \"'\", value);\r\n        });\r\n\r\n        // this.configService.ensureConfigs()\r\n        //    .then(configs => {});\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/components/search-box/search-box.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./search-box.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./search-box.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./search-box.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/search-box/search-box.scss\n// module id = ./src/typescript/components/search-box/search-box.scss\n// module chunks = 1","import { ChangeDetectorRef, Component, Inject, ViewChild, ContentChild, TemplateRef, ViewContainerRef, OnInit } from \"@angular/core\";\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\nimport * as enums from \"../../enums\";\r\nimport * as bl from \"../../blueleet/\";\r\nimport { ISearchResult } from \"../../blueleet/modules/search/search.service\";\r\nimport Uri = require(\"urijs\");\r\n\r\n@Component({\r\n    selector: \"search-result-empty\",\r\n    template: ``\r\n})\r\nexport class SearchEmptyComponent extends TemplateBaseComponent implements OnInit {\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    show(term: string) {\r\n        this.viewState = enums.DefaultViewState.DefaultTemplate;\r\n    }\r\n\r\n    hide() {\r\n        this.viewState = enums.DefaultViewState.None;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.viewState = enums.DefaultViewState.None;\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: \"search-wall\",\r\n    template: require(\"./templates/search-wall.html\"),\r\n    styles: [require(\"./search-wall.scss\").toString()]\r\n})\r\nexport class SearchWallComponent extends TemplateBaseComponent implements OnInit {\r\n    @ViewChild(\"DefaultTemplate\") defaultTemplate: TemplateRef<any>;\r\n    @ContentChild(SearchEmptyComponent) searchResultEmpty: SearchEmptyComponent;\r\n\r\n    searchWord: string;\r\n    searchForm: FormGroup;\r\n    searchResult: ISearchResult = null;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(FormBuilder) private formBuilder: FormBuilder,\r\n        @Inject(bl.ConfigService) private configService: bl.ConfigService,\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    onSearchUpdate(value: any) {\r\n        console.log(\"[SearchBoxComponent => onSearchUpdate] triggered with value:\", value);\r\n        this.searchResult = value;\r\n\r\n        if (this.searchResultEmpty) {\r\n            if (this.searchResult.results.length === 0) {\r\n                this.searchResultEmpty.show(this.searchWord);\r\n            } else {\r\n                this.searchResultEmpty.hide();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.viewState = enums.DefaultViewState.None;\r\n        this.configService.ensureConfigs().then(value => {\r\n            const searchQueryKey = value.searchQueryKey;\r\n            let searchTerm = \"\";\r\n\r\n            let url = new Uri(window.location.href);\r\n            if (url.hasQuery(searchQueryKey)) {\r\n                let query = url.search(true);\r\n                searchTerm = query[searchQueryKey];\r\n            }\r\n\r\n            this.searchForm = this.formBuilder.group({\r\n                searchWord: [searchTerm]\r\n            });\r\n\r\n            this.searchForm.valueChanges.debounceTime(500).subscribe((newValue: any) => {\r\n                // do something with value here\r\n                console.log(\"[SearchBoxComponent] new value:'\" + newValue.searchWord + \"'\", newValue);\r\n\r\n                if (newValue.searchWord.length < 2) {\r\n                    return;\r\n                }\r\n\r\n                url.setQuery(searchQueryKey, newValue.searchWord);\r\n                let newUrl = url.href();\r\n\r\n                // Update the query parameter\r\n                history.pushState(\"\", \"\", newUrl);\r\n\r\n                // Trigger a search change event by assigning a new value to searchWord.\r\n                this.searchWord = newValue.searchWord;\r\n            });\r\n\r\n            this.viewState = enums.DefaultViewState.DefaultTemplate;\r\n\r\n            if (searchTerm.length > 1) {\r\n                // Trigger search.\r\n                this.searchForm.get(\"searchWord\").patchValue(searchTerm);\r\n            }\r\n        });\r\n    }\r\n\r\n    isContent(type: enums.SearchType): boolean {\r\n        return type === enums.SearchType.Content;\r\n    }\r\n\r\n    isMedia(type: enums.SearchType): boolean {\r\n        return type === enums.SearchType.Media;\r\n    }\r\n\r\n    isFile(type: enums.SearchType): boolean {\r\n        return type === enums.SearchType.File;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/components/search-wall/search-wall.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./search-wall.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./search-wall.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./search-wall.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/search-wall/search-wall.scss\n// module id = ./src/typescript/components/search-wall/search-wall.scss\n// module chunks = 1","module.exports = \"<ng-template [ngTemplateOutlet]=\\\"this.currentTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\"></ng-template>\\r\\n<ng-template #DefaultTemplate>\\r\\n    <form [formGroup]=\\\"searchForm\\\" class=\\\"col-12 my-4\\\">\\r\\n        <bs-form-input formControlName=\\\"searchWord\\\" type=\\\"text\\\" name=\\\"searchWord\\\" placeholder=\\\"Sök\\\" [renderedInForm]=\\\"false\\\"></bs-form-input>\\r\\n    </form>\\r\\n    <bl-search [searchTerm]=\\\"this?.searchWord\\\" (onSearchUpdate)=\\\"this?.onSearchUpdate($event);\\\" class=\\\"col-12\\\">\\r\\n        <ng-template>\\r\\n            <div class=\\\"card-deck\\\" *ngIf=\\\"this?.searchResult\\\">\\r\\n                <div *ngFor=\\\"let result of this.searchResult?.results\\\" class=\\\"col-sm-12 my-sm-2 col-md-4\\\">\\r\\n                    <div class=\\\"module-card card-linked card\\\">\\r\\n                        <ng-template [ngIf]=\\\"isContent(result?.type)\\\">\\r\\n                            <a class=\\\"card-link\\\" [href]=\\\"result.url\\\"></a>\\r\\n                            <div class=\\\"card-block\\\">\\r\\n                                <i class=\\\"fa fa-circle pull-right\\\"></i>\\r\\n                                <h4 class=\\\"card-title\\\">{{ result.nodeName }}</h4>\\r\\n                                <p class=\\\"card-text\\\">{{ result.gridFrontPage | truncate: 100 }}</p>\\r\\n                            </div>\\r\\n                        </ng-template>\\r\\n                        <ng-template [ngIf]=\\\"isMedia(result?.type)\\\">\\r\\n                            <a class=\\\"card-link\\\" [href]=\\\"result.url\\\"></a>\\r\\n                            <img class=\\\"card-img-top\\\" src=\\\"\\\" [alt]=\\\"result.nodeName\\\">\\r\\n                            <div class=\\\"card-block\\\">\\r\\n                                <h4 class=\\\"card-title\\\">{{ result.nodeName }}</h4>\\r\\n                            </div>\\r\\n                        </ng-template>\\r\\n                        <ng-template [ngIf]=\\\"isFile(result?.type)\\\">\\r\\n                            <a class=\\\"card-link\\\" [href]=\\\"result.url\\\"></a>\\r\\n                            <div class=\\\"card-block\\\">\\r\\n                                <h4 class=\\\"card-title\\\">{{ result.nodeName }}</h4>\\r\\n                            </div>\\r\\n                        </ng-template>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <ng-template [ngTemplateOutlet]=\\\"this.searchResultEmpty?.currentTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\"></ng-template>\\r\\n            </div>\\r\\n        </ng-template>\\r\\n    </bl-search>\\r\\n</ng-template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/search-wall/templates/search-wall.html\n// module id = ./src/typescript/components/search-wall/templates/search-wall.html\n// module chunks = 1","import { Component, Inject, NgZone, Input, ContentChild, ChangeDetectorRef, ViewChild, ViewContainerRef, TemplateRef, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\r\nimport { Router } from '@angular/router';\r\nimport { MemberStatus } from \"../../enums\";\r\nimport { IMemberPayload } from \"../../abstraction/IMemberPayload\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\nimport * as bl from \"../../blueleet\";\r\nimport { LoginEventService, LoginEventType } from \"../../loginEvent.service\";\r\nimport { GenericMessages } from \"../../enums/generic-messages-enum\";\r\nimport { BootstrapAlertBoxComponent } from \"../bootstrap/alert-box/alert-box.component\";\r\nimport { AlertBoxOptions, AlertBoxEventType } from \"../../alert-box.service\";\r\nimport { NavigationService } from \"../../navigation.service\";\r\n\r\n@Component({\r\n    selector: \"simple-login\",\r\n    template: require(\"./templates/simple-login.html\"),\r\n    providers: [NavigationService]\r\n})\r\nexport class SimpleLoginComponent extends TemplateBaseComponent implements OnInit {\r\n    @ContentChild(BootstrapAlertBoxComponent) alertBoxComponent: BootstrapAlertBoxComponent;\r\n    @ViewChild(\"AlertEmailConfirmationNeeded\") alertEmailConfirmationNeededTemplate: TemplateRef<any>;\r\n    @Input(\"emailConfirmationText\") emailConfirmationText: string;\r\n    @Input(\"emailConfirmationButtonText\") emailConfirmationButtonText: string;\r\n    loginForm: FormGroup;\r\n    payload: IMemberPayload;\r\n    showForm: boolean = true;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(FormBuilder) private formBuilder: FormBuilder,\r\n        @Inject(NgZone) private ngZone: NgZone,\r\n        @Inject(Router) private router: Router,\r\n        @Inject(bl.UmbracoAjaxService) private umbracoAjaxService: bl.UmbracoAjaxService,\r\n        @Inject(LoginEventService) private loginEventService: LoginEventService,\r\n        @Inject(NavigationService) private navigationService: NavigationService\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (!Object.isNullOrUndefined(this.payload) && this.payload.messageType === GenericMessages.Danger) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    sendConfirmationMail($event: Event) {\r\n        $event.preventDefault();\r\n        this.ngZone.run(() => {\r\n            this.umbracoAjaxService.post(\"MemberSurface\", \"SendConfirmationMailPost\", { email: this.payload.user.email })\r\n                .catch((error: any) => {\r\n                    this.payload = error;\r\n\r\n                    // Show error alert box with message.\r\n                    let alertBoxOption = new AlertBoxOptions(AlertBoxEventType.Error, error.message);\r\n                    this.alertBoxComponent.show(alertBoxOption);\r\n\r\n                    if (error.messageType === GenericMessages.Danger && error.status === (MemberStatus.AuthorizationFailure || MemberStatus.FacebookIntegrated)) {\r\n                        this.loginEventService.emit(LoginEventType.SignInError, error);\r\n                    } else {\r\n                        this.loginEventService.emit(LoginEventType.GenericError, error);\r\n                    }\r\n                })\r\n                .then((value: IMemberPayload) => {\r\n                    if (value) {\r\n                        this.payload = value;\r\n                        if (value.messageType === GenericMessages.Success) {\r\n                            let alertBoxOption = new AlertBoxOptions(AlertBoxEventType.Success, value.message);\r\n                            this.alertBoxComponent.show(alertBoxOption);\r\n                        }\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    doLogin($event: Event) {\r\n        $event.preventDefault();\r\n        console.log(\"[SimpleLoginFormComponent]:OnSubmit -> doLogin()\", this.loginForm);\r\n        this.ngZone.run(() => {\r\n            this.umbracoAjaxService.post(\"MemberSurface\", \"SignInMemberPost\", this.loginForm.value)\r\n                .catch((error: any) => {\r\n                    this.payload = error;\r\n\r\n                    // Show error alert box with message.\r\n                    let alertBoxOption = new AlertBoxOptions(AlertBoxEventType.Error, error.message);\r\n                    this.alertBoxComponent.show(alertBoxOption);\r\n\r\n                    if (error.messageType === GenericMessages.Danger && error.status === (MemberStatus.AuthorizationFailure || MemberStatus.FacebookIntegrated)) {\r\n                        this.loginEventService.emit(LoginEventType.SignInError, error);\r\n                    } else {\r\n                        this.loginEventService.emit(LoginEventType.GenericError, error);\r\n                    }\r\n                })\r\n                .then((value: IMemberPayload) => {\r\n                    if (value) {\r\n                        this.payload = value;\r\n                        if (value.messageType === GenericMessages.Success) {\r\n                            if (value.status === MemberStatus.EmailAuthorisationNeeded) {\r\n                                this.showForm = false;\r\n                                let alertBoxOption = new AlertBoxOptions(AlertBoxEventType.Success, value.message);\r\n                                this.alertBoxComponent.show(alertBoxOption, this.alertEmailConfirmationNeededTemplate);\r\n                                return;\r\n                            }\r\n\r\n                            if (value.status === MemberStatus.AlreadyLoggedIn) {\r\n                                this.loginEventService.emit(LoginEventType.Success, value);\r\n                            } else if (value.status === MemberStatus.LoggedIn || value.status === MemberStatus.AdminLoggedIn) {\r\n                                this.loginEventService.emit(LoginEventType.Success, value);\r\n\r\n                                // ToDo: change this!\r\n                                if (window.location.pathname === \"/kod\") {\r\n                                    return;\r\n                                }\r\n                                \r\n                                if (value.redirectTo) {\r\n                                    this.navigationService.navigate(value.redirectTo);\r\n                                } else if (value.loginUrl.asUrl().pathname.indexOf(window.location.pathname) !== -1) {\r\n                                    this.navigationService.navigate(\"/\");\r\n                                } else {\r\n                                   this.navigationService.reload(); \r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const confirmEmailToken = Object.getQueryStringValue(\"confirmEmailToken\");\r\n        if (!Object.isNullOrUndefined(confirmEmailToken)) {\r\n        }\r\n\r\n        this.loginForm = this.formBuilder.group({\r\n            username: [\"\", Validators.required],\r\n            password: [\"\", Validators.required],\r\n            remember: [\"1\"]\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/components/simple-login/simple-login.component.ts","module.exports = \"<ng-template [ngTemplateOutlet]=\\\"this.currentTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\"></ng-template>\\r\\n<ng-template #AlertEmailConfirmationNeeded>\\r\\n   {{ this.emailConfirmationText }} <button type=\\\"button\\\" (click)=\\\"this.sendConfirmationMail($event)\\\"><i class=\\\"fa fa-envelope-o\\\" aria-hidden=\\\"true\\\"></i> {{ this.emailConfirmationButtonText }}</button>\\r\\n</ng-template>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/simple-login/templates/simple-login.html\n// module id = ./src/typescript/components/simple-login/templates/simple-login.html\n// module chunks = 1","import { Component, Inject, NgZone, ChangeDetectorRef, ViewContainerRef, OnInit } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormBuilder } from \"@angular/forms\";\r\nimport { MemberStatus } from \"../../enums\";\r\nimport { IMemberPayload } from \"../../abstraction/IMemberPayload\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\nimport * as bl from \"../../blueleet\";\r\nimport { LoginEventService, LoginEventType } from \"../../loginEvent.service\";\r\nimport { GenericMessages } from \"../../enums/generic-messages-enum\";\r\nimport { ValidationService } from \"../../validation.service\";\r\n\r\n@Component({\r\n    selector: \"simple-signup\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"this.currentTemplate\" [ngOutletContext]=\"{ $implicit: this }\"></ng-template>`\r\n})\r\nexport class SimpleSignUpComponent extends TemplateBaseComponent implements OnInit {\r\n    signUpForm: FormGroup;\r\n    payload: IMemberPayload;\r\n    signupSuccess: boolean = false;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(FormBuilder) private formBuilder: FormBuilder,\r\n        @Inject(NgZone) private ngZone: NgZone,\r\n        @Inject(bl.UmbracoAjaxService) private umbracoAjaxService: bl.UmbracoAjaxService,\r\n        @Inject(LoginEventService) private loginEventService: LoginEventService,\r\n        @Inject(ValidationService) private validationService: ValidationService\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (!Object.isNullOrUndefined(this.payload) && this.payload.messageType === GenericMessages.Danger) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    doSignUp($event: Event) {\r\n        $event.preventDefault();\r\n\r\n        this.ngZone.run(() => {\r\n            this.umbracoAjaxService.post(\"MemberSurface\", \"SignUpMemberPost\", this.signUpForm.value)\r\n                .catch((error: any) => {\r\n                    this.payload = error;\r\n                    if (error.messageType === GenericMessages.Danger && error.status === (MemberStatus.AuthorizationFailure || MemberStatus.FacebookIntegrated)) {\r\n                        this.loginEventService.emit(LoginEventType.SignInError, error);\r\n                    } else {\r\n                        this.loginEventService.emit(LoginEventType.GenericError, error);\r\n                    }\r\n                })\r\n                .then((value: IMemberPayload) => {\r\n                    console.log(\"SignUpMemberPost\", value);\r\n                    if (value) {\r\n                        this.payload = value;\r\n                        this.signupSuccess = true;\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        let password = this.formBuilder.control(\"\", ValidationService.passwordValidator(8));\r\n        let confirmPassword = this.formBuilder.control(\"\", ValidationService.equalTo(password, \"Password\", \"Confirm Password\"));\r\n        \r\n        this.signUpForm = this.formBuilder.group({\r\n            phone: [\"\", Validators.required],\r\n            company: [\"\", Validators.required],\r\n            email: [\"\", Validators.compose([Validators.required, ValidationService.email]), this.validationService.emailValidator(this.umbracoAjaxService).bind(this)],\r\n            firstName: [\"\", Validators.required],\r\n            lastName: [\"\", Validators.required],\r\n            passwordGroup: this.formBuilder.group({\r\n                password: password,\r\n                confirmPassword: confirmPassword\r\n            })\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/components/simple-signup/simple-signup.component.ts","module.exports = __webpack_public_path__ + \"./assets/components/widget-quickNavigator/quicknav-arrow.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/widget-quickNavigator/quicknav-arrow.png\n// module id = ./src/typescript/components/widget-quickNavigator/quicknav-arrow.png\n// module chunks = 1","module.exports = \"<ul class=\\\"widget-quickNavigator\\\" *ngIf=\\\"menu\\\">\\r\\n    <li class=\\\"quickNavigator-editLink\\\">\\r\\n        <a href=\\\"{{menu.editLinkUrl}}\\\" target=\\\"_self\\\"><span>Umbraco</span></a>\\r\\n    </li>\\r\\n    <li class=\\\"quickNavigator-dropdown\\\">\\r\\n        <a class=\\\"quickNavigator-dropdown-arrow\\\" (click)=\\\"toggle($event)\\\"></a>\\r\\n        <ul class=\\\"quickNavigator-menu\\\" [ngClass]=\\\"{'menu-open': isMenuOpen }\\\">\\r\\n            <li *ngFor=\\\"let value of menu?.items\\\">\\r\\n                <a href=\\\"{{ value.url }}\\\" target=\\\"{{ value.target }}\\\">{{ value.name }}</a>\\r\\n            </li>\\r\\n            <ng-content></ng-content>\\r\\n        </ul>\\r\\n    </li>\\r\\n</ul>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/widget-quickNavigator/templates/quicknavigator.html\n// module id = ./src/typescript/components/widget-quickNavigator/templates/quicknavigator.html\n// module chunks = 1","module.exports = __webpack_public_path__ + \"./assets/components/widget-quickNavigator/umbraco.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/widget-quickNavigator/umbraco.svg\n// module id = ./src/typescript/components/widget-quickNavigator/umbraco.svg\n// module chunks = 1","import { Component, NgZone, Inject, ElementRef, OnInit } from \"@angular/core\";\r\nimport { IQuickNavigatorMenu } from \"./abstraction/IQuickNavigatorMenu\";\r\nimport * as $ from \"jquery\";\r\nimport { UmbracoAjaxService } from \"../../blueleet/\";\r\nrequire(\"./quicknav-arrow.png\");\r\nrequire(\"./umbraco.svg\");\r\n\r\n@Component({\r\n    selector: \"widget-quick-navigator\",\r\n    template: require(\"./templates/quicknavigator.html\"),\r\n    styles: [require(\"./widget-quickNavigator.scss\").toString()]\r\n})\r\nexport class WidgetQuickNavigatorComponent implements OnInit {\r\n    isMenuOpen: boolean = false;\r\n    menu: IQuickNavigatorMenu = undefined;\r\n\r\n    constructor(\r\n        @Inject(UmbracoAjaxService) private umbracoAjaxService: UmbracoAjaxService,\r\n        @Inject(NgZone) private zone: NgZone,\r\n        @Inject(ElementRef) private elementRef: ElementRef) { }\r\n\r\n    toggle(event) {\r\n        event.preventDefault();\r\n        this.isMenuOpen = !this.isMenuOpen;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const promise = this.umbracoAjaxService.post(\"QuickNavigatorWidget\", \"GetLinkItemsPost\", null, { silentTry: true });\r\n        promise.then(value => {\r\n            if (value) {\r\n                this.zone.run(() => {\r\n                    this.menu = value;\r\n                    $(document).on(\"click\", ($event: Event) => {\r\n                        if (!$($event.target).closest(this.elementRef.nativeElement).length) {\r\n                            // Hide the component.\r\n                            this.isMenuOpen = false;\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/components/widget-quickNavigator/widget-quickNavigator.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./widget-quickNavigator.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./widget-quickNavigator.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./widget-quickNavigator.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/widget-quickNavigator/widget-quickNavigator.scss\n// module id = ./src/typescript/components/widget-quickNavigator/widget-quickNavigator.scss\n// module chunks = 1","import { NgZone } from \"@angular/core\";\r\nimport { TemplateBaseComponent } from \"../components/abstraction/TemplateBaseComponent\";\r\nimport { UserService } from \"../user.service\";\r\nconst _ = require(\"lodash\");\r\n\r\nexport function Protected<TFunction extends Function>(target: TFunction): TFunction {\r\n    if (target.prototype instanceof TemplateBaseComponent) {\r\n        let ngAfterContentInit = target.prototype.ngAfterContentInit;\r\n        let updateTemplate = target.prototype.updateTemplate;\r\n\r\n        Object.defineProperty(target.prototype,\r\n            \"updateTemplate\",\r\n            {\r\n                value: function () {\r\n                    const currentTemplateState = this.currentTemplate;\r\n                    const viewContainerRef = this.viewContainerRef;\r\n                    const zone: NgZone = viewContainerRef.injector.get(NgZone);\r\n                    const userService: UserService = viewContainerRef.injector.get(UserService);\r\n                    const args = arguments;\r\n\r\n                    userService.onHasAccess.subscribe(hasAccess => {\r\n                        zone.run(() => {\r\n                            this.currentTemplate = null;\r\n                            if (_.isBoolean(hasAccess) && hasAccess) {\r\n                                this.currentTemplate = currentTemplateState;\r\n                                return updateTemplate.apply(this, args);\r\n                            } else {\r\n                                this.currentTemplate = null;\r\n                                return () => { };\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n\r\n        Object.defineProperty(target.prototype, \"ngAfterContentInit\", {\r\n            value: function () {\r\n                const viewContainerRef = this.viewContainerRef;\r\n                const zone: NgZone = viewContainerRef.injector.get(NgZone);\r\n                const userService: UserService = viewContainerRef.injector.get(UserService);\r\n                const args = arguments;\r\n\r\n                zone.run(() => {\r\n                    userService.onHasAccess.subscribe((hasAccess: boolean) => {\r\n                        if (_.isBoolean(hasAccess) && hasAccess) {\r\n                            return ngAfterContentInit.apply(this, args);\r\n                        } else {\r\n                            this.currentTemplate = null;\r\n                            return () => { };\r\n                        }\r\n                    });\r\n                });\r\n\r\n                return () => { };\r\n            }\r\n        });\r\n\r\n        return target;\r\n    }\r\n\r\n    console.warn(`The object '${target.constructor.name}' is not supported for @Protected.`);\r\n    return target;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/decorators/Protected.ts","import { Injectable, Inject, } from \"@angular/core\";\r\n\r\n/**\r\n* Reference: http://detectmobilebrowsers.com/\r\n*/\r\n@Injectable()\r\nexport class DetectDeviceService {\r\n    /* tslint:disable:max-line-length */\r\n    private mobileRegex = new RegExp(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/);\r\n    private mobilePartialRegex = new RegExp(/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i);\r\n    /* tslint:enable:max-line-length */\r\n\r\n    constructor( @Inject(Window) public window: Window) { }\r\n\r\n    isMobile(): boolean {\r\n        let agent = navigator.userAgent || navigator.vendor || (<any>window).opera;\r\n\r\n        return this.mobileRegex.test(agent) || this.mobilePartialRegex.test(agent.substring(0, 4));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/detectDevice.service.ts","export class Env {\r\n    static isProd(): boolean {\r\n        return ENV === \"production\";\r\n    }\r\n\r\n    static isDev(): boolean {\r\n        return ENV === \"development\";\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/dev-helpers.ts","export enum DefaultViewState {\r\n    None,\r\n    DefaultTemplate\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/enums/default-view-state-enum.ts","export enum GenericMessages {\r\n    Warning,\r\n    Danger,\r\n    Success,\r\n    Info\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/enums/generic-messages-enum.ts","/**\r\n * @module\r\n * @description\r\n * Entry point for all public enums.\r\n */\r\nexport * from \"./generic-messages-enum\";\r\nexport * from \"./member-status-enum\";\r\nexport * from \"./default-view-state-enum\";\r\nexport * from \"./password-verdict\";\r\nexport * from \"./searchType\";\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/enums/index.ts","export enum MemberStatus {\r\n    Unknown,\r\n    NeedApproval,\r\n    EmailAuthorisationNeeded,\r\n    Registered,\r\n    NotRegistered,\r\n    LoginExpired,\r\n    EmailRetrievalDisallowed,\r\n    AlreadyLoggedIn,\r\n    LoggedIn,\r\n    AuthorizationFailure,\r\n    FacebookIntegrated,\r\n    AlreadyRegistered,\r\n    AdminLoggedIn\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/enums/member-status-enum.ts","export enum PasswordVerdict {\r\n    /**\r\n     * @description Too guessable: risky password.\r\n     */\r\n    Weak = 0,\r\n\r\n    /**\r\n     * @description Very guessable: protection from throttled online attacks.\r\n     */\r\n    Normal = 1,\r\n\r\n    /**\r\n     * @description Somewhat guessable: protection from unthrottled online attacks.\r\n     */\r\n    Medium = 2,\r\n\r\n    /**\r\n     * @description Safely unguessable: moderate protection from offline slow-hash scenario.\r\n     */\r\n    Strong = 3,\r\n\r\n    /**\r\n     * @description Very unguessable: strong protection from offline slow-hash scenario.\r\n     */\r\n    VeryStrong = 4\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/enums/password-verdict.ts","export enum SearchType {\r\n    /**\r\n     * @description Marks a content type.\r\n     */\r\n    Content,\r\n\r\n    /**\r\n     * @description Marks a media type.\r\n     */\r\n    Media,\r\n\r\n    /**\r\n     * @description Marks a file type.\r\n     */\r\n    File\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/enums/searchType.ts","import { Directive, ElementRef, Inject, Renderer, HostListener, Input, OnInit, AfterContentInit, OnChanges, SimpleChanges } from \"@angular/core\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport * as $ from \"jquery\";\r\nimport { HoverableEventService, HoverableEventType } from \"./hoverableEvent.service\";\r\n\r\n@Directive({\r\n    selector: \"[hoverable-group]\",\r\n    providers: [HoverableEventService]\r\n})\r\nexport class HoverableGroupDirective implements OnInit, AfterContentInit, OnChanges {\r\n    @Input(\"hoverable-group\") group: string;\r\n    @Input(\"show-on-hover\") showOnHover: boolean = true;\r\n\r\n    constructor( @Inject(HoverableEventService) private eventService: HoverableEventService) { }\r\n\r\n    @HostListener(\"mouseenter\")\r\n    onMouseEnter(): void {\r\n        this.eventService.emit(HoverableEventType.MouseEnter);\r\n    }\r\n\r\n    @HostListener(\"mouseleave\")\r\n    onMouseLeave(): void {\r\n        this.eventService.emit(HoverableEventType.MouseLeave);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        const group = changes[\"group\"];\r\n        if (group) {\r\n            // Checks if this is an existing item created before.\r\n            if (typeof group.previousValue === \"string\") {\r\n                this.eventService.setGroup(group.currentValue);\r\n                this.eventService.emit(HoverableEventType.InstanceGroup, this);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.eventService.setGroup(this.group);\r\n        this.eventService.emit(HoverableEventType.InstanceGroup, this);\r\n    }\r\n\r\n    ngOnInit(): void { }\r\n}\r\n\r\n@Directive({\r\n    selector: \"[hoverable]\",\r\n    providers: [HoverableEventService]\r\n})\r\nexport class HoverableDirective implements AfterContentInit, OnChanges {\r\n    @Input(\"hoverable\") group: string = null;\r\n    @Input(\"show-on-hover\") showOnHover: boolean = null;\r\n    @Input(\"visible-display-value\") visibleDisplayValue: string = \"inline-block\";\r\n    displayHiddenValue: string = \"none\";\r\n    orginaValue: string;\r\n    mouseEnterSubscription: Rx.Subscription;\r\n    mouseLeaveSubscription: Rx.Subscription;\r\n\r\n    constructor(\r\n        @Inject(ElementRef) private elementRef: ElementRef,\r\n        @Inject(Renderer) private renderer: Renderer,\r\n        @Inject(HoverableEventService) private eventService: HoverableEventService) {\r\n    }\r\n\r\n    enter(): void {\r\n        if (this.showOnHover) {\r\n            this.renderer.setElementStyle(this.elementRef.nativeElement, \"display\", this.orginaValue);\r\n        } else {\r\n            this.renderer.setElementStyle(this.elementRef.nativeElement, \"display\", \"none\");\r\n        }\r\n    }\r\n\r\n    leave(): void {\r\n        if (this.showOnHover) {\r\n            this.renderer.setElementStyle(this.elementRef.nativeElement, \"display\", \"none\");\r\n        } else {\r\n            this.renderer.setElementStyle(this.elementRef.nativeElement, \"display\", this.orginaValue);\r\n        }\r\n    }\r\n\r\n    private initialize(instance?: HoverableGroupDirective): void {\r\n        if (instance) {\r\n            if (this.showOnHover === null && instance.showOnHover !== null) {\r\n                this.showOnHover = instance.showOnHover;\r\n            }\r\n        }\r\n\r\n        if (this.showOnHover) {\r\n            this.renderer.setElementStyle(this.elementRef.nativeElement, \"display\", \"none\");\r\n        } else {\r\n            this.renderer.setElementStyle(this.elementRef.nativeElement, \"display\", this.orginaValue);\r\n        }\r\n\r\n        this.mouseEnterSubscription = this.eventService.on(HoverableEventType.MouseEnter).subscribe(() => {\r\n            this.enter();\r\n        });\r\n\r\n        this.mouseLeaveSubscription = this.eventService.on(HoverableEventType.MouseLeave).subscribe(() => {\r\n            this.leave();\r\n        });\r\n    }\r\n\r\n    private updateOrginalValue(): void {\r\n        this.orginaValue = $(this.elementRef.nativeElement).css(\"display\");\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        const group = changes[\"group\"];\r\n        if (group) {\r\n            this.eventService.setGroup(group.currentValue);\r\n            if (typeof group.previousValue !== \"string\") {\r\n                // This is a new entity\r\n                this.updateOrginalValue();\r\n\r\n                // We set this as predefined to prevent it from showing up before we can determine if it should or not.\r\n                this.renderer.setElementStyle(this.elementRef.nativeElement, \"display\", \"none\");\r\n\r\n                if (this.group) {\r\n                    // Subscribe to initialize event.\r\n                    this.eventService.on(HoverableEventType.InstanceGroup).debounceTime(1000).subscribe((instance: HoverableGroupDirective) => {\r\n                        // Unsubscrbie if already subscribing.\r\n                        if (this.mouseLeaveSubscription) {\r\n                            this.mouseLeaveSubscription.unsubscribe();\r\n                        }\r\n                        if (this.mouseEnterSubscription) {\r\n                            this.mouseEnterSubscription.unsubscribe();\r\n                        }\r\n\r\n                        // This ensures initialize is called in the correct moment.\r\n                        setTimeout(() => this.initialize(instance), 1);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit(): void { }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/hoverable.directive.ts","import { Injectable, Inject } from \"@angular/core\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport * as bl from \"./blueleet/\";\r\n\r\nexport enum HoverableEventType {\r\n    MouseEnter,\r\n    MouseLeave,\r\n    InstanceGroup\r\n}\r\n\r\n@Injectable()\r\nexport class HoverableEventService implements bl.IBroadcastEvent<HoverableEventType> {\r\n    group: string = null;\r\n\r\n    constructor( @Inject(bl.BroadcasterService) protected broadcaster: bl.BroadcasterService) { }\r\n\r\n    emit(eventType: HoverableEventType, data?: any): void {\r\n        let key = this.getKey(eventType);\r\n        this.broadcaster.broadcast(key, data);\r\n    }\r\n\r\n    on(eventType: HoverableEventType): Rx.Observable<any> {\r\n        let key = this.getKey(eventType);\r\n        return this.broadcaster.on<any>(key);\r\n    }\r\n\r\n    setGroup(value: any) {\r\n        this.group = value;\r\n    }\r\n\r\n    getKey(ofType: HoverableEventType) {\r\n        let key: string;\r\n        switch (ofType) {\r\n            case HoverableEventType.MouseEnter:\r\n                key = \"HoverableEventType:MouseEnter\";\r\n                break;\r\n            case HoverableEventType.MouseLeave:\r\n                key = \"HoverableEventType:MouseLeave\";\r\n                break;\r\n            case HoverableEventType.InstanceGroup:\r\n                key = \"HoverableEventType:InstanceGroup\";\r\n                break;\r\n            default:\r\n                key = \"HoverableEventType:None\";\r\n                break;\r\n        }\r\n\r\n        return this.group === null ? `${key}` : `${key}:${this.group}`;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/hoverableEvent.service.ts","import { Directive, ElementRef, Inject, Renderer, HostListener, Input, OnInit } from \"@angular/core\";\r\nimport * as $ from \"jquery\";\r\n\r\n@Directive({ selector: \"[icon-color]\" })\r\nexport class IconColorDirective implements OnInit {\r\n    @Input(\"icon-color\") iconColor: string;\r\n    $iconElement: any;\r\n\r\n    constructor( @Inject(ElementRef) public elementRef: ElementRef, @Inject(Renderer) public renderer: Renderer) { }\r\n\r\n    @HostListener(\"mouseenter\")\r\n    onMouseEnter(): void {\r\n        this.highlight(this.iconColor);\r\n    }\r\n\r\n    @HostListener(\"mouseleave\")\r\n    onMouseLeave(): void {\r\n        this.highlight(null);\r\n    }\r\n\r\n    private highlight(color: string): void {\r\n        this.renderer.setElementStyle(this.$iconElement, \"color\", color);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.$iconElement = $(this.elementRef.nativeElement).find(\"i\")[0];\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/icon-color.directive.ts","import { Directive, Input, TemplateRef, ViewContainerRef, Inject, AfterViewInit } from \"@angular/core\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { UserService } from \"./user.service\";\r\n\r\n@Directive({ selector: \"[IfAdminAnd]\" })\r\nexport class IfAdminAndDirective implements AfterViewInit {\r\n    onStateChange = new BehaviorSubject<boolean>(false);\r\n    private hasView: boolean = false;\r\n    private condition: boolean = undefined;\r\n\r\n    @Input(\"IfAdminAnd\") set ifAdminAnd(condition: boolean) {\r\n        this.condition = condition;\r\n        if (this.userService.onIsAdminChange.value) {\r\n            if (!condition && this.hasView) {\r\n                this.onStateChange.next(false);\r\n            } else if (condition && !this.hasView) {\r\n                this.onStateChange.next(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        @Inject(TemplateRef) private templateRef: TemplateRef<any>,\r\n        @Inject(ViewContainerRef) private viewContainer: ViewContainerRef,\r\n        @Inject(UserService) private userService: UserService) { }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.viewContainer.clear();\r\n        this.hasView = false;\r\n        this.onStateChange.subscribe((showView) => {\r\n            if (showView && !this.hasView) {\r\n                this.hasView = true;\r\n                this.viewContainer.createEmbeddedView(this.templateRef);\r\n            } else if (!showView && this.hasView) {\r\n                this.hasView = false;\r\n                this.viewContainer.clear();\r\n            }\r\n        });\r\n\r\n        this.userService.isAdmin().then(() => {\r\n            this.userService.onIsAdminChange.subscribe((isAdmin) => {\r\n                if (this.condition !== undefined && this.condition === false) {\r\n                    isAdmin = false;\r\n                }\r\n\r\n                this.onStateChange.next(isAdmin);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n@Directive({ selector: \"[IfAdmin]\" })\r\nexport class IfAdminDirective implements AfterViewInit {\r\n    onStateChange = new BehaviorSubject<boolean>(false);\r\n    private hasView = false;\r\n\r\n    constructor(\r\n        @Inject(TemplateRef) private templateRef: TemplateRef<any>,\r\n        @Inject(ViewContainerRef) private viewContainer: ViewContainerRef,\r\n        @Inject(UserService) private userService: UserService) { }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.viewContainer.clear();\r\n        this.hasView = false;\r\n        this.onStateChange.subscribe((showView) => {\r\n            if (showView && !this.hasView) {\r\n                this.hasView = true;\r\n                this.viewContainer.createEmbeddedView(this.templateRef);\r\n            } else if (!showView && this.hasView) {\r\n                this.hasView = false;\r\n                this.viewContainer.clear();\r\n            }\r\n        });\r\n\r\n        this.userService.isAdmin().then(() => {\r\n            this.userService.onIsAdminChange.subscribe((isAdmin) => {\r\n                this.onStateChange.next(isAdmin);\r\n            });\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/if-admin.directive.ts","import { Pipe, PipeTransform } from \"@angular/core\";\r\n\r\n@Pipe({ name: \"log\" })\r\nexport class LogPipe implements PipeTransform {\r\n    transform(value: string): any {\r\n        if (!value) {\r\n            console.log(\"[LogPipe]: value is:\");\r\n            console.log(value);\r\n            return value;\r\n        }\r\n\r\n        console.log(\"[LogPipe]: value is null\");\r\n\r\n        return value;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/log.pipe.ts","import { Injectable, Inject } from \"@angular/core\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport * as bl from \"./blueleet/\";\r\nimport * as MemberPayload from \"./abstraction/IMemberPayload\";\r\nimport { IBroadcastEvent } from \"./blueleet/broadcaster.service\";\r\n\r\nexport enum LoginEventType {\r\n    None,\r\n    Success,\r\n    GenericError,\r\n    SignInError,\r\n    SignUpError,\r\n    ForgotPasswordError,\r\n    ShowLoginView,\r\n    ShowSignupView,\r\n    ShowForgotPasswordView\r\n}\r\n\r\n@Injectable()\r\nexport class LoginEventService implements IBroadcastEvent<LoginEventType> {\r\n    constructor( @Inject(bl.BroadcasterService) protected broadcaster: bl.BroadcasterService) { }\r\n\r\n    emit(eventType: LoginEventType, data?: MemberPayload.IMemberPayload): void {\r\n        let key = this.getKey(eventType);\r\n        this.broadcaster.broadcast(key, data);\r\n        if (eventType !== (LoginEventType.Success || LoginEventType.None)) {\r\n            this.broadcaster.broadcast(\"LoginEventType:Error\", data);\r\n        }\r\n    }\r\n\r\n    on(eventType: LoginEventType): Rx.Observable<MemberPayload.IMemberPayload> {\r\n        let key = this.getKey(eventType);\r\n        return this.broadcaster.on<MemberPayload.IMemberPayload>(key);\r\n    }\r\n\r\n    onError(): Rx.Observable<MemberPayload.IMemberPayload> {\r\n        return this.broadcaster.on<MemberPayload.IMemberPayload>(\"LoginEventType:Error\");\r\n    }\r\n\r\n    getKey(ofType: LoginEventType) {\r\n        switch (ofType) {\r\n            case LoginEventType.Success:\r\n                return \"LoginEventType:Success\";\r\n            case LoginEventType.ForgotPasswordError:\r\n                return \"LoginEventType:ForgotPasswordError\";\r\n            case LoginEventType.GenericError:\r\n                return \"LoginEventType:GenericError\";\r\n            case LoginEventType.SignInError:\r\n                return \"LoginEventType:SignInError\";\r\n            case LoginEventType.SignUpError:\r\n                return \"LoginEventType:SignUpError\";\r\n            case LoginEventType.ShowLoginView:\r\n                return \"LoginEventType:ShowLoginView\";\r\n            case LoginEventType.ShowSignupView:\r\n                return \"LoginEventType:ShowSignupView\";\r\n            case LoginEventType.ShowForgotPasswordView:\r\n                return \"LoginEventType:ShowForgotPasswordView\";\r\n            default:\r\n                return \"LoginEventType:None\";\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/loginEvent.service.ts","/* tslint:disable */\r\nimport { Component, AfterViewInit, ContentChild, TemplateRef } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app-root\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"this.appTemplate\" [ngOutletContext]=\"{ $implicit: this }\"></ng-template><router-outlet></router-outlet>`,\r\n})\r\nexport class RootAppComponent implements AfterViewInit {\r\n    @ContentChild(TemplateRef) appTemplate: TemplateRef<any>;\r\n    ngAfterViewInit(): void {}\r\n}\r\n\r\n@Component({\r\n    selector: \"app\", // this will ensure that angular controlls the whole page with only one root component.\r\n    template: (<any>document).getElementById(\"mainAppContent\").innerText // Currently we have no way of using existing html as per to https://github.com/angular/angular/issues/1858 so we use this hack.\r\n})\r\nexport class AppComponent implements AfterViewInit {\r\n    ngAfterViewInit(): void {}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/main.app.ts","import { NgModule } from \"@angular/core\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { HttpModule } from \"@angular/http\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { RouterModule, Routes, ExtraOptions } from \"@angular/router\";\r\nimport { Env } from \"./dev-helpers\";\r\n\r\n// ToDo: separate below code into own modules and import for better readability.\r\n\r\n// Valor imports\r\nimport { AlertModule } from \"ngx-bootstrap/alert\";\r\nimport { ModalModule } from \"ngx-bootstrap/modal\";\r\nimport { ButtonsModule } from \"ngx-bootstrap/buttons\";\r\nimport { PopoverModule } from \"ngx-bootstrap/popover\";\r\nimport { window } from \"ngx-bootstrap/utils/facade/browser\";\r\n\r\n// Application specific imports\r\nimport { RootAppComponent, AppComponent } from \"./main.app\";\r\nimport { IconColorDirective } from \"./icon-color.directive\";\r\nimport { LogPipe } from \"./log.pipe\";\r\nimport { DetectDeviceService } from \"./detectDevice.service\";\r\nimport { WidgetSearchDirective } from \"./widget-search.directive\";\r\nimport { WidgetQuickNavigatorComponent } from \"./components/widget-quickNavigator/widget-quickNavigator.component\";\r\nimport { LoginSignupComponent } from \"./components/login-signup/login-signup.component\";\r\nimport { LoginEventService } from \"./loginEvent.service\";\r\nimport { LoginSignupCompleteComponent } from \"./components/login-signup/login-signup-complete.component\";\r\nimport { SearchBoxComponent } from \"./components/search-box/search-box.component\";\r\nimport { SimpleLoginComponent } from \"./components/simple-login/simple-login.component\";\r\nimport { UserService } from \"./user.service\";\r\nimport { SimpleSignUpComponent } from \"./components/simple-signup/simple-signup.component\";\r\nimport { BootstrapFormInputComponent } from \"./components/bootstrap/form-input.component\";\r\nimport { BootstrapAlertBoxComponent } from \"./components/bootstrap/alert-box/alert-box.component\";\r\nimport { ValidationService } from \"./validation.service\";\r\nimport { ForgotPasswordComponent } from \"./components/forgot-password/forgot-password.component\";\r\nimport { SignoutComponent } from \"./components/login-signup/signout.component\";\r\nimport { HoverableGroupDirective, HoverableDirective } from \"./hoverable.directive\";\r\nimport { HoverableEventService } from \"./hoverableEvent.service\";\r\nimport { IfAdminDirective, IfAdminAndDirective } from \"./if-admin.directive\";\r\nimport { SearchWallComponent, SearchEmptyComponent } from \"./components/search-wall/search-wall.component\";\r\nimport * as bl from \"./blueleet/\";\r\nimport {AlertBoxService} from \"./alert-box.service\";\r\nimport {EventComponent} from \"./components/event/event.component\";\r\nimport {EventCodeComponent} from \"./components/event/code.component\";\r\n\r\n// Configure ngx-bootstrap\r\nwindow.__theme = \"bs4\";\r\n\r\n// ToDo: Refactor\r\nconst appRoutes: Routes = [\r\n    { path: \"**\", component: AppComponent } // This matches all routes\r\n];\r\n\r\nconst extraRouteOpts: ExtraOptions = {\r\n    enableTracing: false\r\n}\r\n\r\nif (Env.isDev()) {\r\n    extraRouteOpts.enableTracing = true;\r\n}\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forRoot(appRoutes, extraRouteOpts),\r\n        BrowserModule,\r\n        HttpModule,\r\n        ReactiveFormsModule,\r\n        bl.CommonDirectivesModule,\r\n        bl.WidgetsModule,\r\n        bl.BlueLeetUmbracoModule.forRoot(),\r\n        bl.InlineEditorModule.forRoot(),\r\n        bl.SearchModule.forRoot(),\r\n        bl.LanguageModule,\r\n        AlertModule.forRoot(),\r\n        ModalModule.forRoot(),\r\n        ButtonsModule.forRoot(),\r\n        PopoverModule.forRoot()\r\n    ],\r\n    declarations: [\r\n        LogPipe,\r\n        RootAppComponent,\r\n        AppComponent,\r\n        HoverableGroupDirective,\r\n        HoverableDirective,\r\n        IconColorDirective,\r\n        WidgetSearchDirective,\r\n        IfAdminDirective,\r\n        IfAdminAndDirective,\r\n        WidgetQuickNavigatorComponent,\r\n        LoginSignupComponent,\r\n        LoginSignupCompleteComponent,\r\n        SimpleLoginComponent,\r\n        SimpleSignUpComponent,\r\n        ForgotPasswordComponent,\r\n        SearchBoxComponent,\r\n        BootstrapFormInputComponent,\r\n        BootstrapAlertBoxComponent,\r\n        SignoutComponent,\r\n        SearchWallComponent,\r\n        SearchEmptyComponent,\r\n        EventComponent,\r\n        EventCodeComponent\r\n    ],\r\n    providers: [\r\n        { provide: Window, useValue: window },\r\n        DetectDeviceService,\r\n        UserService,\r\n        LoginEventService,\r\n        ValidationService,\r\n        HoverableEventService,\r\n        AlertBoxService\r\n    ],\r\n    bootstrap: [RootAppComponent]\r\n})\r\nexport class AppModule {\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/main.bootstraper.ts","import { enableProdMode } from \"@angular/core\";\r\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\r\nimport { AppModule } from \"./main.bootstraper\";\r\nimport { Env } from \"./dev-helpers\";\r\n\r\nif (Env.isProd()) {\r\n    enableProdMode();\r\n}\r\n\r\nexport function main() {\r\n    return platformBrowserDynamic().bootstrapModule(AppModule, { useDebug: Env.isDev() });\r\n}\r\n\r\nif (document.readyState === \"complete\") {\r\n    main();\r\n} else {\r\n    (<any>document).addEventListener(\"DOMContentLoaded\", main);\r\n}\r\n\r\n// Import assets.\r\nimport \"./../assets/stylesheets/ie10-viewport-bug-workaround.css\";\r\nimport \"./../assets/images/favicon.jpg\";\r\nimport \"./../assets/images/clock-preview.png\";\r\n\r\n// Module assets\r\nimport \"angular2-busy/build/style/busy.css\";\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/main.browser.ts","import { Injectable, Inject, NgZone } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nconst pace = require(\"pace-progress\");\r\n\r\n@Injectable()\r\nexport class NavigationService {\r\n    constructor(\r\n        @Inject(Router) private router: Router,\r\n        @Inject(NgZone) private ngZone: NgZone\r\n    ) {\r\n    }\r\n\r\n    navigate(url: string, paceUnload: boolean = true): void {\r\n        const self = this;\r\n        \r\n        self.router.navigateByUrl(url);\r\n        self.reload(paceUnload);\r\n    }\r\n\r\n    reload(paceUnload: boolean = true): void {\r\n        const self = this;\r\n\r\n        window.onbeforeunload = () => {\r\n            pace.stop();\r\n            pace.bar.render();\r\n        };\r\n\r\n        self.ngZone.runOutsideAngular(() => {\r\n            window.location.reload();\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/navigation.service.ts","import \"core-js/es6/symbol\";\r\nimport \"core-js/es6/object\";\r\nimport \"core-js/es6/function\";\r\nimport \"core-js/es6/parse-int\";\r\nimport \"core-js/es6/parse-float\";\r\nimport \"core-js/es6/number\";\r\nimport \"core-js/es6/math\";\r\nimport \"core-js/es6/string\";\r\nimport \"core-js/es6/date\";\r\nimport \"core-js/es6/array\";\r\nimport \"core-js/es6/regexp\";\r\nimport \"core-js/es6/map\";\r\nimport \"core-js/es6/set\";\r\nimport \"core-js/es6/reflect\";\r\n\r\nimport \"core-js/es7/reflect\";\r\n\r\n// import \"reflect-metadata\";\r\n// import \"core-js/es6\";\r\n// import \"core-js/es7/reflect\";\r\nrequire(\"zone.js/dist/zone\");\r\n\r\n// Development\r\nif (ENV === \"development\") {\r\n    Error[\"stackTraceLimit\"] = Infinity;\r\n    require(\"zone.js/dist/long-stack-trace-zone\");\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/polyfills.browser.ts","import { Injectable, Inject, } from \"@angular/core\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport * as bl from \"./blueleet\";\r\nimport { LoginEventService, LoginEventType } from \"./loginEvent.service\";\r\nimport { IMemberPayload as MemberPayload } from \"./abstraction/IMemberPayload\";\r\n//import {IUser} from \"./abstraction/IUser\";\r\n\r\n@Injectable()\r\nexport class UserService {\r\n    onHasAccess = new BehaviorSubject<boolean>(false);\r\n    onIsAdminChange = new BehaviorSubject<boolean>(false);\r\n\r\n    // ReSharper disable once InconsistentNaming\r\n    //private _member: IUser;\r\n\r\n    constructor(\r\n        @Inject(bl.UmbracoAjaxService) protected umbracoAjaxService: bl.UmbracoAjaxService,\r\n        @Inject(LoginEventService) loginEventService: LoginEventService\r\n    ) {\r\n        loginEventService.on(LoginEventType.Success).subscribe((value: MemberPayload) => {\r\n            if (value.user) {\r\n                this.onHasAccess.next(true);\r\n            }\r\n        });\r\n        loginEventService.onError().subscribe(() => {\r\n            this.onHasAccess.next(false);\r\n        });\r\n    }\r\n\r\n    //get member(): Promise<IUser> {\r\n    //    if (this._member) {\r\n    //        return Promise.resolve(this._member);\r\n    //    }\r\n\r\n    //    return this.getMember().then(value => {\r\n    //        this._member = value.user;\r\n\r\n    //        return this._member;\r\n    //    });\r\n    //}\r\n\r\n    getMember(): Promise<any> {\r\n        return this.umbracoAjaxService.post(\"MemberSurface\", \"GetMemberPost\").then(value => {\r\n            if (value) {\r\n                this.onHasAccess.next(true);\r\n            } else {\r\n                this.onHasAccess.next(false);\r\n            }\r\n\r\n            return value.user;\r\n        });\r\n    }\r\n\r\n    hasAccess(revalidate: boolean = true): Promise<boolean> {\r\n        console.log(`HasAccess called`);\r\n        let value = this.onHasAccess.getValue();\r\n        if (revalidate === false && !Object.isNullOrUndefined(value)) {\r\n            console.log(`HasAccess: Using stored value '${value}'`);\r\n            return Promise.resolve(value);\r\n        }\r\n\r\n        const promise = this.umbracoAjaxService.post(\"MemberSurface\", \"HasAccessPost\").catch((): void => {\r\n            console.log(`HasAccess-Catch: Evaluated to 'false`);\r\n            this.onHasAccess.next(false);\r\n        }).then(v => {\r\n            if (v) {\r\n                console.log(`HasAccess-Then: Evaluated to 'true`);\r\n                this.onHasAccess.next(true);\r\n                return true;\r\n            }\r\n\r\n            console.log(`HasAccess-Then: Evaluated to 'false`);\r\n            return false;\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    isAdmin(): Promise<boolean> {\r\n        console.log(`IsAdmin called`);\r\n        const promise = this.umbracoAjaxService.post(\"MemberSurface\", \"IsAdminPost\").then(value => {\r\n            this.onIsAdminChange.next(value);\r\n            return value;\r\n        });\r\n        return promise;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/user.service.ts","import { Injectable } from \"@angular/core\";\r\nimport { AbstractControl, ValidatorFn, AsyncValidatorFn, Validators } from \"@angular/forms\";\r\nimport { CustomValidators } from \"ng2-validation\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport { UmbracoAjaxService } from \"./blueleet/umbraco-ajax-Service\";\r\nimport { PasswordVerdict } from \"./enums/password-verdict\";\r\nimport { AsyncObservableValidator } from \"./blueleet/Validator/AsyncObservableValidator\";\r\nimport { IPayload } from \"./abstraction/IPayload\";\r\nimport { GenericMessages } from \"./enums/generic-messages-enum\";\r\nconst zxcvbn = require(\"zxcvbn\");\r\nconst _ = require(\"lodash\");\r\n\r\n@Injectable()\r\nexport class ValidationService implements CustomValidators {\r\n    private static passwordStrengthChange = new Rx.Subject<any>();\r\n    private static validatorErrorMessages: any = null;\r\n\r\n    static getValidatorErrorMessage(validatorName: string, validatorValue?: any) {\r\n        const getErrorMessage = (fallback: string) => {\r\n            if (validatorName === \"weakPassword\") {\r\n                if (!Object.isNullOrUndefined(validatorValue.strength.feedback.warning)) {\r\n                    return validatorValue.strength.feedback.warning;\r\n                }\r\n            }\r\n\r\n            let compiledValue = _.template(fallback)(validatorValue);\r\n            return compiledValue;\r\n        };\r\n\r\n        if (validatorName === \"creditCard\") {\r\n            validatorName = \"invalidCreditCard\";\r\n        }\r\n\r\n        const configValue = getErrorMessage(this.validatorErrorMessages[validatorName]);\r\n        return configValue;\r\n    }\r\n\r\n    static passwordValidator(minLength: number): ValidatorFn {\r\n        return (control): any => {\r\n            const strength = zxcvbn(control.value);\r\n            this.passwordStrengthChange.next(strength);\r\n            let length = control.value ? control.value.length : 0;\r\n            if (length < minLength) {\r\n                return { invalidPasswordLength: { requiredLength: minLength, actualLength: length } };\r\n            }\r\n\r\n            if (strength.score < 3) {\r\n                return { weakPassword: { strength: strength } };\r\n            }\r\n\r\n            return null;\r\n        };\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of a range length.\r\n    */\r\n    static rangeLength(rangeLength: Array<number>): ValidatorFn {\r\n        return CustomValidators.rangeLength(rangeLength);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of a min value.\r\n    */\r\n    static min(min: number): ValidatorFn {\r\n        return Validators.minLength(min);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of a max value.\r\n    */\r\n    static max(max: number): ValidatorFn {\r\n        return Validators.maxLength(max);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of a range value.\r\n    */\r\n    static range(range: Array<number>): ValidatorFn {\r\n        return CustomValidators.range(range);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of digits.\r\n    */\r\n    static digits(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.digits(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of number.\r\n    */\r\n    static number(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.number(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of url.\r\n    */\r\n    static url(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.url(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of email.\r\n    */\r\n    static email(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.email(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of date.\r\n    */\r\n    static date(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.date(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of minDate.\r\n    */\r\n    static minDate(minDate: any): ValidatorFn {\r\n        return CustomValidators.minDate(minDate);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of maxDate.\r\n    */\r\n    static maxDate(maxDate: any): ValidatorFn {\r\n        return CustomValidators.maxDate(maxDate);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of dateISO.\r\n    */\r\n    static dateISO(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.dateISO(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of creditCard.\r\n    */\r\n    static creditCard(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.creditCard(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of JSON.\r\n    */\r\n    static json(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.json(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of base64.\r\n    */\r\n    static base64(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.base64(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of phone.\r\n    */\r\n    static phone(locale?: string): ValidatorFn {\r\n        // ToDo: implament phone for sweden local.\r\n        return CustomValidators.phone(locale);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of uuid.\r\n    */\r\n    static uuid(version?: string): ValidatorFn {\r\n        return CustomValidators.uuid(version);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value to equal another value.\r\n    */\r\n    static equal(val: any): ValidatorFn {\r\n        return (control: AbstractControl): { [key: string]: any } => {\r\n            if (!Object.isNullOrUndefined(Validators.required(control))) {\r\n                return null;\r\n            }\r\n\r\n            let v: any = control.value;\r\n\r\n            return val === v ? null : { equal: { equalValue: val } };\r\n        };\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value to equal another control.\r\n    */\r\n    static equalTo(equalControl: AbstractControl, thisControlName: string, equalControlName: string): ValidatorFn {\r\n        let subscribe: boolean = false;\r\n        return (control: AbstractControl): { [key: string]: any } => {\r\n            if (!subscribe) {\r\n                subscribe = true;\r\n                equalControl.valueChanges.subscribe(() => {\r\n                    control.updateValueAndValidity();\r\n                });\r\n            }\r\n\r\n            let v: string = control.value;\r\n\r\n            return equalControl.value === v ? null : { equalTo: { thisControlName: thisControlName, equalControlName: equalControlName } };\r\n        };\r\n    }\r\n\r\n    constructor(umbracoAjaxService: UmbracoAjaxService) {\r\n        if (ValidationService.validatorErrorMessages === null) {\r\n            umbracoAjaxService.post(\"TranslationHelper\", \"GetValidationServiceMessagesPost\")\r\n                .then((value) => {\r\n                    ValidationService.validatorErrorMessages = value;\r\n                });\r\n        }\r\n    }\r\n\r\n    pattern(p: RegExp, message: string): ValidatorFn {\r\n        return (control: AbstractControl): { patternInvalidValue: { message: string } } => {\r\n            if (p.test(control.value)) {\r\n                return { patternInvalidValue: { message: message } };\r\n            }\r\n\r\n            return null;\r\n        };\r\n    }\r\n\r\n    usernameValidator(umbracoAjaxService: UmbracoAjaxService): AsyncValidatorFn {\r\n        return AsyncObservableValidator.create(value => {\r\n            return umbracoAjaxService.post(\"MemberSurface\", \"ValidateUsernamePost\", { username: value })\r\n                .then((v: IPayload) => {\r\n                    if (v.hasOwnProperty(\"messageType\") && v.messageType === GenericMessages.Danger) {\r\n                        return { invalidUsername: v.message };\r\n                    }\r\n                    if (v) {\r\n                        return { usernameTaken: true };\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    emailValidator(umbracoAjaxService: UmbracoAjaxService): AsyncValidatorFn {\r\n        return AsyncObservableValidator.create(value => {\r\n            return umbracoAjaxService.post(\"MemberSurface\", \"ValidateEmailPost\", { email: value })\r\n                .then((v: IPayload) => {\r\n                    if (v) {\r\n                        return { emailAlreadyRegistered: true };\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    onPasswordStrengthChange(): Rx.Observable<any> {\r\n        return ValidationService.passwordStrengthChange.asObservable();\r\n    }\r\n\r\n    getPasswordVerdict(score: number, verdict = PasswordVerdict): { message: string, passwordVerdict: PasswordVerdict } {\r\n        if (score === 0 || score === verdict.Weak) {\r\n            return { message: PasswordVerdict[PasswordVerdict.Weak], passwordVerdict: PasswordVerdict.Weak };\r\n        } else if (score === verdict.Normal) {\r\n            return { message: PasswordVerdict[PasswordVerdict.Normal], passwordVerdict: PasswordVerdict.Normal };\r\n        } else if (score === verdict.Medium) {\r\n            return { message: PasswordVerdict[PasswordVerdict.Medium], passwordVerdict: PasswordVerdict.Medium };\r\n        } else if (score === verdict.Strong) {\r\n            return { message: PasswordVerdict[PasswordVerdict.Strong], passwordVerdict: PasswordVerdict.Strong };\r\n        } else if (score <= PasswordVerdict.VeryStrong) {\r\n            return { message: \"Very Strong\", passwordVerdict: PasswordVerdict.VeryStrong };\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/validation.service.ts","// Angular 2\r\nimport \"@angular/platform-browser\";\r\nimport \"@angular/platform-browser-dynamic\";\r\nimport \"@angular/core\";\r\nimport \"@angular/common\";\r\nimport \"@angular/http\";\r\n\r\n// Reactive\r\nimport \"rxjs\";\r\n\r\n// Other vendors for example jQuery, Lodash or Bootstrap\r\n// You can import js, ts, CSS, sass\r\nimport \"tether\";\r\nimport \"scriptjs\";\r\n\r\n// import 'tether/src/css/tether-theme-basic.sass'; // optional\r\nimport \"./Generics/bootstrap\";\r\n\r\n// Extensions\r\nimport \"./blueleet/extensions/ObjectExtensions\";\r\nimport \"./blueleet/extensions/StringExtensions\";\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/vendor.browser.ts","import { Directive, ElementRef, Inject, HostListener, OnInit } from \"@angular/core\";\r\nimport * as $ from \"jquery\";\r\nimport { DetectDeviceService } from \"./detectDevice.service\";\r\n\r\n@Directive({ selector: \"[widget-search]\" })\r\nexport class WidgetSearchDirective implements OnInit {\r\n    private inputEl: JQuery;\r\n    private self: JQuery;\r\n\r\n    constructor( @Inject(ElementRef) public el: ElementRef, @Inject(DetectDeviceService) public detectDeviceService: DetectDeviceService) { }\r\n\r\n    @HostListener(\"click\", [\"$event\"])\r\n    onClick($event: Event): void {\r\n        this.initSearch($event);\r\n    }\r\n\r\n    @HostListener(\"touchstart\", [\"$event\"])\r\n    onTouchStart($event: Event): void {\r\n        this.initSearch($event);\r\n    }\r\n\r\n    initSearch($event: Event): void {\r\n        // trim value\r\n        let searchFor = this.inputEl.val().trim();\r\n        this.inputEl.val(searchFor);\r\n\r\n        if (!this.self.hasClass(\"search-open\")) { // open it\r\n            $event.preventDefault();\r\n            this.open();\r\n        } else if (this.self.hasClass(\"search-open\") && /^\\s*$/.test(searchFor)) { // close it\r\n            $event.preventDefault();\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.self.addClass(\"search-open\");\r\n        if (!this.detectDeviceService.isMobile()) {\r\n            this.inputEl.focus();\r\n        }\r\n    }\r\n\r\n    close(): void {\r\n        this.self.blur();\r\n        this.self.removeClass(\"search-open\");\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.self = $(this.el.nativeElement);\r\n        this.inputEl = this.self.find(\"input.search-input\").first();\r\n        this.inputEl.on(\"click\", ev => { ev.stopPropagation(); });\r\n        this.inputEl.on(\"touchstart\", ev => { ev.stopPropagation(); });\r\n\r\n        $(document).on(\"click\", ($event: Event) => {\r\n            if (!$($event.target).closest(this.self).length) {\r\n                // Hide the component.\r\n                this.close();\r\n            }\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader!./src/typescript/widget-search.directive.ts"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACNA;;;;;;;ACAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpBA;AACA;;;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AAEA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAaA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAvBA;AAAA;AAAA;;;;;;;;;;;ACTA;AAEA;;;AAGA;AAAA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAdA;AAAA;;;;;;;;;;;ACNA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAaA;AAsBA;AAlCA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAVA;;AAAA;AAaA;AAAA;AACA;AACA;AACA;AAEA;AACA;;AAAA;;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAvCA;AAAA;AAyCA;AACA;AAAA;AAAA;AACA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AAgBA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAvBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AA0BA;AAxBA;AAyBA;AACA;AAAA;AAFA;AACA;AADA;AAvBA;AACA;AAgBA;AAlBA;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AAMA;AAoHA;AACA;AACA;AArHA;AAEA;;;;AAIA;AAEA;;;;AAIA;AAEA;;;;;AAKA;AAEA;;;AAGA;AAEA;;;;;AAKA;AAEA;;;AAGA;AAEA;;;;AAIA;AAEA;;;;AAIA;AAEA;;;;;;AAMA;AAEA;;;AAGA;AAEA;AACA;;;;AAIA;AAEA;;;AAGA;AAVA;AAaA;AACA;;;;;AAKA;AAEA;;;AAGA;AAEA;;;AAGA;AAhBA;AAmBA;AACA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAdA;AA/FA;AAqHA;AAEA;AACA;AACA;AACA;AACA;AACA;AA7HA;AAkHA;AAlHA;AAHA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AAGA;AAYA;AAAA;AACA;AACA;AAbA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAjGA;AAAA;AAAA;;;;;;;;;;ACCA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;ACxBA;AAEA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;AC1BA;;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAiDA;AAAA;AACA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAcA;AAAA;AA5BA;AAAA;AA8BA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AA1EA;AAAA;AA6EA;AAKA;AAIA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAAA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AARA;AAoCA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAJA;AAAA;AAAA;AAOA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAJA;AAAA;AAAA;AAOA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAnCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtNA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AAGA;AAMA;AAAA;AAAA;AALA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AAIA;AADA;AAEA;AAmCA;AAjCA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AApCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AAGA;AAMA;AAAA;AAAA;AAJA;AAIA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlDA;AACA;AACA;AAOA;AATA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AAGA;AAOA;AAAA;AAAA;AANA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA7CA;AAKA;AALA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AAIA;AASA;AAAA;AAAA;AANA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAsBA;AACA;AA/CA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AAdA;AAAA;AALA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;;;;;;;;ACbA;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAEA;AACA;AAIA;AAAA;AAEA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AAGA;AACA;AACA;AApBA;AAEA;AAEA;AAJA;AALA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;;;;;;;;ACdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;;AACA;AACA;AAEA;AACA;AACA;AACA;AAbA;AAAA;AALA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;;;;;;;;ACbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;AALA;;AAOA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AAvBA;AAeA;AAfA;AALA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;;;;;;;;ACbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AAbA;AAAA;AALA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;;;;;;;;ACbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AARA;AAEA;AAQA;AAAA;AAEA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AAlBA;AAEA;AAEA;AAJA;AALA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;;;;;;;;ACbA;;;;;;;;;;;;;;;;ACAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AARA;AAAA;AAAA;AAQA;AAEA;AACA;AAEA;AACA;AApBA;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAEA;AAFA;AACA;AADA;AAHA;AACA;AAFA;AAIA;AASA;AA6BA;AAAA;AAAA;AAAA;AAAA;AAvBA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAtHA;AAEA;AAEA;AAIA;AAEA;AAEA;AAIA;AAEA;AAEA;AApBA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;AC1BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAOA;AAGA;AAAA;AAFA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AADA;AAHA;AACA;AAFA;AAIA;AAkBA;AAIA;AAAA;AAFA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AACA;AAFA;AAHA;AACA;AAFA;AAIA;AAmBA;AAIA;AAAA;AAFA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AACA;AAFA;AAHA;AACA;AAFA;AAIA;AAeA;AAAA;AA0DA;AAAA;AACA;AACA;AACA;AACA;AACA;AA/CA;AAEA;AAEA;AAEA;AAsBA;AAMA;AAgBA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7PA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAGA;AACA;AAIA;AAEA;AAEA;AAQA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAIA;AAqBA;AArEA;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AAKA;AADA;AAEA;AACA;AAAA;AAFA;AAAA;AAAA;AAKA;AADA;AAEA;AACA;AAAA;AAFA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AALA;AACA;AACA;AACA;AAJA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AApBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AAOA;AAQA;AACA;AACA;AACA;AAVA;AAIA;AACA;AAKA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AACA;AAEA;AAEA;AACA;AANA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AASA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAVA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;ACTA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAOA;AAQA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAKA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAnDA;AACA;AACA;AACA;AACA;AAJA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AARA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAxBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;;AAAA;AAAA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AA5KA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AAGA;AAOA;AAGA;AAAA;;AAFA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;AALA;;AAOA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtFA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AAMA;AAAA;AAMA;AAAA;AAGA;AACA;AARA;AACA;AACA;AASA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAzDA;AACA;AACA;AAFA;AAHA;AACA;AAFA;AAIA;;;;;;;ACTA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAuBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAWA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAhNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAfA;AALA;AACA;AACA;AACA;AAJA;AAMA;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAAA;AAiBA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAEA;AAgBA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAtGA;AACA;AAGA;AACA;AACA;AAGA;AATA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AAKA;AACA;AACA;AACA;AACA;AACA;AASA;AAAA;AAoCA;AAAA;AAGA;AACA;AACA;AACA;AACA;AA5BA;AAYA;AACA;AAGA;AACA;AACA;AACA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAvJA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AALA;AACA;AACA;AACA;AAJA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AAGA;AAIA;AAAA;AAHA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AA7EA;AAAA;AAAA;AA4FA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzGA;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;AALA;;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAxIA;AACA;AACA;AAFA;AAHA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AAEA;AACA;AAOA;AAAA;AAIA;AAAA;AAGA;AACA;AACA;AARA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAoBA;AAlBA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;AALA;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhHA;AACA;AACA;AACA;AACA;AACA;AALA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AAEA;AACA;AACA;AAEA;AAMA;AAAA;AAIA;AAAA;AAGA;AACA;AACA;AARA;AAUA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAjCA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAnBA;AAAA;AAHA;AACA;AAFA;AAIA;AA0BA;AAAA;AAQA;AAAA;AAGA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AApFA;AACA;AACA;AAFA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AASA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AA3HA;AACA;AACA;AACA;AACA;AAJA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;AClBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAKA;AAAA;AAGA;AACA;AACA;AACA;AACA;AATA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AANA;AAWA;AACA;AAhEA;AAAA;AAHA;AACA;AAFA;AAIA;;;;;;;ACdA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;AACA;AACA;AAOA;AAIA;AACA;AACA;AACA;AANA;AACA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAuBA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAnBA;AAsBA;AACA;AAEA;AACA;AACA;AAzDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AAEA;;;AAIA;AAIA;AAEA;AAAA;AALA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAbA;AAAA;AAAA;;;;;;;;;;;ACNA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AARA;AAAA;;;;;;;;;;;ACAA;AAAA;AACA;AACA;;;;;;;;;;;;ACFA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACJA;;;;;AAKA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACbA;AAAA;AACA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;;;;;;;;;;;;ACxBA;AAAA;AACA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AAEA;AACA;AAMA;AAIA;AAAA;AAFA;AAEA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAjCA;AACA;AACA;AAKA;AAKA;AAZA;AAHA;AACA;AAFA;AAIA;AAuCA;AASA;AACA;AACA;AACA;AAXA;AACA;AACA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAxFA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAAA;AAFA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AAtCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AAGA;AAIA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAvBA;AACA;AAMA;AAKA;AAZA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAGA;AAgBA;AACA;AACA;AACA;AAlBA;AACA;AACA;AAgBA;AAdA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA5CA;AAKA;AALA;AAAA;AA+CA;AAIA;AACA;AACA;AACA;AANA;AACA;AAKA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAZA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AAEA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AA1CA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AAMA;AAAA;AAEA;AACA;AAHA;AACA;AADA;AAHA;AACA;AAFA;AAIA;AASA;AAAA;AACA;AACA;AAFA;AAAA;AAHA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAIA;AACA;AADA;AAIA;AACA;AACA;AAuDA;AAAA;AACA;AADA;AAAA;AApDA;AAgBA;AAyBA;AASA;AAnDA;AAqDA;;;;;;;;;;;ACjHA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA1BA;AAAA;AAAA;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AAEA;AAGA;AAIA;AACA;AAEA;AAAA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9EA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAmMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAtMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAtQA;AACA;AACA;AAFA;AAAA;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AAGA;AAIA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvDA;AAOA;AAKA;AAZA;AAAA;;;;;;;;;;;;;;","sourceRoot":""}