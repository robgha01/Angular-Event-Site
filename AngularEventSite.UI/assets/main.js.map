{"version":3,"file":"assets/main.js","sources":["webpack:///./~/moment/locale ^\\.\\/.*$","webpack:///./src async","webpack:///./src/assets/images/clock-preview.png","webpack:///./src/assets/images/favicon.png","webpack:///./src/assets/stylesheets/ie10-viewport-bug-workaround.css?a8d4","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/Generics/bootstrap.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/alert-box.service.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/ServiceEvent.service.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/Validator/AsyncObservableValidator.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/abstraction/AbstractValueAccessor.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/blueleet-umbraco.module.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/broadcaster.service.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/components/fader/fader.component.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/components/load-indicator/pace-progress.component.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/config.service.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/extensions/ObjectExtensions.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/extensions/StringExtensions.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/index.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/cache/cache.service.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/cache/module.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/commonDirectives/focus.directive.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/commonDirectives/focus.service.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/commonDirectives/module.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/commonDirectives/scrollTo.directive.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/commonDirectives/showAtScroll.directive.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/commonDirectives/waypointSticky.directive.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/editors/datetime/datetime.component.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/datetime/datetime.html","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/editor-base.html","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/editors/numeric/numeric.component.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/numeric/numeric.html","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/editors/password/password.component.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/password/password.html","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/editors/select/select.component.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/select/select.html","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/editors/text/text.component.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/text/text.html","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/editors/textarea/textarea.component.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/editors/textarea/textarea.html","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/index.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/inline-editor-group.component.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/inline-editor-group.html","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/inline-editor.component.ts","webpack:///./src/typescript/blueleet/modules/inline-editor/inline-editor.scss?9966","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/module.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/services/InlineEditorContext.service.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/language/module.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/language/translator.service.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/search/module.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/search/search.component.ts","webpack:///./src/typescript/blueleet/modules/search/search.scss?342e","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/search/search.service.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/widgets/module.ts","webpack:///./src/typescript/blueleet/modules/widgets/widget-clock/analog-hours.png","webpack:///./src/typescript/blueleet/modules/widgets/widget-clock/analog-minutes.png","webpack:///./src/typescript/blueleet/modules/widgets/widget-clock/analog-seconds.png","webpack:///./src/typescript/blueleet/modules/widgets/widget-clock/clock.png","webpack:///./src/typescript/blueleet/modules/widgets/widget-clock/templates/clock.html","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/widgets/widget-clock/widget-clock.component.ts","webpack:///./src/typescript/blueleet/modules/widgets/widget-clock/widget-clock.scss?ff2d","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/pipes/capitalize.pipe.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/pipes/truncate.pipe.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/umbraco-ajax-Service.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/abstraction/TemplateBaseComponent.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/bootstrap/alert-box/alert-box.component.ts","webpack:///./src/typescript/components/bootstrap/alert-box/templates/alert-box.html","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/bootstrap/form-input.component.ts","webpack:///./src/typescript/components/bootstrap/form-input.scss?2da9","webpack:///./src/typescript/components/bootstrap/templates/form-input.html","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/facebook/facebook-login-complete.component.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/facebook/facebook-login.component.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/facebook/index.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/forgot-password/forgot-password.component.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/image-wall/image-wall.component.ts","webpack:///./src/typescript/components/image-wall/templates/image-wall.html","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/login-signup/login-signup-complete.component.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/login-signup/login-signup.component.ts","webpack:///./src/typescript/components/login-signup/login-signup.scss?f34d","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/login-signup/signout.component.ts","webpack:///./src/typescript/components/login-signup/signout.scss?3fab","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/notification/notification-wall.component.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/notification/notification.service.ts","webpack:///./src/typescript/components/notification/templates/notification-wall.html","webpack:///./src/typescript/components/profile/next.png","webpack:///./src/typescript/components/profile/prev.png","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/profile/profile.component.ts","webpack:///./src/typescript/components/profile/templates/profile.html","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/search-box/search-box.component.ts","webpack:///./src/typescript/components/search-box/search-box.scss?590b","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/search-wall/search-wall.component.ts","webpack:///./src/typescript/components/search-wall/search-wall.scss?324b","webpack:///./src/typescript/components/search-wall/templates/search-wall.html","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/simple-login/simple-login.component.ts","webpack:///./src/typescript/components/simple-login/templates/simple-login.html","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/simple-signup/simple-signup.component.ts","webpack:///./src/typescript/components/widget-quickNavigator/quicknav-arrow.png","webpack:///./src/typescript/components/widget-quickNavigator/templates/quicknavigator.html","webpack:///./src/typescript/components/widget-quickNavigator/umbraco.svg","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/widget-quickNavigator/widget-quickNavigator.component.ts","webpack:///./src/typescript/components/widget-quickNavigator/widget-quickNavigator.scss?6522","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/decorators/Protected.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/detectDevice.service.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/dev-helpers.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/enums/default-view-state-enum.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/enums/gender.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/enums/generic-messages-enum.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/enums/index.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/enums/member-status-enum.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/enums/password-verdict.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/enums/searchType.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/hoverable.directive.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/hoverableEvent.service.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/icon-color.directive.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/if-admin.directive.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/log.pipe.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/loginEvent.service.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/main.app.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/main.bootstraper.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/main.browser.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/abstraction/priceCalculator.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/abstraction/priceCalculatorServiceBase.ts","webpack:///./src/typescript/modules/PriceCalculation/components/templates/widget-priceCalculatorByHours.html","webpack:///./src/typescript/modules/PriceCalculation/components/templates/widget-priceCalculatorBySquareMeters.html","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/components/widget-priceCalculator.component.ts","webpack:///./src/typescript/modules/PriceCalculation/components/widget-priceCalculator.scss?c38e","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/components/widget-priceCalculatorByHours.component.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/components/widget-priceCalculatorBySquareMeters.component.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/entities/price.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/entities/priceSet.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/index.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/module.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/priceCalculatorByHour.service.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/priceCalculatorBySquareMeters.service.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/polyfills.browser.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/user.service.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/validation.service.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/vendor.browser.ts","webpack:///C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/widget-search.directive.ts"],"sourcesContent":["var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale recursive ^\\\\.\\\\/.*$\";\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/moment/locale ^\\.\\/.*$\n// module id = ./node_modules/moment/locale recursive ^\\.\\/.*$\n// module chunks = 3","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"./src async recursive\";\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = ./src async recursive\n// module chunks = 3","module.exports = __webpack_public_path__ + \"./assets/images/clock-preview.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assets/images/clock-preview.png\n// module id = ./src/assets/images/clock-preview.png\n// module chunks = 3","module.exports = __webpack_public_path__ + \"./assets/images/favicon.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assets/images/favicon.png\n// module id = ./src/assets/images/favicon.png\n// module chunks = 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/postcss-loader/index.js!./ie10-viewport-bug-workaround.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/postcss-loader/index.js!./ie10-viewport-bug-workaround.css\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/postcss-loader/index.js!./ie10-viewport-bug-workaround.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assets/stylesheets/ie10-viewport-bug-workaround.css\n// module id = ./src/assets/stylesheets/ie10-viewport-bug-workaround.css\n// module chunks = 3","// If you don't have ES6 transpiler or have TypeScript then you could use distributed version but will loose module customization\r\n// import \"src/bootstrap/dist/js/bootstrap\";\r\n\r\n// If you have ES6 transpiler then you could code below and will be able to customize what modules will be included in the build.\r\n\r\nimport \"bootstrap/js/src/alert\";\r\nimport \"bootstrap/js/src/button\";\r\nimport \"bootstrap/js/src/carousel\";\r\nimport \"bootstrap/js/src/collapse\";\r\nimport \"bootstrap/js/src/dropdown\";\r\nimport \"bootstrap/js/src/modal\";\r\nimport \"bootstrap/js/src/popover\";\r\nimport \"bootstrap/js/src/scrollspy\";\r\nimport \"bootstrap/js/src/tab\";\r\nimport \"bootstrap/js/src/tooltip\";\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/Generics/bootstrap.ts","import { Injectable, Inject } from \"@angular/core\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport * as bl from \"./blueleet/\";\r\nimport { IBroadcastSingleEvent } from \"./blueleet/broadcaster.service\";\r\n\r\nexport enum AlertBoxEventType {\r\n    Info,\r\n    Success,\r\n    Error,\r\n    Warning\r\n}\r\n\r\nexport class AlertBoxOptions {\r\n    type: AlertBoxEventType;\r\n    message: string;\r\n    showClose: boolean;\r\n\r\n    constructor(type: AlertBoxEventType, message: string, showClose: boolean = true) {\r\n        this.type = type;\r\n        this.message = message;\r\n        this.showClose = showClose;\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class AlertBoxService implements IBroadcastSingleEvent {\r\n    constructor( @Inject(bl.BroadcasterService) protected broadcaster: bl.BroadcasterService) { }\r\n\r\n    public emit(data?: AlertBoxOptions): void {\r\n        let key = this.getKey();\r\n        this.broadcaster.broadcast(key, data);\r\n    }\r\n\r\n    public on(): Rx.Observable<AlertBoxOptions> {\r\n        let key = this.getKey();\r\n        return this.broadcaster.on<AlertBoxOptions>(key);\r\n    }\r\n\r\n    public getKey() {\r\n        return \"AlertBoxServiceEventType\";\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/alert-box.service.ts","import { Injectable, Inject } from \"@angular/core\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport { IBroadcastEvent, BroadcasterService } from \"./broadcaster.service\";\r\n\r\nexport enum ServiceEventType {\r\n    RequestBegin,\r\n    RequestEnd\r\n}\r\n\r\n@Injectable()\r\nexport class ServiceEvent implements IBroadcastEvent<ServiceEventType> {\r\n    constructor( @Inject(BroadcasterService) protected broadcaster: BroadcasterService) { }\r\n\r\n    public emit(eventType: ServiceEventType, data?: any): void {\r\n        let key = this.getKey(eventType);\r\n        this.broadcaster.broadcast(key, data);\r\n    }\r\n\r\n    public on(eventType: ServiceEventType): Rx.Observable<any> {\r\n        let key = this.getKey(eventType);\r\n        return this.broadcaster.on<any>(key);\r\n    }\r\n\r\n    public getKey(ofType: ServiceEventType) {\r\n        switch (ofType) {\r\n            case ServiceEventType.RequestBegin:\r\n                return \"ServiceEventType:RequestBegin\";\r\n            case ServiceEventType.RequestEnd:\r\n                return \"ServiceEventType:RequestEnd\";\r\n            default:\r\n                return \"ServiceEventType:None\";\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/ServiceEvent.service.ts","import { AbstractControl, AsyncValidatorFn } from \"@angular/forms\";\r\nimport * as Rx from \"rxjs/Rx\";\r\n\r\n/**\r\n * Async validator that debounce's\r\n */\r\nexport class AsyncObservableValidator {\r\n    static create(callback: (value: any) => Promise<any>, debounceTime: number = 1000): AsyncValidatorFn {\r\n        let changed$ = new Rx.Subject<any>();\r\n        return (control: AbstractControl): Rx.Observable<any | null> => {\r\n            changed$.next(); // This will signal the previous stream (if any) to terminate.\r\n            return control.valueChanges\r\n                .takeUntil(changed$)\r\n                .take(1)\r\n                .debounceTime(debounceTime, Rx.Scheduler.async)\r\n                .switchMap(value => {\r\n                    return callback(value);\r\n                });\r\n        };\r\n    };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/Validator/AsyncObservableValidator.ts","import { forwardRef } from \"@angular/core\";\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\nimport * as Rx from \"rxjs/Rx\";\r\n\r\nexport abstract class AbstractValueAccessor implements ControlValueAccessor {\r\n    private _onValueChange: Rx.Subject<any> = new Rx.Subject();\r\n    public onValueChange: Rx.Observable<any> = this._onValueChange.asObservable();\r\n\r\n    protected $value$: any = \"\";\r\n    get value(): any { return this.$value$; };\r\n    set value(v: any) {\r\n        if (v !== this.$value$) {\r\n            this.$value$ = v;\r\n            this._onValueChange.next(v);\r\n            this.onChange(v);\r\n        }\r\n        if (!this.$preValue$) {\r\n            this.$preValue$ = this.$value$;\r\n        }\r\n    }\r\n\r\n    protected $preValue$: any = null;\r\n    get preValue(): any {\r\n        if (!this.$preValue$) {\r\n            this.$preValue$ = this.$value$;\r\n        }\r\n\r\n        return this.$preValue$;\r\n    };\r\n\r\n    writeValue(value: any) {\r\n        this.value = value;\r\n    }\r\n\r\n    onChange(_): void { };\r\n    onTouched(): void { };\r\n\r\n    registerOnChange(fn: (_: any) => void): void {\r\n        this.onChange = fn;\r\n    }\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n}\r\n\r\nexport function MakeProvider(type: any): any {\r\n    return { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => type), multi: true };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/abstraction/AbstractValueAccessor.ts","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { HttpModule } from \"@angular/http\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { CookieService } from \"angular2-cookie/core\";\r\nimport { UmbracoAjaxService } from \"./umbraco-ajax-Service\";\r\nimport { ConfigService } from \"./config.service\";\r\nimport { BroadcasterService } from \"./broadcaster.service\";\r\nimport { ServiceEvent } from \"./ServiceEvent.service\";\r\nimport { InlineEditorModule } from \"./modules/inline-editor/module\";\r\nimport { CapitalizePipe } from \"./pipes/capitalize.pipe\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { TruncatePipe } from \"./pipes/truncate.pipe\";\r\nimport { FaderComponent } from \"./components/fader/fader.component\";\r\nimport { PaceProgressComponent } from \"./components/load-indicator/pace-progress.component\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, HttpModule, BrowserAnimationsModule, ReactiveFormsModule, InlineEditorModule],\r\n    exports: [TruncatePipe, CapitalizePipe, FaderComponent, PaceProgressComponent, InlineEditorModule],\r\n    declarations: [TruncatePipe, CapitalizePipe, FaderComponent, PaceProgressComponent]\r\n})\r\nexport class BlueLeetUmbracoModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: BlueLeetUmbracoModule,\r\n            providers: [CookieService, TruncatePipe, CapitalizePipe, BroadcasterService, UmbracoAjaxService, ConfigService, ServiceEvent]\r\n        };\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/blueleet-umbraco.module.ts","import { Injectable } from \"@angular/core\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport { IBroadcastEventArgs } from \"./abstraction/IBroadcastEventArgs\";\r\n\r\nexport interface IBroadcastEvent<TEventType> {\r\n    emit(eventType: TEventType, data: any): void;\r\n    on(eventType: TEventType): Rx.Observable<any>;\r\n    getKey(eventType: TEventType);\r\n}\r\n\r\nexport interface IBroadcastSingleEvent {\r\n    emit(data: any): void;\r\n    on(): Rx.Observable<any>;\r\n    getKey();\r\n}\r\n\r\n@Injectable()\r\nexport class BroadcasterService {\r\n    private eventBus: Rx.Subject<IBroadcastEventArgs>;\r\n\r\n    constructor() {\r\n        this.eventBus = new Rx.Subject<IBroadcastEventArgs>();\r\n    }\r\n\r\n    broadcast(key: string, data?: any) {\r\n        this.eventBus.next({ key, data });\r\n    }\r\n\r\n    on<T>(key: string): Rx.Observable<T> {\r\n        const observable = this.eventBus.asObservable()\r\n            .filter((event: IBroadcastEventArgs) => {\r\n                if (event.key === key) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            })\r\n            .map((event: IBroadcastEventArgs) => <T>event.data);\r\n\r\n        return observable;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/broadcaster.service.ts","import { Component, Input, trigger, state, animate, transition, style, keyframes } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"bl-fader\",\r\n    animations: [\r\n        trigger(\"visibilityChanged\", [\r\n            state(\"true\", style({ opacity: 1 })),\r\n            state(\"false\", style({ opacity: 0 })),\r\n            transition(\"1 => 0\", animate(300, keyframes([\r\n                style({ \"opacity\": \"1\" }),\r\n                style({ \"opacity\": \"0.7\" }),\r\n                style({ \"opacity\": \"0\" })\r\n            ]))),\r\n            transition(\"0 => 1\", animate(300, keyframes([\r\n                style({ \"opacity\": \"0\" }),\r\n                style({ \"opacity\": \"0.7\" }),\r\n                style({ \"opacity\": \"1\" })\r\n            ])))\r\n        ])\r\n    ],\r\n    template: `\r\n      <div [@visibilityChanged]=\"isVisible\" >\r\n        <ng-content></ng-content>\r\n      </div>\r\n  `\r\n})\r\nexport class FaderComponent {\r\n    @Input() isVisible: boolean = true;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/components/fader/fader.component.ts","import { Component, Input, NgZone, Inject, ElementRef, OnInit } from \"@angular/core\";\r\nimport * as $ from \"jquery\";\r\nconst Pace = require(\"pace-progress\");\r\n\r\n@Component({\r\n    selector: \"pace-progress\",\r\n    template: `<div class=\"pace-overlay\"></div>`\r\n})\r\nexport class PaceProgressComponent implements OnInit {\r\n    defaultOptions: any = {\r\n\r\n        /**\r\n         * How long should it take for the bar to animate to a new\r\n         * point after receiving it\r\n         */\r\n        catchupTime: 100,\r\n\r\n        /**\r\n         * How quickly should the bar be moving before it has any progress\r\n         * info from a new source in %/ms\r\n         */\r\n        initialRate: .03,\r\n\r\n        /**\r\n         * What is the minimum amount of time the bar should be on the\r\n         * screen.  Irrespective of this number, the bar will always be on screen for\r\n         * 33 * (100 / maxProgressPerFrame) + ghostTime ms.\r\n         */\r\n        minTime: 250,\r\n\r\n        /**\r\n         * What is the minimum amount of time the bar should sit after the last update before disappearing\r\n         */\r\n        ghostTime: 100,\r\n\r\n        /**\r\n         * Its easy for a bunch of the bar to be eaten in the first few frames\r\n         * before we know how much there is to load.  This limits how much of\r\n         * the bar can be used per frame\r\n         */\r\n        maxProgressPerFrame: 20,\r\n\r\n        /**\r\n         * This tweaks the animation easing\r\n         */\r\n        easeFactor: 1.25,\r\n\r\n        /**\r\n         * Should pace automatically start when the page is loaded, or should it wait for `start` to\r\n         * be called?  Always false if pace is loaded with AMD or CommonJS.\r\n         */\r\n        startOnPageLoad: true,\r\n\r\n        /**\r\n         * Should we restart the browser when pushState or replaceState is called? (Generally\r\n         * means Ajax navigation has occurred)\r\n         */\r\n        restartOnPushState: true,\r\n\r\n        /**\r\n         * Should we show the progress bar for every Ajax request (not just regular or Ajax-y page\r\n         * navigation)? Set to false to disable.\r\n         *\r\n         * If so, how many ms does the request have to be running for before we show the progress?\r\n         */\r\n        restartOnRequestAfter: 500,\r\n\r\n        /**\r\n         * What element should the pace element be appended to on the page?\r\n         */\r\n        target: \"body\",\r\n\r\n        elements: {\r\n            /**\r\n             * How frequently in ms should we check for the elements being tested for\r\n             * using the element monitor?\r\n             */\r\n            checkInterval: 100,\r\n\r\n            /**\r\n             * What elements should we wait for before deciding the page is fully loaded (not required)\r\n             */\r\n            selectors: [\"body\"]\r\n        },\r\n\r\n        eventLag: {\r\n            /**\r\n             * When we first start measuring event lag, not much is going on in the browser yet, so it's\r\n             * not uncommon for the numbers to be abnormally low for the first few samples.  This configures\r\n             * how many samples we need before we consider a low number to mean completion.\r\n             */\r\n            minSamples: 10,\r\n\r\n            /**\r\n             * How many samples should we average to decide what the current lag is?\r\n             */\r\n            sampleCount: 3,\r\n\r\n            /**\r\n             * Above how many ms of lag is the CPU considered busy?\r\n             */\r\n            lagThreshold: 3\r\n        },\r\n\r\n        ajax: {\r\n            /**\r\n             * Which HTTP methods should we track?\r\n             */\r\n            trackMethods: [\"GET\"],\r\n\r\n            /**\r\n             * Should we track web socket connections?\r\n             */\r\n            trackWebSockets: false,\r\n\r\n            /**\r\n             * A list of regular expressions or substrings of URLS we should ignore (for both tracking and restarting)\r\n             */\r\n            ignoreURLs: [/\\/umbraco/, /\\/dev-server\\.js/, /\\/browserLink/]\r\n        }\r\n    };\r\n\r\n    @Input(\"options\") options: any;\r\n\r\n    constructor(\r\n        @Inject(NgZone) private zone: NgZone,\r\n        @Inject(ElementRef) private elementRef: ElementRef) { }\r\n\r\n    ngOnInit(): void {\r\n        let opt: any = {};\r\n        $.extend(opt, this.defaultOptions, this.options);\r\n        Pace.start(opt);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/components/load-indicator/pace-progress.component.ts","import { Inject, Injectable } from \"@angular/core\";\r\nimport { Http, Response } from \"@angular/http\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport { CookieService, CookieOptionsArgs } from \"angular2-cookie/core\";\r\n\r\n@Injectable()\r\nexport class ConfigService {\r\n    siteConstants: any = {};\r\n    localStore: any = {};\r\n    url: string;\r\n    cookieKey: string = \"configsKey\";\r\n    localStorageKey: string = `${this.cookieKey}:localStorage`;\r\n    useCookieStore: boolean = true;\r\n    loadingInProgress: boolean = false;\r\n\r\n    private configSubject: Rx.BehaviorSubject<any> = new Rx.BehaviorSubject(null);\r\n    private configObservable: Rx.Observable<any> = this.configSubject.asObservable();\r\n\r\n    constructor( @Inject(Http) protected $http: Http,\r\n        @Inject(Window) protected window,\r\n        @Inject(CookieService) protected cookieService: CookieService) {\r\n        this.url = window.location.protocol + \"//\" + window.location.host + \"/\" + \"umbraco/surface/configsurface/index\";\r\n    }\r\n\r\n    getCookieConfigs(): Object {\r\n        if (this.useCookieStore) {\r\n            const cookieValue = this.cookieService.getObject(this.cookieKey);\r\n\r\n            if (cookieValue) {\r\n                return cookieValue;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    setCookieConfigs(data: any): void {\r\n        if (this.useCookieStore) {\r\n            let expireDate = new Date();\r\n            expireDate.setMinutes(expireDate.getMinutes() + 30);\r\n            this.cookieService.putObject(this.cookieKey, data, { expires: expireDate });\r\n        }\r\n    }\r\n\r\n    ensureConfigs(): Promise<any> {\r\n        let tryGetCookie = this.getCookieConfigs();\r\n\r\n        if (tryGetCookie != null) {\r\n            return new Promise((resolve) => {\r\n                resolve(tryGetCookie);\r\n            });\r\n        }\r\n\r\n        if (Object.keys(this.siteConstants).length) {\r\n            return new Promise((resolve) => {\r\n                resolve(this.siteConstants);\r\n            });\r\n        }\r\n\r\n        // No siteConstants found, load them.\r\n        if (!this.loadingInProgress) {\r\n            this.loadingInProgress = true;\r\n\r\n            let observable = this.$http.post(this.url, null)\r\n                .finally(() => this.loadingInProgress = false)\r\n                .map((res: Response) => {\r\n                    return res.json();\r\n                }).toPromise().then(configs => {\r\n                    // Assign the configuration keys with the correct properties from the server.\r\n                    let keys = Object.keys(configs);\r\n                    let values = Object.values(configs);\r\n\r\n                    keys.forEach((key, i) => {\r\n                        let value = values[i];\r\n                        this.siteConstants[key] = value;\r\n                    });\r\n\r\n                    this.setCookieConfigs(this.siteConstants);\r\n                    this.configSubject.next(this.siteConstants);\r\n\r\n                    return this.siteConstants;\r\n                });\r\n\r\n            return observable;\r\n        }\r\n\r\n        return this.configObservable.toPromise();\r\n    }\r\n\r\n    getLocalConfig(key): any {\r\n        return this.localStore[key];\r\n    }\r\n\r\n    addLocalConfig(key, value): void {\r\n        let tryGetValue = this.getLocalConfig(key);\r\n        if (tryGetValue) {\r\n            this.localStore[key] = value;\r\n        }\r\n    };\r\n\r\n    setLocalConfig(key, value): void {\r\n        this.localStore[key] = value;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/config.service.ts","/**\r\n * Static extensions\r\n */\r\ninterface ObjectConstructor {\r\n    isNullOrUndefined(object: any): boolean;\r\n    isNotNullOrUndefined(object: any): boolean;\r\n    getQueryStringValue(param: any): string;\r\n};\r\n\r\nObject.isNullOrUndefined = (object: any): boolean => {\r\n    return !(object !== null && object !== undefined);\r\n};\r\n\r\nObject.isNotNullOrUndefined = (object: any): boolean => {\r\n    return object !== null && object !== undefined;\r\n};\r\n\r\nObject.getQueryStringValue = (param: any): string => {\r\n    let sPageUrl = window.location.search.substring(1);\r\n    let sUrlVariables = sPageUrl.split(\"&\");\r\n\r\n    for (let i = 0; i < sUrlVariables.length; i++) {\r\n        let sParameterName = sUrlVariables[i].split(\"=\");\r\n\r\n        if (sParameterName[0] === param) {\r\n            return decodeURIComponent(sParameterName[1]);\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Prototyped extensions\r\n */\r\ninterface Object { }\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/extensions/ObjectExtensions.ts","/**\r\n * Static extensions\r\n */\r\ninterface StringConstructor {\r\n    isNullOrEmpty(str: string): boolean;\r\n};\r\n\r\nString.isNullOrEmpty = (str: string) => !str;\r\n\r\n\r\n/**\r\n * Prototyped extensions\r\n */\r\ninterface String {\r\n    asUrl(): URL;\r\n}\r\n\r\nString.prototype.asUrl = function (): URL {\r\n    let url: URL;\r\n    try {\r\n        url = new URL(this);\r\n    } catch (e) {\r\n        // url is not absolut\r\n        url = new URL(this, document.baseURI);\r\n    }\r\n\r\n    return url;\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/extensions/StringExtensions.ts","/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs.\r\n */\r\nexport * from \"./broadcaster.service\";\r\nexport * from \"./umbraco-ajax-Service\";\r\nexport * from \"./config.service\";\r\nexport * from \"./ServiceEvent.service\";\r\n\r\n// Export modules\r\nexport * from \"./blueleet-umbraco.module\";\r\nexport * from \"./modules/commonDirectives/module\";\r\nexport * from \"./modules/inline-editor/module\";\r\nexport * from \"./modules/widgets/module\";\r\nexport * from \"./modules/language/module\";\r\nexport * from \"./modules/language/translator.service\";\r\nexport * from \"./modules/cache/module\";\r\nexport * from \"./modules/search/module\";\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/index.ts","import { Inject, Injectable, forwardRef } from \"@angular/core\";\r\nimport { CookieService } from \"angular2-cookie/core\";\r\nconst storageAvailable = require(\"storage-available\");\r\n\r\nexport enum CacheType {\r\n    Session,\r\n    Local,\r\n    Cookie\r\n}\r\n\r\nexport interface ICacheProvider {\r\n    /**\r\n     * Prefix for all cache keys\r\n     */\r\n    cachePrefix: string;\r\n\r\n    /**\r\n     * Suffix for the key name on the expiration items in localStorage\r\n     */\r\n    cacheSuffix: string;\r\n\r\n    /**\r\n     * Expiration date radix (set to Base-36 for most space savings)\r\n     */\r\n    expiryRadix: number;\r\n\r\n    /**\r\n     * Gets (and adds if necessary) an item from the cache with all of the default parameters\r\n     * @param cacheKey\r\n     * @param getCacheItem\r\n     * @param expireDate\r\n     * @param storageType\r\n     */\r\n    getCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, expireDate?: Date): Promise<any>;\r\n\r\n    insertCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, expireDate?: Date): void;\r\n\r\n    removeCacheItem(cacheKey: string): void;\r\n}\r\n\r\nexport interface ICacheService {\r\n    sessionCache: SessionStorageCacheProvider;\r\n    localCache: LocalStorageCacheProvider;\r\n    cookieCache: CookieCacheService;\r\n\r\n    /**\r\n     * Gets (and adds if necessary) an item from the cache with all of the default parameters\r\n     * @param cacheKey\r\n     * @param getCacheItem\r\n     * @param expireDate\r\n     * @param storageType\r\n     */\r\n    getCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, cacheType?: CacheType, expireDate?: Date): Promise<any>;\r\n\r\n    insertCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, cacheType?: CacheType, expireDate?: Date): void;\r\n}\r\n\r\nexport abstract class CacheProviderBase implements ICacheProvider {\r\n    /**\r\n     * Prefix for all cache keys\r\n     */\r\n    public cachePrefix: string = \"bl-\";\r\n\r\n    /**\r\n     * Suffix for the key name on the expiration items in localStorage\r\n     */\r\n    public cacheSuffix: string = \"-cacheExpiration\";\r\n\r\n    /**\r\n     * Expiration date radix (set to Base-36 for most space savings)\r\n     */\r\n    public expiryRadix: number = 10;\r\n\r\n    /**\r\n     * Gets (and adds if necessary) an item from the cache with all of the default parameters\r\n     * @param cacheKey\r\n     * @param getCacheItem\r\n     * @param expireDate\r\n     * @param storageType\r\n     */\r\n    abstract getCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, expireDate?: Date): Promise<any>;\r\n\r\n    abstract insertCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, expireDate?: Date): void;\r\n\r\n    abstract removeCacheItem(cacheKey: string): void;\r\n}\r\n\r\nexport abstract class WindowStorageCacheProviderBase extends CacheProviderBase {\r\n    public isSupported: boolean;\r\n\r\n    constructor(protected storage: Storage, protected storageSupported: boolean) {\r\n        super();\r\n\r\n        this.isSupported = storageSupported;\r\n    }\r\n\r\n    getCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, expireDate?: Date): Promise<any> {\r\n        if (this.storageSupported === false) {\r\n            return Promise.resolve(null);\r\n        }\r\n\r\n        const item = this.storage.getItem(cacheKey);\r\n        if (item === null) {\r\n            return getCacheItem().then(value => {\r\n                let entry = { data: value, expire: expireDate };\r\n                this.storage.setItem(cacheKey, JSON.stringify(entry));\r\n\r\n                return value;\r\n            });\r\n        }\r\n\r\n        try {\r\n            let entry = JSON.parse(item);\r\n\r\n            /* return entry as is if not expired. */\r\n            if (!entry.data && !entry.expire) {\r\n                return Promise.resolve(entry);\r\n            }\r\n\r\n            const { data, expire } = entry;\r\n            const now = new Date();\r\n            const expiration = new Date(expire);\r\n\r\n            if (expire !== -1 && now.getTime() > expiration.getTime()) {\r\n                this.storage.removeItem(cacheKey);\r\n\r\n                return getCacheItem().then(value => {\r\n                    entry = { data: value, expire: expireDate };\r\n                    this.storage.setItem(cacheKey, JSON.stringify(entry));\r\n\r\n                    return value;\r\n                });\r\n            }\r\n\r\n            return Promise.resolve(data);\r\n        } catch (e) {\r\n            /* return item as is if not an object. */\r\n            return Promise.resolve(item);\r\n        }\r\n    }\r\n\r\n    insertCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, expireDate?: Date): void {\r\n        if (this.storageSupported === false) {\r\n            return;\r\n        }\r\n\r\n        getCacheItem().then(value => {\r\n            const entry = { data: value, expire: expireDate };\r\n            window.sessionStorage.setItem(cacheKey, JSON.stringify(entry));\r\n\r\n            return value;\r\n        });\r\n    }\r\n\r\n    removeCacheItem(cacheKey: string): void {\r\n        if (this.storageSupported === false) {\r\n            return;\r\n        }\r\n\r\n        this.storage.removeItem(cacheKey);\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class CacheService implements ICacheService {\r\n    sessionCache: SessionStorageCacheProvider;\r\n    localCache: LocalStorageCacheProvider;\r\n    cookieCache: CookieCacheService;\r\n\r\n    constructor(\r\n        @Inject(forwardRef(() => SessionStorageCacheProvider)) sessionCache: SessionStorageCacheProvider,\r\n        @Inject(forwardRef(() => LocalStorageCacheProvider)) localCache: LocalStorageCacheProvider,\r\n        @Inject(forwardRef(() => CookieCacheService)) cookieCache: CookieCacheService) {\r\n        this.sessionCache = sessionCache;\r\n        this.localCache = localCache;\r\n        this.cookieCache = cookieCache;\r\n    }\r\n\r\n    getCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, cacheType: CacheType = CacheType.Session, expireDate?: Date): Promise<any> {\r\n        if (cacheType === CacheType.Local && this.localCache.isSupported) {\r\n            return this.localCache.getCacheItem(cacheKey, getCacheItem, expireDate);\r\n        } else if (cacheType === CacheType.Session && this.sessionCache.isSupported) {\r\n            return this.sessionCache.getCacheItem(cacheKey, getCacheItem, expireDate);\r\n        } else {\r\n            return this.cookieCache.getCacheItem(cacheKey, getCacheItem, expireDate);\r\n        }\r\n    }\r\n\r\n    insertCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, cacheType: CacheType = CacheType.Session, expireDate?: Date): void {\r\n        if (cacheType === CacheType.Local && this.localCache.isSupported) {\r\n            return this.localCache.insertCacheItem(cacheKey, getCacheItem, expireDate);\r\n        } else if (cacheType === CacheType.Session && this.sessionCache.isSupported) {\r\n            return this.sessionCache.insertCacheItem(cacheKey, getCacheItem, expireDate);\r\n        } else {\r\n            return this.cookieCache.insertCacheItem(cacheKey, getCacheItem, expireDate);\r\n        }\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class SessionStorageCacheProvider extends WindowStorageCacheProviderBase {\r\n    constructor( @Inject(CookieService) protected cookieService: CookieService) {\r\n        super(window.sessionStorage, storageAvailable(\"sessionStorage\"));\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class LocalStorageCacheProvider extends WindowStorageCacheProviderBase {\r\n    constructor( @Inject(CookieService) protected cookieService: CookieService) {\r\n        super(window.localStorage, storageAvailable(\"localStorage\"));\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class CookieCacheService extends CacheProviderBase {\r\n    constructor( @Inject(CookieService) protected cookieService: CookieService) {\r\n        super();\r\n    }\r\n\r\n    getCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, expireDate: Date = null): Promise<any> {\r\n        let item = this.cookieService.getObject(`${this.cachePrefix}:${cacheKey}`);\r\n        if (item === undefined || item === null) {\r\n            return getCacheItem().then(value => {\r\n                if (expireDate) {\r\n                    this.cookieService.putObject(`${this.cachePrefix}:${cacheKey}`, value, { expires: expireDate });\r\n                } else {\r\n                    this.cookieService.putObject(`${this.cachePrefix}:${cacheKey}`, value);\r\n                }\r\n\r\n                return value;\r\n            });\r\n        }\r\n\r\n        return Promise.resolve(item);\r\n    }\r\n\r\n    insertCacheItem(cacheKey: string, getCacheItem: () => Promise<any>, expireDate: Date = null): void {\r\n        getCacheItem().then(value => {\r\n            if (expireDate) {\r\n                this.cookieService.putObject(`${this.cachePrefix}:${cacheKey}`, value, { expires: expireDate });\r\n            } else {\r\n                this.cookieService.putObject(`${this.cachePrefix}:${cacheKey}`, value);\r\n            }\r\n        });\r\n    }\r\n\r\n    removeCacheItem(cacheKey: string): void {\r\n        this.cookieService.remove(`${this.cachePrefix}:${cacheKey}`);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/cache/cache.service.ts","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { CacheService, SessionStorageCacheProvider, LocalStorageCacheProvider, CookieCacheService } from \"./cache.service\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [],\r\n    providers: [CacheService, SessionStorageCacheProvider, LocalStorageCacheProvider, CookieCacheService]\r\n})\r\nexport class CacheModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/cache/module.ts","import { Directive, ElementRef, Inject, Input, OnChanges, SimpleChanges, AfterContentInit, AfterContentChecked } from \"@angular/core\";\r\nimport { FocusService } from \"./focus.service\";\r\n\r\n@Directive({ selector: \"[focuser]\" })\r\nexport class FocuserDirective implements OnChanges, AfterContentInit, AfterContentChecked {\r\n    @Input() focuser: boolean = false; // focus this element when \"OnChange\" or \"AfterContentChecked\" is triggered if this is set to true.\r\n    hasFocus: boolean;\r\n\r\n    private contentChecked: boolean = null;\r\n\r\n    constructor( @Inject(ElementRef) private element: ElementRef, @Inject(FocusService) private focusService: FocusService) { }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        let focus = changes[\"focuser\"];\r\n\r\n        // We only wants to focus if the previous value was false.\r\n        if (focus.currentValue && focus.previousValue === false) {\r\n            this.focusService.focus(this.element);\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.focusService.register(this, this.element);\r\n    }\r\n\r\n    ngAfterContentChecked(): void {\r\n        if (this.focuser) {\r\n            // We need to track if this is the first call to content checked.\r\n            if (this.contentChecked === null) {\r\n                this.contentChecked = false;\r\n                return;\r\n            }\r\n\r\n            // If content checked is set to false we run the focus else do nothing.\r\n            if (this.contentChecked === false) {\r\n                this.contentChecked = true;\r\n                this.focusService.focus(this.element);\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/commonDirectives/focus.directive.ts","import { Injectable, ElementRef } from \"@angular/core\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport { FocuserDirective as FocusDirective } from \"./focus.directive\";\r\n\r\n@Injectable()\r\nexport class FocusService {\r\n    focusDirectives: { focusDir: FocusDirective, element: ElementRef }[] = [];\r\n\r\n    public register(focusDir: FocusDirective, element: ElementRef) {\r\n        this.focusDirectives.push({ focusDir, element });\r\n    }\r\n\r\n    public focus(element: ElementRef) {\r\n        this.focusDirectives.forEach((value) => {\r\n            if (element === value.element) {\r\n                this.doFocus(value);\r\n            }\r\n        });\r\n    }\r\n\r\n    public reFocus() {\r\n        this.focusDirectives.forEach((value) => {\r\n            if (value.focusDir.hasFocus) {\r\n                value.element.nativeElement.focus(); // Trigger a focus.\r\n            }\r\n        });\r\n    }\r\n\r\n    private doFocus(item: { focusDir: FocusDirective, element: ElementRef }) {\r\n        // Reset all hasFocus to false exept item\r\n        this.focusDirectives.forEach((value) => {\r\n            if (item !== value) {\r\n                value.focusDir.hasFocus = false;\r\n                value.focusDir.focuser = false;\r\n            }\r\n        });\r\n\r\n        item.element.nativeElement.focus(); // Trigger the focus.\r\n        item.focusDir.focuser = true; // Ensure item focus is true.\r\n        item.focusDir.hasFocus = true; // Ensure item hasFocus is true.\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/commonDirectives/focus.service.ts","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { FocuserDirective } from \"./focus.directive\";\r\nimport { ScrollToDirective } from \"./scrollTo.directive\";\r\nimport { WaypointStickyDirective } from \"./waypointSticky.directive\";\r\nimport { ShowAtScrollDirective } from \"./showAtScroll.directive\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [FocuserDirective, ScrollToDirective, WaypointStickyDirective, ShowAtScrollDirective],\r\n    declarations: [FocuserDirective, ScrollToDirective, WaypointStickyDirective, ShowAtScrollDirective]\r\n})\r\nexport class CommonDirectivesModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/commonDirectives/module.ts","import { Directive, HostListener, ElementRef, Inject, Input, Renderer, OnInit } from \"@angular/core\";\r\nimport * as $ from \"jquery\";\r\nconst _ = require(\"lodash\");\r\n\r\n@Directive({ selector: \"[scroll-to]\" })\r\nexport class ScrollToDirective implements OnInit {\r\n    @Input(\"scroll-to\") scrollTo: string;\r\n    @Input(\"scroll-duration\") scrollDuration: number = 1000;\r\n\r\n    element: JQuery;\r\n\r\n    constructor( @Inject(ElementRef) public elementRef: ElementRef, @Inject(Renderer) public renderer: Renderer) { }\r\n\r\n    @HostListener(\"click\", [\"$event\"])\r\n    onClick(event) {\r\n        event.preventDefault();\r\n        let scrollOptions: any = null;\r\n\r\n        if (Object.isNotNullOrUndefined(this.scrollTo) && this.scrollTo !== \"\") {\r\n            if (_.isNumber(this.scrollTo)) {\r\n                scrollOptions = {\r\n                    scrollTop: this.scrollTo\r\n                };\r\n            } else {\r\n                const target = $(this.scrollTo);\r\n                if (target.length) {\r\n                    scrollOptions = {\r\n                        scrollTop: target.offset().top\r\n                    };\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!scrollOptions) {\r\n            // If we get here just scroll until this element is no longer in the viewport\r\n            let offset = this.element.offset();\r\n            let bottom = offset.top + this.element.outerHeight();\r\n\r\n            scrollOptions = {\r\n                scrollTop: bottom\r\n            };\r\n        }\r\n\r\n        $(\"html, body\").stop().animate(scrollOptions, this.scrollDuration);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.element = $(this.elementRef.nativeElement);\r\n        if (!this.scrollTo) {\r\n            const href = this.element.attr(\"href\");\r\n            if (href.startsWith(\"#\")) {\r\n                this.scrollTo = href;\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/commonDirectives/scrollTo.directive.ts","import { Directive, TemplateRef, ViewContainerRef, Inject, Input, OnInit } from \"@angular/core\";\r\nimport * as Rx from \"rxjs\";\r\n\r\n@Directive({ selector: \"[showAtScroll]\" })\r\nexport class ShowAtScrollDirective implements OnInit {\r\n    public onStateChange: Rx.BehaviorSubject<boolean> = new Rx.BehaviorSubject<boolean>(false);\r\n    public isVisible: boolean = false;\r\n\r\n    private hasView: boolean = false;\r\n    @Input() private showAtScroll: number;\r\n\r\n    constructor( @Inject(TemplateRef) private templateRef: TemplateRef<any>, @Inject(ViewContainerRef) private viewContainer: ViewContainerRef) { }\r\n\r\n    onWindowScroll() {\r\n        let scrollTop = $(window).scrollTop();\r\n\r\n        if (scrollTop < 0) {\r\n            scrollTop = 0;\r\n        }\r\n\r\n        if (scrollTop > $(\"body\").height() - $(window).height()) {\r\n            scrollTop = $(\"body\").height() - $(window).height();\r\n        }\r\n\r\n        // console.log($(window).scrollTop(), scrollTop);\r\n        this.isVisible = scrollTop > this.showAtScroll;\r\n        this.onStateChange.next(this.isVisible);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.viewContainer.clear();\r\n        this.hasView = false;\r\n        this.onStateChange.subscribe((showView) => {\r\n            if (showView && !this.hasView) {\r\n                this.hasView = true;\r\n                this.viewContainer.createEmbeddedView(this.templateRef);\r\n            } else if (!showView && this.hasView) {\r\n                this.hasView = false;\r\n                this.viewContainer.clear();\r\n            }\r\n        });\r\n\r\n        // Check if we should show this view or not after the view has initialized.\r\n        this.onWindowScroll();\r\n\r\n        Rx.Observable.fromEvent(window, \"scroll\").throttle(() => { return this.onStateChange; }).subscribe(() => {\r\n            this.onWindowScroll();\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/commonDirectives/showAtScroll.directive.ts","import { Directive, HostListener, HostBinding, ElementRef, Inject, Input, Renderer, OnInit, ContentChildren, QueryList } from \"@angular/core\";\r\nimport * as $ from \"jquery\";\r\nimport * as Rx from \"rxjs\";\r\nconst _ = require(\"lodash\");\r\nrequire(\"waypoints/lib/jquery.waypoints.js\");\r\nrequire(\"waypoints/lib/shortcuts/sticky.js\");\r\ndeclare const Waypoint: any;\r\n\r\n@Directive({ selector: \"[waypoint-sticky]\" })\r\nexport class WaypointStickyDirective implements OnInit {\r\n    @Input(\"waypoint-sticky\") options: { top: string, bottom: string, scrolledClass: string, stuckClass: string };\r\n\r\n    scrolled: boolean = false;\r\n    scrollTopBoundry: number = 10;\r\n\r\n    private scrollEventLock: Rx.BehaviorSubject<any> = new Rx.BehaviorSubject(null);\r\n    private prevScrollTop: number = $(window).scrollTop();\r\n\r\n    constructor( @Inject(ElementRef) protected elementRef: ElementRef, @Inject(Renderer) protected renderer: Renderer) { }\r\n\r\n    ngOnInit(): void {\r\n        const self = this;\r\n        this.options = _.extend({}, { bottom: \"\", top: \"\", scrolledClass: \"scrolled\", stuckClass: \"stuck\" }, this.options);\r\n\r\n        let el = $(this.elementRef.nativeElement);\r\n        let offset = el.position().top;\r\n\r\n        // ReSharper disable once UnusedLocals\r\n        const sticky = new Waypoint.Sticky({\r\n            element: $(this.elementRef.nativeElement)[0],\r\n            stuckClass: this.options.stuckClass\r\n        });\r\n\r\n        (<any>$(\"body\")).waypoint({\r\n            offset: -(this.scrollTopBoundry + offset),\r\n            handler() {\r\n                // add / remove scrolled class\r\n                el.toggleClass(self.options.scrolledClass);\r\n\r\n                // remove swatch class\r\n                let prefix = \"swatch-\";\r\n                let classes = el[0].className.split(\" \").filter(c => c.lastIndexOf(prefix, 0) !== 0);\r\n                el[0].className = classes.join(\" \");\r\n                // add back swatch class depending on direction above / below scroll point\r\n                // menuContainer.addClass(oxyThemeData.navbarScrolledSwatches[direction]);\r\n\r\n                el.one(\"MSTransitionEnd webkitTransitionEnd oTransitionEnd transitionend\", () => {\r\n                    // refresh waypoints only once transition ends in order to get correct offsets for sections.\r\n                    if (!el.hasClass(\"refreshing\")) {\r\n                        Waypoint.refreshAll();\r\n                    }\r\n                    el.toggleClass(\"refreshing\");\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/commonDirectives/waypointSticky.directive.ts","import { NgZone, Component, TemplateRef, forwardRef, Input, OnInit, AfterContentInit, Output, EventEmitter, ElementRef, ViewChild, Renderer } from \"@angular/core\";\r\nimport { InlineEditorComponent } from \"../../inline-editor.component\";\r\nimport { MakeProvider } from \"../../../../abstraction/AbstractValueAccessor\";\r\nimport { CapitalizePipe } from \"../../../../pipes/capitalize.pipe\";\r\nimport { InlineEditorContextService, InlineEditorGroupContextService } from \"../../services/InlineEditorContext.service\";\r\nimport { FocusService } from \"../../../commonDirectives/focus.service\";\r\n\r\n@Component({\r\n    selector: \"inline-datetime-editor\",\r\n    template: require(\"../editor-base.html\") + require(\"./datetime.html\"),\r\n    styles: [require(\"../../inline-editor.scss\").toString()],\r\n    providers: [MakeProvider(InlineDatetimeComponent), { provide: InlineEditorComponent, useExisting: forwardRef(() => InlineDatetimeComponent), multi: true }, CapitalizePipe, InlineEditorContextService, FocusService]\r\n})\r\nexport class InlineDatetimeComponent extends InlineEditorComponent {\r\n    constructor(\r\n        protected element: ElementRef,\r\n        protected renderer: Renderer,\r\n        protected zone: NgZone,\r\n        protected contextService: InlineEditorContextService,\r\n        protected contextGroupService: InlineEditorGroupContextService) {\r\n        super(element, renderer, zone, contextService, contextGroupService);\r\n    }\r\n\r\n    // Method to display the editable value as text and emit save event to host\r\n    public onSubmit(value = this.value) {\r\n        super.onSubmit(value);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/editors/datetime/datetime.component.ts","module.exports = \"<ng-template #DefaultPresentation>\\r\\n    <div *ngIf=\\\"!editing\\\">\\r\\n        <a [ngClass]=\\\"{'editable-empty': isEmpty }\\\" (click)=\\\"edit(value)\\\">{{ presentControl() }}</a>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<ng-template #DefaultEdit>\\r\\n    <input #inlineEditControl class=\\\"form-control\\\" (blur)=\\\"onTouched()\\\" (focusout)=\\\"onTouched()\\\" [value]=\\\"value\\\" (input)=\\\"value = $event.target.value\\\" [required]=\\\"required\\\"\\r\\n           type=\\\"datetime\\\" [disabled]=\\\"disabled\\\" [name]=\\\"name\\\" [(focuser)]=\\\"focusThis\\\" />\\r\\n</ng-template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/editors/datetime/datetime.html\n// module id = ./src/typescript/blueleet/modules/inline-editor/editors/datetime/datetime.html\n// module chunks = 3","module.exports = \"<ng-template *ngIf=\\\"showPresentation()\\\" [ngTemplateOutlet]=\\\"this.presentationTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\"></ng-template>\\r\\n\\r\\n<div class=\\\"inlineEditForm\\\" *ngIf=\\\"showEdit() && !openInModal\\\">\\r\\n    <div class=\\\"form-group\\\" [class.row]=\\\"formHorizontal\\\">\\r\\n        <ng-template [ngTemplateOutlet]=\\\"this.editTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\">\\r\\n        </ng-template>\\r\\n        <div *ngIf=\\\"showButtons\\\" class=\\\"btn-group\\\" role=\\\"saveOrCancel\\\" aria-label=\\\"save or cancel\\\">\\r\\n            <button [disabled]=\\\"invalid\\\" class=\\\"btn btn-sm btn-primary\\\" (click)=\\\"onSubmit(value)\\\"><span class=\\\"fa fa-check\\\"></span></button>\\r\\n            <button class=\\\"btn btn-sm btn-danger\\\" (click)=\\\"cancel()\\\"><span class=\\\"fa fa-remove\\\"></span></button>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<div *ngIf=\\\"openInModal\\\" bsModal #editModal=\\\"bs-modal\\\" #editModalRef (onShown)=\\\"onModalShown()\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"edit\\\" aria-hidden=\\\"true\\\">\\r\\n    <div class=\\\"modal-dialog\\\">\\r\\n        <div class=\\\"modal-content\\\">\\r\\n            <div class=\\\"modal-header\\\">\\r\\n                <h4 class=\\\"modal-title pull-left\\\">Redigera</h4>\\r\\n                <button class=\\\"close\\\" (click)=\\\"cancel()\\\"><span aria-hidden=\\\"true\\\">&times;</span><span class=\\\"sr-only\\\">Stäng</span></button>\\r\\n            </div>\\r\\n            <div class=\\\"modal-body\\\">\\r\\n                <ng-template [ngTemplateOutlet]=\\\"this.editTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\">\\r\\n                </ng-template>\\r\\n            </div>\\r\\n            <div class=\\\"modal-footer\\\">\\r\\n                <button class=\\\"btn btn-secondary\\\" (click)=\\\"cancel()\\\"><span class=\\\"fa fa-remove\\\"></span> Avbryt</button>\\r\\n                <button [disabled]=\\\"invalid\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onSubmit(value)\\\"><span class=\\\"fa fa-check\\\"></span> Spara</button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/editors/editor-base.html\n// module id = ./src/typescript/blueleet/modules/inline-editor/editors/editor-base.html\n// module chunks = 3","import { NgZone, Component, TemplateRef, forwardRef, Input, OnInit, AfterContentInit, Output, EventEmitter, ElementRef, ViewChild, Renderer } from \"@angular/core\";\r\nimport { InlineEditorComponent } from \"../../inline-editor.component\";\r\nimport { MakeProvider } from \"../../../../abstraction/AbstractValueAccessor\";\r\nimport { CapitalizePipe } from \"../../../../pipes/capitalize.pipe\";\r\nimport { InlineEditorContextService, InlineEditorGroupContextService } from \"../../services/InlineEditorContext.service\";\r\nimport { FocusService } from \"../../../commonDirectives/focus.service\";\r\nconst numericTypes: string[] = [\"range\", \"number\"];\r\n\r\n@Component({\r\n    selector: \"inline-numeric-editor\",\r\n    template: require(\"../editor-base.html\") + require(\"./numeric.html\"),\r\n    styles: [require(\"../../inline-editor.scss\").toString()],\r\n    providers: [MakeProvider(InlineNumericComponent), { provide: InlineEditorComponent, useExisting: forwardRef(() => InlineNumericComponent), multi: true }, CapitalizePipe, InlineEditorContextService, FocusService]\r\n})\r\nexport class InlineNumericComponent extends InlineEditorComponent {\r\n    @Input() public min: number = 1;\r\n    @Input() public max: number = Infinity;\r\n    type: string = \"number\";\r\n\r\n    constructor(protected element: ElementRef, protected renderer: Renderer, protected zone: NgZone, protected contextService: InlineEditorContextService, protected contextGroupService: InlineEditorGroupContextService) {\r\n        super(element, renderer, zone, contextService, contextGroupService);\r\n    }\r\n\r\n    // Method to display the editable value as text and emit save event to host\r\n    public onSubmit(value = this.value) {\r\n        // This is for the range editor.\r\n        const length = (numericTypes.indexOf(this.type) !== -1) ? Number(value) : value.length;\r\n        if (length < this.min || length > this.max) {\r\n        }\r\n\r\n        super.onSubmit(value);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/editors/numeric/numeric.component.ts","module.exports = \"<ng-template #DefaultPresentation>\\r\\n    <div *ngIf=\\\"!editing\\\">\\r\\n        <a [ngClass]=\\\"{'editable-empty': isEmpty }\\\" (click)=\\\"edit(value)\\\">{{ presentControl() }}</a>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<ng-template #DefaultEdit>\\r\\n    <input #inlineEditControl class=\\\"form-control\\\" [value]=\\\"value\\\" (input)=\\\"value = $event.target.value\\\" [required]=\\\"required\\\"\\r\\n           (blur)=\\\"onTouched()\\\" (focusout)=\\\"onTouched()\\\"\\r\\n           type=\\\"range\\\" [disabled]=\\\"disabled\\\" [max]=\\\"max\\\" [min]=\\\"min\\\" [name]=\\\"name\\\" [(focuser)]=\\\"focusThis\\\" />\\r\\n</ng-template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/editors/numeric/numeric.html\n// module id = ./src/typescript/blueleet/modules/inline-editor/editors/numeric/numeric.html\n// module chunks = 3","import { NgZone, Component, TemplateRef, forwardRef, Input, OnInit, AfterContentInit, Output, EventEmitter, ElementRef, ViewChild, Renderer } from \"@angular/core\";\r\nimport { InlineEditorComponent } from \"../../inline-editor.component\";\r\nimport { MakeProvider } from \"../../../../abstraction/AbstractValueAccessor\";\r\nimport { CapitalizePipe } from \"../../../../pipes/capitalize.pipe\";\r\nimport { InlineEditorContextService, InlineEditorGroupContextService } from \"../../services/InlineEditorContext.service\";\r\nimport { FocusService } from \"../../../commonDirectives/focus.service\";\r\n\r\n@Component({\r\n    selector: \"inline-password-editor\",\r\n    template: require(\"../editor-base.html\") + require(\"./password.html\"),\r\n    styles: [require(\"../../inline-editor.scss\").toString()],\r\n    providers: [MakeProvider(InlinePasswordComponent), { provide: InlineEditorComponent, useExisting: forwardRef(() => InlinePasswordComponent), multi: true }, CapitalizePipe, InlineEditorContextService, FocusService]\r\n})\r\nexport class InlinePasswordComponent extends InlineEditorComponent {\r\n    constructor(protected element: ElementRef, protected renderer: Renderer, protected zone: NgZone, protected contextService: InlineEditorContextService, protected contextGroupService: InlineEditorGroupContextService) {\r\n        super(element, renderer, zone, contextService, contextGroupService);\r\n    }\r\n\r\n    // Method to display the editable value as text and emit save event to host\r\n    public onSubmit(value = this.value) {\r\n        super.onSubmit(value);\r\n    }\r\n\r\n    presentControl(): string {\r\n        return \"*\".repeat(this.value.length);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/editors/password/password.component.ts","module.exports = \"<ng-template #DefaultPresentation>\\r\\n    <div *ngIf=\\\"!editing\\\">\\r\\n        <a [ngClass]=\\\"{'editable-empty': isEmpty }\\\" (click)=\\\"edit(value)\\\">{{ presentControl() }}</a>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<ng-template #DefaultEdit>\\r\\n    <input #inlineEditControl class=\\\"form-control\\\" [value]=\\\"value\\\" (input)=\\\"value = $event.target.value\\\" [required]=\\\"required\\\"\\r\\n           (blur)=\\\"onTouched()\\\" (focusout)=\\\"onTouched()\\\"\\r\\n           type=\\\"password\\\" [disabled]=\\\"disabled\\\" [name]=\\\"name\\\" [placeholder]=\\\"placeholder\\\" [size]=\\\"size\\\" [(focuser)]=\\\"focusThis\\\" />\\r\\n</ng-template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/editors/password/password.html\n// module id = ./src/typescript/blueleet/modules/inline-editor/editors/password/password.html\n// module chunks = 3","import { NgZone, Component, TemplateRef, forwardRef, Input, OnInit, AfterContentInit, Output, EventEmitter, ElementRef, ViewChild, Renderer } from \"@angular/core\";\r\nimport { InlineEditorComponent } from \"../../inline-editor.component\";\r\nimport { MakeProvider } from \"../../../../abstraction/AbstractValueAccessor\";\r\nimport { CapitalizePipe } from \"../../../../pipes/capitalize.pipe\";\r\nimport { InlineEditorContextService, InlineEditorGroupContextService } from \"../../services/InlineEditorContext.service\";\r\nimport { FocusService } from \"../../../commonDirectives/focus.service\";\r\n\r\n@Component({\r\n    selector: \"inline-select-editor\",\r\n    template: require(\"../editor-base.html\") + require(\"./select.html\"),\r\n    styles: [require(\"../../inline-editor.scss\").toString()],\r\n    providers: [MakeProvider(InlineSelectComponent), { provide: InlineEditorComponent, useExisting: forwardRef(() => InlineSelectComponent), multi: true }, CapitalizePipe, InlineEditorContextService, FocusService]\r\n})\r\nexport class InlineSelectComponent extends InlineEditorComponent {\r\n    protected $options$;\r\n\r\n    constructor(\r\n        protected element: ElementRef,\r\n        protected renderer: Renderer,\r\n        protected zone: NgZone,\r\n        protected contextService: InlineEditorContextService,\r\n        protected contextGroupService: InlineEditorGroupContextService) {\r\n        super(element, renderer, zone, contextService, contextGroupService);\r\n    }\r\n\r\n    public get options() { return this.$options$; }\r\n\r\n    @Input()\r\n    public set options(options) {\r\n        this.$options$ = options;\r\n    }\r\n\r\n    // Method to display the editable value as text and emit save event to host\r\n    public onSubmit(value = this.value) {\r\n        super.onSubmit(value);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/editors/select/select.component.ts","module.exports = \"<ng-template #DefaultPresentation>\\r\\n    <div *ngIf=\\\"!editing\\\">\\r\\n        <a [ngClass]=\\\"{'editable-empty': isEmpty }\\\" (click)=\\\"edit(value)\\\">{{ presentControl() }}</a>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<ng-template #DefaultEdit>\\r\\n    <select #inlineEditControl class=\\\"form-control\\\" [value]=\\\"value\\\" (change)=\\\"value = $event.target.value\\\" (blur)=\\\"onTouched()\\\" (focusout)=\\\"onTouched()\\\" [(focuser)]=\\\"focusThis\\\">\\r\\n        <option *ngFor=\\\"let opt of options\\\" [value]=\\\"opt\\\">{{opt}}</option>\\r\\n    </select>\\r\\n</ng-template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/editors/select/select.html\n// module id = ./src/typescript/blueleet/modules/inline-editor/editors/select/select.html\n// module chunks = 3","import { NgZone, Component, TemplateRef, forwardRef, Input, OnInit, AfterContentInit, Output, EventEmitter, ElementRef, ViewChild, Renderer } from \"@angular/core\";\r\nimport { InlineEditorComponent } from \"../../inline-editor.component\";\r\nimport { MakeProvider } from \"../../../../abstraction/AbstractValueAccessor\";\r\nimport { CapitalizePipe } from \"../../../../pipes/capitalize.pipe\";\r\nimport { InlineEditorContextService, InlineEditorGroupContextService } from \"../../services/InlineEditorContext.service\";\r\nimport { FocusService } from \"../../../commonDirectives/focus.service\";\r\n\r\n@Component({\r\n    selector: \"inline-text-editor\",\r\n    template: require(\"../editor-base.html\") + require(\"./text.html\"),\r\n    styles: [require(\"../../inline-editor.scss\").toString()],\r\n    providers: [MakeProvider(InlineTextComponent), { provide: InlineEditorComponent, useExisting: forwardRef(() => InlineTextComponent), multi: true }, CapitalizePipe, InlineEditorContextService, FocusService]\r\n})\r\nexport class InlineTextComponent extends InlineEditorComponent {\r\n    constructor(protected element: ElementRef,\r\n        protected renderer: Renderer,\r\n        protected zone: NgZone,\r\n        protected contextService: InlineEditorContextService,\r\n        protected contextGroupService: InlineEditorGroupContextService) {\r\n        super(element, renderer, zone, contextService, contextGroupService);\r\n    }\r\n\r\n    // Method to display the editable value as text and emit save event to host\r\n    public onSubmit(value = this.value) {\r\n        super.onSubmit(value);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/editors/text/text.component.ts","module.exports = \"<ng-template #DefaultPresentation>\\r\\n    <div *ngIf=\\\"!editing\\\">\\r\\n        <a [ngClass]=\\\"{'editable-empty': isEmpty }\\\" (click)=\\\"edit(value)\\\">{{ presentControl() }}</a>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<ng-template #DefaultEdit>\\r\\n    <input #inlineEditControl class=\\\"form-control\\\" id=\\\"inline-editor-{{ this.name }}\\\" [value]=\\\"value\\\" (input)=\\\"value = $event.target.value\\\"\\r\\n           (blur)=\\\"onTouched()\\\" (focusout)=\\\"onTouched()\\\"\\r\\n           [required]=\\\"required\\\" [disabled]=\\\"disabled\\\" [name]=\\\"name\\\" [placeholder]=\\\"placeholder\\\" [(focuser)]=\\\"focusThis\\\" />\\r\\n</ng-template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/editors/text/text.html\n// module id = ./src/typescript/blueleet/modules/inline-editor/editors/text/text.html\n// module chunks = 3","import { NgZone, Component, TemplateRef, forwardRef, Input, OnInit, AfterContentInit, Output, EventEmitter, ElementRef, ViewChild, Renderer } from \"@angular/core\";\r\nimport { InlineEditorComponent } from \"../../inline-editor.component\";\r\nimport { MakeProvider } from \"../../../../abstraction/AbstractValueAccessor\";\r\nimport { CapitalizePipe } from \"../../../../pipes/capitalize.pipe\";\r\nimport { InlineEditorContextService, InlineEditorGroupContextService } from \"../../services/InlineEditorContext.service\";\r\nimport { FocusService } from \"../../../commonDirectives/focus.service\";\r\n\r\n@Component({\r\n    selector: \"inline-textarea-editor\",\r\n    template: require(\"../editor-base.html\") + require(\"./textarea.html\"),\r\n    styles: [require(\"../../inline-editor.scss\").toString()],\r\n    providers: [MakeProvider(InlineTextareaComponent), { provide: InlineEditorComponent, useExisting: forwardRef(() => InlineTextareaComponent), multi: true }, CapitalizePipe, InlineEditorContextService, FocusService]\r\n})\r\nexport class InlineTextareaComponent extends InlineEditorComponent {\r\n    @Input() public cols: number = 50;\r\n    @Input() public rows: number = 4;\r\n\r\n    constructor(protected element: ElementRef,\r\n        protected renderer: Renderer,\r\n        protected zone: NgZone,\r\n        protected contextService: InlineEditorContextService,\r\n        protected contextGroupService: InlineEditorGroupContextService) {\r\n        super(element, renderer, zone, contextService, contextGroupService);\r\n    }\r\n\r\n    // Method to display the editable value as text and emit save event to host\r\n    public onSubmit(value = this.value) {\r\n        super.onSubmit(value);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/editors/textarea/textarea.component.ts","module.exports = \"<ng-template #DefaultPresentation>\\r\\n    <div *ngIf=\\\"!editing\\\">\\r\\n        <a [ngClass]=\\\"{'editable-empty': isEmpty }\\\" (click)=\\\"edit(value)\\\">{{ presentControl() }}</a>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<ng-template #DefaultEdit>\\r\\n    <textarea [rows]=\\\"rows\\\" [cols]=\\\"cols\\\" #inlineEditControl class=\\\"form-control\\\" [value]=\\\"value\\\" (change)=\\\"value = $event.target.value\\\"\\r\\n              (blur)=\\\"onTouched()\\\" (focusout)=\\\"onTouched()\\\"\\r\\n              [required]=\\\"required\\\" [placeholder]=\\\"placeholder\\\" [disabled]=\\\"disabled\\\" [(focuser)]=\\\"focusThis\\\"></textarea>\\r\\n</ng-template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/editors/textarea/textarea.html\n// module id = ./src/typescript/blueleet/modules/inline-editor/editors/textarea/textarea.html\n// module chunks = 3","/**\r\n * @module\r\n * @description\r\n * Entry point for all inline editors.\r\n */\r\nimport { forwardRef } from \"@angular/core\";\r\nimport { MakeProvider } from \"../../abstraction/AbstractValueAccessor\";\r\nimport { InlineEditorContextService, InlineEditorGroupContextService } from \"./services/InlineEditorContext.service\";\r\nimport { InlineEditorGroupComponent, ButtonChangeComponent } from \"./inline-editor-group.component\";\r\nimport { InlineEditorComponent, RenderEditorComponent, PresentationStateComponent, EditStateComponent } from \"./inline-editor.component\";\r\nimport { InlineNumericComponent as NumericComponent } from \"./editors/numeric/numeric.component\";\r\nimport { InlineSelectComponent as SelectComponent } from \"./editors/select/select.component\";\r\nimport { InlineDatetimeComponent as DatetimeComponent } from \"./editors/datetime/datetime.component\";\r\nimport { InlinePasswordComponent as PasswordComponent } from \"./editors/password/password.component\";\r\nimport { InlineTextComponent as TextComponent } from \"./editors/text/text.component\";\r\nimport { InlineTextareaComponent as TextareaComponent } from \"./editors/textarea/textarea.component\";\r\n\r\n// exports\r\nexport * from \"./inline-editor-group.component\";\r\nexport * from \"./inline-editor.component\";\r\nexport * from \"./editors/datetime/datetime.component\";\r\nexport * from \"./editors/numeric/numeric.component\";\r\nexport * from \"./editors/password/password.component\";\r\nexport * from \"./editors/select/select.component\";\r\nexport * from \"./editors/text/text.component\";\r\nexport * from \"./editors/textarea/textarea.component\";\r\n\r\nexport function inizialize() {\r\n    const inlineEditors: any[] = [DatetimeComponent, NumericComponent, PasswordComponent, SelectComponent, TextComponent, TextareaComponent];\r\n    const editors: any[] = [InlineEditorGroupComponent, ButtonChangeComponent, RenderEditorComponent, PresentationStateComponent, EditStateComponent].concat(inlineEditors);\r\n    const editorProviders: any[] = [];\r\n    const exports = editors;\r\n\r\n    for (let editor of inlineEditors) {\r\n        let provider = MakeProvider(editor);\r\n\r\n        // Register a value accessor.\r\n        editorProviders.push(provider);\r\n\r\n        // Register a relation between base and implamentor.\r\n        editorProviders.push({ provide: InlineEditorComponent, useExisting: forwardRef(() => editor), multi: true });\r\n    }\r\n\r\n    editorProviders.push(InlineEditorContextService);\r\n    editorProviders.push(InlineEditorGroupContextService);\r\n\r\n    return { editors, editorProviders, exports };\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/index.ts","import { Component, TemplateRef, Input, OnInit, AfterContentInit, Output, EventEmitter, ElementRef, ContentChildren, ViewChild, Renderer, QueryList } from \"@angular/core\";\r\nimport { ModalDirective } from \"ngx-bootstrap\";\r\nimport { InlineEditorComponent } from \"./inline-editor.component\";\r\nimport { FocusService } from \"../commonDirectives/focus.service\";\r\nimport { InlineEditorGroupContextService } from \"./services/InlineEditorContext.service\";\r\nimport * as Rx from \"rxjs/Rx\";\r\n\r\nexport enum InlineEditorState {\r\n    Save,\r\n    Edit,\r\n    Cancel\r\n}\r\n\r\n@Component({\r\n    selector: \"button-change\",\r\n    template: `<button class=\"btn btn-default\" (click)=\"this.inlineEditorGroup.edit()\"><span class=\"fa fa-pencil\"></span> <ng-content></ng-content></button>`\r\n})\r\nexport class ButtonChangeComponent {\r\n    @Input() inlineEditorGroup: InlineEditorGroupComponent;\r\n}\r\n\r\n@Component({\r\n    selector: \"inline-editor-group\",\r\n    template: require(\"./inline-editor-group.html\"),\r\n    providers: [FocusService, InlineEditorGroupContextService]\r\n})\r\nexport class InlineEditorGroupComponent implements OnInit, AfterContentInit {\r\n    @ViewChild(\"editGroupModal\") public editGroupModal: ModalDirective;\r\n    @ContentChildren(InlineEditorComponent, { descendants: true }) public inlineEditors: QueryList<InlineEditorComponent>;\r\n\r\n    // Events\r\n    @Output() public onSave: EventEmitter<any> = new EventEmitter();\r\n    @Output() public onEdit: EventEmitter<any> = new EventEmitter();\r\n    @Output() public onCancel: EventEmitter<any> = new EventEmitter();\r\n\r\n    // Settings\r\n    @Input() public disableSave: boolean = false;\r\n    @Input() public openInModal: boolean = false;\r\n    @Input() public visible: boolean = true;\r\n\r\n    protected subjectStateChange: Rx.ReplaySubject<InlineEditorState> = new Rx.ReplaySubject(1);\r\n    public stateChange: Rx.Observable<InlineEditorState> = this.subjectStateChange.asObservable();\r\n\r\n    public editTemplates: TemplateRef<any>[] = [];\r\n\r\n    public isEditing: boolean = false;\r\n\r\n    constructor(protected element: ElementRef, protected renderer: Renderer, protected focusService: FocusService, protected contextGroupService: InlineEditorGroupContextService) { }\r\n\r\n    public ngAfterContentInit(): void {\r\n        if (this.contextGroupService.editorGroupInstance.value === null) {\r\n            this.inlineEditors.forEach((item) => {\r\n                item.openInModal = false;\r\n                item.showButtons = false;\r\n                item.showEditState = this.openInModal === false;\r\n                item.onSave = null;\r\n                item.onEdit = null;\r\n                item.onCancel = null;\r\n                item.onClick = () => { };\r\n                if (item.editing === false && this.isEditing) {\r\n                    item.edit();\r\n                }\r\n            });\r\n\r\n            this.contextGroupService.editorGroupInstance.next(this);\r\n        }\r\n    }\r\n\r\n    public ngOnInit() { }\r\n\r\n    public onShown() {\r\n        if (this.openInModal) {\r\n            this.focusService.reFocus();\r\n        }\r\n    }\r\n\r\n    public toggleGroupModal() {\r\n        if (this.editGroupModal.isShown) {\r\n            this.editGroupModal.hide();\r\n        } else {\r\n            this.editGroupModal.show();\r\n        }\r\n        this.inlineEditors.forEach((item) => {\r\n            item.editing = this.editGroupModal.isShown;\r\n        });\r\n    }\r\n\r\n    public edit() {\r\n        this.isEditing = true;\r\n        if (this.openInModal) {\r\n            this.toggleGroupModal();\r\n        } else {\r\n            this.inlineEditors.forEach((item) => {\r\n                item.edit();\r\n            });\r\n        }\r\n\r\n        if (this.onEdit) {\r\n            this.onEdit.emit(this);\r\n        }\r\n\r\n        this.subjectStateChange.next(InlineEditorState.Edit);\r\n    }\r\n\r\n    // Method to display the editable value as text and emit save event to host\r\n    protected onSubmit() {\r\n        this.isEditing = false;\r\n        this.subjectStateChange.next(InlineEditorState.Save);\r\n        this.onSave.emit(this);\r\n\r\n        if (this.openInModal) {\r\n            this.toggleGroupModal();\r\n        }\r\n\r\n        this.inlineEditors.forEach((item) => {\r\n            item.onSubmit();\r\n        });\r\n    }\r\n\r\n    // Method to reset the editable value\r\n    protected cancel() {\r\n        this.isEditing = false;\r\n        if (this.openInModal) {\r\n            this.toggleGroupModal();\r\n        }\r\n\r\n        this.inlineEditors.forEach((item) => {\r\n            item.cancel();\r\n        });\r\n\r\n        if (this.onCancel) {\r\n            this.onCancel.emit(this);\r\n        }\r\n\r\n        this.subjectStateChange.next(InlineEditorState.Cancel);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/inline-editor-group.component.ts","module.exports = \"<ng-content></ng-content>\\r\\n\\r\\n<div *ngIf=\\\"openInModal\\\" bsModal #editGroupModal=\\\"bs-modal\\\" (onShown)=\\\"onShown()\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"edit\\\" aria-hidden=\\\"true\\\">\\r\\n    <div class=\\\"modal-dialog\\\">\\r\\n        <div class=\\\"modal-content\\\">\\r\\n            <div class=\\\"modal-header\\\">\\r\\n                <h4 class=\\\"modal-title pull-left\\\">Redigera</h4>\\r\\n                <button class=\\\"close\\\" (click)=\\\"cancel()\\\"><span aria-hidden=\\\"true\\\">&times;</span><span class=\\\"sr-only\\\">Stäng</span></button>\\r\\n            </div>\\r\\n            <div class=\\\"modal-body\\\">\\r\\n                <div class=\\\"modal-item\\\" *ngFor=\\\"let editor of inlineEditors\\\">\\r\\n                    <ng-template [ngTemplateOutlet]=\\\"editor.editTemplate\\\" [ngOutletContext]=\\\"{ $implicit: editor }\\\">\\r\\n                    </ng-template>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"modal-footer\\\">\\r\\n                <button class=\\\"btn btn-secondary\\\" (click)=\\\"cancel()\\\"><span class=\\\"fa fa-remove\\\"></span> Avbryt</button>\\r\\n                <button [disabled]=\\\"invalid\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onSubmit(value)\\\"><span class=\\\"fa fa-check\\\"></span> Spara</button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<button *ngIf=\\\"!isEditing\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"edit()\\\"><span class=\\\"fa fa-pencil\\\"></span> Ändra</button>\\r\\n<div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Avbryt eller spara\\\" *ngIf=\\\"!openInModal && isEditing\\\">\\r\\n    <button class=\\\"btn btn-secondary\\\" (click)=\\\"cancel()\\\"><span class=\\\"fa fa-remove\\\"></span> Avbryt</button>\\r\\n    <button [disabled]=\\\"this.disableSave\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onSubmit(value)\\\"><span class=\\\"fa fa-check\\\"></span> Spara</button>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/inline-editor-group.html\n// module id = ./src/typescript/blueleet/modules/inline-editor/inline-editor-group.html\n// module chunks = 3","import { NgZone, Component, HostListener, TemplateRef, Input, OnInit, AfterContentInit, Output, EventEmitter, ElementRef, ViewChild, ContentChild, Renderer } from \"@angular/core\";\r\nimport { ModalDirective } from \"ngx-bootstrap\";\r\nimport { AbstractValueAccessor } from \"../../abstraction/AbstractValueAccessor\";\r\nimport * as EditorContextService from \"./services/InlineEditorContext.service\";\r\nimport { InlineEditorGroupComponent } from \"./inline-editor-group.component\";\r\n\r\n@Component({\r\n    selector: \"render-editor\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"editor?.defaultEditTemplate\" [ngOutletContext]=\"{ $implicit: this?.editor }\"></ng-template>`\r\n})\r\nexport class RenderEditorComponent implements OnInit {\r\n    @Input() editor = null;\r\n\r\n    constructor(protected contextService: EditorContextService.InlineEditorContextService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.contextService.editorInstance.subscribe((value: any) => {\r\n            if (Object.isNotNullOrUndefined(value)) {\r\n                this.editor = value;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: \"presentation-state\",\r\n    template: `<ng-template *ngIf=\"this.editor\" [ngTemplateOutlet]=\"this?.template\" [ngOutletContext]=\"{ $implicit: editor }\"></ng-template>`\r\n})\r\nexport class PresentationStateComponent implements OnInit {\r\n    @ContentChild(TemplateRef) template: TemplateRef<any>;\r\n    @Input() editor = null;\r\n\r\n    constructor(protected contextService: EditorContextService.InlineEditorContextService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.contextService.editorInstance.subscribe((value: any) => {\r\n            if (Object.isNotNullOrUndefined(value)) {\r\n                this.editor = value;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: \"edit-state\",\r\n    template: `<ng-template *ngIf=\"this.editor\" [ngTemplateOutlet]=\"this?.template\" [ngOutletContext]=\"{ $implicit: editor }\"></ng-template>`\r\n})\r\nexport class EditStateComponent implements AfterContentInit {\r\n    @ContentChild(TemplateRef) template: TemplateRef<any>;\r\n    @Input() editor = null;\r\n\r\n    constructor(protected contextService: EditorContextService.InlineEditorContextService) { }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.contextService.editorInstance.subscribe((value: any) => {\r\n            if (Object.isNotNullOrUndefined(value)) {\r\n                this.editor = value;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport abstract class InlineEditorComponent extends AbstractValueAccessor implements OnInit, AfterContentInit {\r\n    @ViewChild(\"inlineEditControl\") inlineEditControl: ElementRef;\r\n    @ViewChild(\"editModal\") public editModal: ModalDirective;\r\n    @ViewChild(\"editModalRef\") public editModalRef: ElementRef;\r\n    @ContentChild(RenderEditorComponent) protected renderEditorComponent: RenderEditorComponent;\r\n\r\n    // View templates\r\n    @ViewChild(\"DefaultPresentation\") defaultPresentationTemplate: TemplateRef<any>;\r\n    @ViewChild(\"DefaultEdit\") defaultEditTemplate: TemplateRef<any>;\r\n\r\n    // User specefic templates\r\n    @ContentChild(PresentationStateComponent) inputPresentationTemplate: PresentationStateComponent;\r\n    @ContentChild(EditStateComponent) inputEditTemplate: EditStateComponent;\r\n\r\n    // Events\r\n    @Output() public onSave: EventEmitter<any> = new EventEmitter();\r\n    @Output() public onEdit: EventEmitter<any> = new EventEmitter();\r\n    @Output() public onCancel: EventEmitter<any> = new EventEmitter();\r\n\r\n    // Handles presentation and edit state.\r\n    presentationTemplate: TemplateRef<any>;\r\n    editTemplate: TemplateRef<any>;\r\n\r\n    // input's attribute\r\n    @Input() public type: string;\r\n    @Input() public disabled: boolean;\r\n    @Input() public placeholder: string;\r\n    @Input() public name: string;\r\n    @Input() public size: number;\r\n    @Input() public openInModal: boolean;\r\n    @Input() public focusThis: boolean;\r\n    @Input() public formHorizontal: boolean = true;\r\n\r\n    // Configuration attribute\r\n    @Input() public empty: string;\r\n\r\n    public showEditState: boolean = null;\r\n    public showButtons: boolean;\r\n    public editing: boolean;\r\n    public isEmpty: boolean;\r\n    public invalid: boolean;\r\n\r\n    protected editorGroup: InlineEditorGroupComponent;\r\n\r\n    constructor(\r\n        protected element: ElementRef,\r\n        protected renderer: Renderer,\r\n        protected zone: NgZone,\r\n        protected contextService: EditorContextService.InlineEditorContextService,\r\n        protected contextGroupService: EditorContextService.InlineEditorGroupContextService\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    @HostListener(\"click\", [\"$event\"])\r\n    public onClick($event: MouseEvent): void {\r\n        let targetElement = $event.target;\r\n        if (this.editModalRef.nativeElement.contains(targetElement)) {\r\n            // We are in the edit modal.\r\n            return;\r\n        }\r\n        if (this.showButtons) {\r\n            this.edit();\r\n        }\r\n    }\r\n\r\n    public showPresentation() {\r\n        if (Object.isNotNullOrUndefined(this.showEditState) && this.showEditState === false) {\r\n            return true;\r\n        }\r\n\r\n        if (this.openInModal) {\r\n            return true;\r\n        }\r\n\r\n        if (this.editing === false) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public showEdit() {\r\n        if (Object.isNotNullOrUndefined(this.showEditState) && this.showEditState === false) {\r\n            return false;\r\n        }\r\n\r\n        return this.editing;\r\n    }\r\n\r\n    public onModalShown() { }\r\n\r\n    public setDisabledState(isDisabled: boolean): void {\r\n        this.invalid = isDisabled;\r\n    }\r\n\r\n    public ngAfterContentInit(): void {\r\n        this.contextGroupService.editorGroupInstance.subscribe((editorGroup) => {\r\n            if (editorGroup) {\r\n                this.editorGroup = editorGroup;\r\n                this.showButtons = false;\r\n\r\n                if (this.editorGroup.isEditing && this.editing === false) {\r\n                    this.edit();\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this.editorGroup) {\r\n            this.showButtons = false;\r\n            if (this.editorGroup.isEditing && this.editing === false) {\r\n                this.edit();\r\n            }\r\n        }\r\n    }\r\n\r\n    public ngOnInit() {\r\n        this.setDefaults();\r\n\r\n        if (Object.isNotNullOrUndefined(this.inputPresentationTemplate)) {\r\n            this.presentationTemplate = this.inputPresentationTemplate.template;\r\n        } else {\r\n            this.presentationTemplate = this.defaultPresentationTemplate;\r\n        }\r\n\r\n        if (Object.isNotNullOrUndefined(this.inputEditTemplate)) {\r\n            this.editTemplate = this.inputEditTemplate.template;\r\n        } else {\r\n            this.editTemplate = this.defaultEditTemplate;\r\n        }\r\n\r\n        if (this.editModal) {\r\n            this.editModal.config = { backdrop: \"static\" };\r\n        }\r\n\r\n        this.contextService.editorInstance.next(this);\r\n    }\r\n\r\n    public writeValue(value: any) {\r\n        if (value) {\r\n            super.writeValue(value);\r\n            this.isEmpty = false;\r\n        } else {\r\n            this.isEmpty = true;\r\n        }\r\n    }\r\n\r\n    public hasValue() {\r\n        return !this.isEmpty;\r\n    }\r\n\r\n    // Method to display the editable value as text and emit save event to host\r\n    public onSubmit(value = this.value) {\r\n        this.writeValue(value);\r\n        if (this.onSave) {\r\n            this.onSave.emit(value);\r\n        }\r\n\r\n        if (this.editModal) {\r\n            this.editModal.hide();\r\n        }\r\n\r\n        this.editing = false;\r\n        this.isEmpty = false;\r\n    }\r\n\r\n    // Method to display the inline edit form and hide the <a> element\r\n    public edit(value = this.value) {\r\n        this.$preValue$ = value;  // Store original value in case the form is cancelled\r\n        this.editing = true;\r\n\r\n        if (this.onEdit) {\r\n            this.onEdit.emit(this);\r\n        }\r\n\r\n        if (this.openInModal && this.editModal) {\r\n            this.editModal.show();\r\n        }\r\n    }\r\n\r\n    // Method to reset the editable value\r\n    public cancel() {\r\n        this.value = this.$preValue$;\r\n\r\n        if (this.editModal) {\r\n            this.editModal.hide();\r\n        }\r\n\r\n        this.editing = false;\r\n        if (this.onCancel) {\r\n            this.onCancel.emit(this);\r\n        }\r\n    }\r\n\r\n    protected presentControl(): string {\r\n        return (this.isEmpty) ? this.empty : this.value;\r\n    }\r\n\r\n    private setDefaults(): void {\r\n        // Configuratable properties.\r\n        if (Object.isNullOrUndefined(this.type)) {\r\n            this.type = \"text\";\r\n        }\r\n        if (Object.isNullOrUndefined(this.disabled)) {\r\n            this.disabled = false;\r\n        }\r\n        if (Object.isNullOrUndefined(this.placeholder)) {\r\n            this.placeholder = \"\";\r\n        }\r\n        if (Object.isNullOrUndefined(this.name)) {\r\n            this.name = \"\";\r\n        }\r\n        if (Object.isNullOrUndefined(this.size)) {\r\n            this.size = 8;\r\n        }\r\n        if (Object.isNullOrUndefined(this.openInModal)) {\r\n            this.openInModal = false;\r\n        }\r\n        if (Object.isNullOrUndefined(this.focusThis)) {\r\n            this.focusThis = false;\r\n        }\r\n        if (Object.isNullOrUndefined(this.empty)) {\r\n            this.empty = \"empty\";\r\n        }\r\n\r\n        // Public state properties.\r\n        if (Object.isNullOrUndefined(this.showButtons)) {\r\n            this.showButtons = true;\r\n        }\r\n        if (Object.isNullOrUndefined(this.editing)) {\r\n            this.editing = false;\r\n        }\r\n        if (Object.isNullOrUndefined(this.isEmpty)) {\r\n            this.isEmpty = false;\r\n        }\r\n        if (Object.isNullOrUndefined(this.invalid)) {\r\n            this.invalid = false;\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/inline-editor.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/index.js!../../../../../node_modules/sass-loader/index.js!./inline-editor.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/index.js!../../../../../node_modules/sass-loader/index.js!./inline-editor.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/index.js!../../../../../node_modules/sass-loader/index.js!./inline-editor.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/inline-editor/inline-editor.scss\n// module id = ./src/typescript/blueleet/modules/inline-editor/inline-editor.scss\n// module chunks = 3","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { SelectModule } from \"ng2-select-compat\";\r\nimport { AlertModule } from \"ngx-bootstrap/alert\";\r\nimport { ModalModule } from \"ngx-bootstrap/modal\";\r\nimport * as index from \"./index\";\r\nimport { CommonDirectivesModule } from \"../commonDirectives/module\";\r\nconst configs = index.inizialize();\r\n\r\n@NgModule({\r\n    imports: [CommonModule, ReactiveFormsModule, CommonDirectivesModule, SelectModule, AlertModule.forRoot(), ModalModule.forRoot()],\r\n    exports: configs.exports,\r\n    declarations: configs.editors\r\n})\r\nexport class InlineEditorModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: InlineEditorModule,\r\n            providers: configs.editorProviders\r\n        };\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/module.ts","import { Injectable } from \"@angular/core\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport * as components from \"../inline-editor.component\";\r\nimport { InlineEditorGroupComponent } from \"../inline-editor-group.component\";\r\n\r\n@Injectable()\r\nexport class InlineEditorContextService {\r\n    public editorInstance: Rx.BehaviorSubject<components.InlineEditorComponent> = new Rx.BehaviorSubject(null);\r\n}\r\n\r\n@Injectable()\r\nexport class InlineEditorGroupContextService {\r\n    public editorGroupInstance: Rx.BehaviorSubject<InlineEditorGroupComponent> = new Rx.BehaviorSubject(null);\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/inline-editor/services/InlineEditorContext.service.ts","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { TranslatorService } from \"./translator.service\";\r\nimport { CacheModule } from \"../cache/module\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, CacheModule],\r\n    exports: [CacheModule],\r\n    declarations: [],\r\n    providers: [TranslatorService]\r\n})\r\nexport class LanguageModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/language/module.ts","import { Injectable, Inject } from \"@angular/core\";\r\nimport { UmbracoAjaxService } from \"../../umbraco-ajax-Service\";\r\nimport { CacheService } from \"../cache/cache.service\";\r\nconst _ = require(\"lodash\");\r\n\r\n@Injectable()\r\nexport class TranslatorService {\r\n    constructor( @Inject(UmbracoAjaxService) protected umbracoAjaxService: UmbracoAjaxService, @Inject(CacheService) protected cacheService: CacheService) { }\r\n\r\n    translate(key: string, altText: string = \"\", cache: boolean = true): Promise<string> {\r\n        const valueFactory = () => this.umbracoAjaxService.post(\"TranslatorService\", \"TranslationPost\", { key, altText });\r\n\r\n        return this.cacheService.getCacheItem(`TranslatorService:TranslationPost:${key}`, valueFactory);\r\n    }\r\n\r\n    smartTranslate(key: string, value: any, altText: string = \"\", cache: boolean = true): Promise<string> {\r\n        const valueFactory = () => this.umbracoAjaxService.post(\"TranslatorService\", \"TranslationPost\", { key, altText });\r\n\r\n        return this.cacheService.getCacheItem(`TranslatorService:TranslationPost:${key}`, valueFactory).then(v => {\r\n            _.templateSettings.interpolate = /{([\\s\\S]+?)}/g;\r\n            const compiled = _.template(v);\r\n            const compiledValue = compiled(value);\r\n\r\n            return compiledValue;\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/language/translator.service.ts","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { SearchComponent } from \"./search.component\";\r\nimport { SearchService } from \"./search.service\";\r\nimport { BlueLeetUmbracoModule } from \"../../blueleet-umbraco.module\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, BlueLeetUmbracoModule],\r\n    exports: [BlueLeetUmbracoModule, SearchComponent],\r\n    declarations: [SearchComponent]\r\n})\r\nexport class SearchModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: SearchModule,\r\n            providers: [SearchService]\r\n        };\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/search/module.ts","import { Component, Input, NgZone, Inject, ElementRef, TemplateRef, ContentChild, OnChanges, SimpleChanges, Output, EventEmitter } from \"@angular/core\";\r\nimport { SearchService, ISearchResult } from \"./search.service\";\r\n\r\n@Component({\r\n    selector: \"bl-search\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"this?.searchTemplate\" [ngOutletContext]=\"{ $implicit: this }\"></ng-template>`,\r\n    styles: [require(\"./search.scss\").toString()]\r\n})\r\nexport class SearchComponent implements OnChanges {\r\n    @ContentChild(TemplateRef) searchTemplate: TemplateRef<any> = null;\r\n\r\n    @Input(\"searchTerm\") searchTerm: string;\r\n\r\n    @Output(\"onSearchUpdate\") onSearchUpdate: EventEmitter<any> = new EventEmitter<ISearchResult>();\r\n    @Output(\"onMatchingWordsUpdate\") onMatchingWordsUpdate: EventEmitter<any> = new EventEmitter<string[]>();\r\n\r\n    constructor(\r\n        @Inject(SearchService) private searchService: SearchService,\r\n        @Inject(NgZone) private zone: NgZone,\r\n        @Inject(ElementRef) private elementRef: ElementRef) { }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        let searchTerm = changes[\"searchTerm\"];\r\n\r\n        // We only wants to trigger a search if the previous value was different.\r\n        if (searchTerm != null && searchTerm.currentValue !== searchTerm.previousValue) {\r\n            // Only call lookFor if we have any observers\r\n            if (this.onSearchUpdate.observers.length > 0) {\r\n                this.searchService.lookFor(searchTerm.currentValue).then(value => {\r\n                    this.onSearchUpdate.emit(value);\r\n                });\r\n            }\r\n\r\n            // Only call lookFor if we have any observers\r\n            if (this.onMatchingWordsUpdate.observers.length > 0) {\r\n                this.searchService.lookForMatchingWords(searchTerm.currentValue).then(value => {\r\n                    this.onMatchingWordsUpdate.emit(value);\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/search/search.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/index.js!../../../../../node_modules/sass-loader/index.js!./search.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/index.js!../../../../../node_modules/sass-loader/index.js!./search.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/index.js!../../../../../node_modules/sass-loader/index.js!./search.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/search/search.scss\n// module id = ./src/typescript/blueleet/modules/search/search.scss\n// module chunks = 3","import { Injectable, Inject } from \"@angular/core\";\r\nimport { UmbracoAjaxService } from \"../../umbraco-ajax-Service\";\r\n\r\nexport interface ISearchResult {\r\n    searchTime: number;\r\n    resultMessage: string;\r\n    results: any[];\r\n}\r\n\r\n@Injectable()\r\nexport class SearchService {\r\n    constructor( @Inject(UmbracoAjaxService) protected umbracoAjaxService: UmbracoAjaxService) { }\r\n\r\n    lookFor(term: string): Promise<ISearchResult> {\r\n        return this.umbracoAjaxService.post(\"Search\", \"PostLookFor\", { searchTerm: term });\r\n    }\r\n\r\n    lookForMatchingWords(term: string): Promise<string[]> {\r\n        return this.umbracoAjaxService.post(\"Search\", \"PostLookForMatchingWords\", { searchTerm: term });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/search/search.service.ts","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { WidgetClockComponent } from \"./widget-clock/widget-clock.component\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [WidgetClockComponent],\r\n    declarations: [WidgetClockComponent]\r\n})\r\nexport class WidgetsModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/widgets/module.ts","module.exports = __webpack_public_path__ + \"./assets/blueleet/modules/widgets/widget-clock/analog-hours.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/widgets/widget-clock/analog-hours.png\n// module id = ./src/typescript/blueleet/modules/widgets/widget-clock/analog-hours.png\n// module chunks = 3","module.exports = __webpack_public_path__ + \"./assets/blueleet/modules/widgets/widget-clock/analog-minutes.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/widgets/widget-clock/analog-minutes.png\n// module id = ./src/typescript/blueleet/modules/widgets/widget-clock/analog-minutes.png\n// module chunks = 3","module.exports = __webpack_public_path__ + \"./assets/blueleet/modules/widgets/widget-clock/analog-seconds.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/widgets/widget-clock/analog-seconds.png\n// module id = ./src/typescript/blueleet/modules/widgets/widget-clock/analog-seconds.png\n// module chunks = 3","module.exports = __webpack_public_path__ + \"./assets/blueleet/modules/widgets/widget-clock/clock.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/widgets/widget-clock/clock.png\n// module id = ./src/typescript/blueleet/modules/widgets/widget-clock/clock.png\n// module chunks = 3","module.exports = \"<ul #Clock class=\\\"widget-clock hidden-xs-down hidden-xs-up\\\">\\r\\n    <li #Sec class=\\\"ticker-sec\\\"></li>\\r\\n    <li #Hour class=\\\"ticker-hour\\\"></li>\\r\\n    <li #Min class=\\\"ticker-min\\\"></li>\\r\\n</ul>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/widgets/widget-clock/templates/clock.html\n// module id = ./src/typescript/blueleet/modules/widgets/widget-clock/templates/clock.html\n// module chunks = 3","import { Component, NgZone, Inject, ElementRef, ViewChild, AfterContentInit } from \"@angular/core\";\r\nimport * as $ from \"jquery\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport * as UmbracoajaxService from \"../../../umbraco-ajax-Service\";\r\nrequire(\"./clock.png\");\r\n\r\n@Component({\r\n    selector: \"widget-clock\",\r\n    template: require(\"./templates/clock.html\"),\r\n    styles: [require(\"./widget-clock.scss\").toString()]\r\n})\r\nexport class WidgetClockComponent implements AfterContentInit {\r\n    @ViewChild(\"Clock\") clock: ElementRef;\r\n    @ViewChild(\"Sec\") clockSec: ElementRef;\r\n    @ViewChild(\"Hour\") clockHour: ElementRef;\r\n    @ViewChild(\"Min\") clockMin: ElementRef;\r\n\r\n    public timeObservable: Rx.Observable<Date> = Rx.Observable.interval(1000).map(() => new Date());\r\n\r\n    constructor(\r\n        @Inject(UmbracoajaxService.UmbracoAjaxService) private umbracoAjaxService: UmbracoajaxService.UmbracoAjaxService,\r\n        @Inject(NgZone) private zone: NgZone,\r\n        @Inject(ElementRef) private elementRef: ElementRef) { }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.timeObservable.subscribe((value: Date) => {\r\n            let hours = value.getHours();\r\n            let mins = value.getMinutes();\r\n            let seconds = value.getSeconds();\r\n\r\n            let sdegree = seconds * 6;\r\n            let srotate = \"rotate(\" + sdegree + \"deg)\";\r\n            $(this.clockSec.nativeElement).css({\r\n                \"-moz-transform\": srotate,\r\n                \"-webkit-transform\": srotate,\r\n                \"-ms-transform\": srotate,\r\n                \"transform\": srotate\r\n            });\r\n\r\n            let hdegree = hours * 30 + (mins / 2);\r\n            let hrotate = \"rotate(\" + hdegree + \"deg)\";\r\n            $(this.clockHour.nativeElement).css({\r\n                \"-moz-transform\": hrotate,\r\n                \"-webkit-transform\": hrotate,\r\n                \"-ms-transform\": hrotate,\r\n                \"transform\": hrotate\r\n            });\r\n\r\n            let mdegree = mins * 6;\r\n            let mrotate = \"rotate(\" + mdegree + \"deg)\";\r\n            $(this.clockMin.nativeElement).css({\r\n                \"-moz-transform\": mrotate,\r\n                \"-webkit-transform\": mrotate,\r\n                \"-ms-transform\": mrotate,\r\n                \"transform\": mrotate\r\n            });\r\n        });\r\n\r\n        setTimeout(() => {\r\n            $(this.clock.nativeElement).removeClass(\"hidden-xs-up\");\r\n        }, 1000);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/modules/widgets/widget-clock/widget-clock.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../node_modules/css-loader/index.js!../../../../../../node_modules/postcss-loader/index.js!../../../../../../node_modules/sass-loader/index.js!./widget-clock.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../../node_modules/css-loader/index.js!../../../../../../node_modules/postcss-loader/index.js!../../../../../../node_modules/sass-loader/index.js!./widget-clock.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../../node_modules/css-loader/index.js!../../../../../../node_modules/postcss-loader/index.js!../../../../../../node_modules/sass-loader/index.js!./widget-clock.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/blueleet/modules/widgets/widget-clock/widget-clock.scss\n// module id = ./src/typescript/blueleet/modules/widgets/widget-clock/widget-clock.scss\n// module chunks = 3","import { Pipe, PipeTransform } from \"@angular/core\";\r\n\r\n@Pipe({ name: \"Capitalize\" })\r\nexport class CapitalizePipe implements PipeTransform {\r\n    transform(value: string): any {\r\n        if (!value) {\r\n            return value;\r\n        }\r\n\r\n        return value.replace(/\\w\\S*/g, txt => (txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/pipes/capitalize.pipe.ts","import { Pipe, PipeTransform } from \"@angular/core\";\r\n\r\n@Pipe({ name: \"truncate\" })\r\nexport class TruncatePipe implements PipeTransform {\r\n    transform(value: string, args: string[]): string {\r\n        let limit;\r\n        if (Object.isNullOrUndefined(args.length)) {\r\n            limit = args;\r\n        } else if (args.length > 0) {\r\n            limit = parseInt(args[0], 10);\r\n        } else {\r\n            limit = 10;\r\n        }\r\n\r\n        let trail;\r\n        if (args.length > 1) {\r\n            trail = args[1];\r\n        } else {\r\n            trail = \"...\";\r\n        }\r\n\r\n        if (value.length > limit) {\r\n            return value.substring(0, limit) + trail;\r\n        }\r\n\r\n        return value;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/pipes/truncate.pipe.ts","import { Inject, Injectable, isDevMode } from \"@angular/core\";\r\nimport { RequestOptions, RequestMethod, Http, Headers, Response } from \"@angular/http\";\r\nimport * as $ from \"jquery\";\r\nimport { ConfigService } from \"./config.service\";\r\nimport { ServiceEvent, ServiceEventType } from \"./ServiceEvent.service\";\r\n\r\n@Injectable()\r\nexport class UmbracoAjaxService {\r\n    private url: string;\r\n\r\n    constructor(\r\n        @Inject(Http) protected $http: Http,\r\n        @Inject(Window) protected window,\r\n        @Inject(ConfigService) protected blueLeetConfigService: ConfigService,\r\n        @Inject(ServiceEvent) protected serviceEvent: ServiceEvent) {\r\n        const currentCulture = $(\"head\").data(\"culture\");\r\n        this.blueLeetConfigService.addLocalConfig(\"currentCulture\", currentCulture);\r\n        this.url = this.getUrl();\r\n    }\r\n\r\n    private transform(data) {\r\n        return $.param(data);\r\n    }\r\n\r\n    private transformJsonRequest(data) {\r\n        return JSON.stringify(data);\r\n    }\r\n\r\n    private getUrl() {\r\n        return window.location.protocol + \"//\" + window.location.host + \"/\";\r\n    }\r\n\r\n    private getEncryptedRoute(controller: string, action: string, area: string = \"\", additionalRouteVals: any = null): Promise<any> {\r\n        let url = this.url + \"umbraco/Api/JsonHelper/SurfaceActionPost\";\r\n        console.log(`getEncryptedRoute(controller:'${controller}', action:'${action}', area:'${area}')`, additionalRouteVals);\r\n\r\n        let body: any = {\r\n            controllerName: controller,\r\n            controllerAction: action,\r\n            area: area,\r\n            additionalRouteVals: additionalRouteVals\r\n        };\r\n\r\n        let headers = new Headers({ \"Content-Type\": \"application/json\" });\r\n        let options = new RequestOptions({ headers: headers });\r\n        body = this.transformJsonRequest(body);\r\n\r\n        return this.$http.post(url, body, options)\r\n            .map((res: Response) => {\r\n                let json = res.json();\r\n                return json;\r\n            }).toPromise();\r\n    }\r\n\r\n    private getHeaders(): Headers {\r\n        const headers = new Headers();\r\n        headers.set(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\r\n\r\n        let ajaxVerificationToken = $(\"head\").data(\"ajaxVerificationToken\");\r\n        if (ajaxVerificationToken) {\r\n            headers.set(\"RequestVerificationToken\", ajaxVerificationToken);\r\n            console.log(\"setting ajaxVerificationToken header\", ajaxVerificationToken);\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    private getValidController(controller: string): string {\r\n        const endsWithControllerRegex = new RegExp(\"controller$\", \"gi\");\r\n        if (endsWithControllerRegex.test(controller)) {\r\n            console.warn(\"[blueleet-http] a request was made with controller: '\" + controller + \"' which is ending with 'controller' please remove the controller part as it is not needed!\");\r\n            return controller.replace(new RegExp(\"controller$\", \"gi\"), \"\");\r\n        }\r\n\r\n        return controller;\r\n    }\r\n\r\n    private validateNamingConventionForAction(controller: string, action: string, isPost: boolean = false) {\r\n        if (isDevMode() === false) {\r\n            return;\r\n        }\r\n\r\n        const postConventionRegex = new RegExp(\"(post$)|(^post)\", \"gi\");\r\n        const getConventionRegex = new RegExp(\"(get$)|(^get)\", \"gi\");\r\n\r\n        if (isPost && !postConventionRegex.test(action)) {\r\n            console.error(`Convention: A request was made to controller: '${controller}' with an incorrectly named action: '${action}' make sure it starts or ends with 'post'.`);\r\n        } else if (!isPost && getConventionRegex.test(action)) {\r\n            console.error(`Convention: A request was made to controller: '${controller}' with an incorrectly named action: '${action}' make sure it starts or ends with 'get'.`);\r\n        }\r\n    }\r\n\r\n    private handleServerError(response: Response, silentTry: boolean): any {\r\n        this.handleDone(response);\r\n\r\n        if (silentTry) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (Object.isNullOrUndefined(response.headers)) {\r\n            return Promise.reject(response);\r\n        } else if (response.headers.has(\"Content-Type\") && response.headers.get(\"Content-Type\").indexOf(\"application/json\") >= 0) {\r\n            let json = response.json();\r\n            return Promise.reject(json);\r\n        } else {\r\n            return Promise.reject(response.text());\r\n        }\r\n    }\r\n\r\n    private handleDone(value) {\r\n        if (!Object.isNullOrUndefined(value)) {\r\n            this.serviceEvent.emit(ServiceEventType.RequestEnd, value);\r\n        }\r\n    }\r\n\r\n    post(controller, action, parameters: any = null, info?: { area?: string, silentTry?: boolean }): Promise<any> {\r\n        const defaultInfo = { area: \"\", noThrow: false };\r\n        info = $.extend(defaultInfo, info || {});\r\n        controller = this.getValidController(controller);\r\n        this.validateNamingConventionForAction(controller, action, true);\r\n        return this.getEncryptedRoute(controller, action, info.area, parameters)\r\n            .then(response => {\r\n                this.serviceEvent.emit(ServiceEventType.RequestBegin);\r\n                const options = new RequestOptions({\r\n                    headers: this.getHeaders()\r\n                });\r\n\r\n                return this.$http.post(window.location.href, this.transform(response), options)\r\n                    .map((res: Response) => {\r\n                        let data: any;\r\n                        if (res.headers.has(\"Content-Type\") && res.headers.get(\"Content-Type\").indexOf(\"application/json\") >= 0) {\r\n                            data = res.json();\r\n                        } else {\r\n                            data = res.text();\r\n                            if (!data) {\r\n                                data = res;\r\n                            }\r\n                        }\r\n\r\n                        this.handleDone(data);\r\n                        return data;\r\n                    })\r\n                    .catch(r => this.handleServerError(r, info.silentTry))\r\n                    .toPromise();\r\n            });\r\n    }\r\n\r\n    get(controller, action, parameters: any = null, info?: { area?: string, silentTry?: boolean }): Promise<any> {\r\n        const defaultInfo = { area: \"\", noThrow: false };\r\n        info = $.extend(defaultInfo, info || {});\r\n        controller = this.getValidController(controller);\r\n        this.validateNamingConventionForAction(controller, action);\r\n        return this.getEncryptedRoute(controller, action, info.area, parameters)\r\n            .then(response => {\r\n                this.serviceEvent.emit(ServiceEventType.RequestBegin);\r\n                const options = new RequestOptions({\r\n                    method: RequestMethod.Get,\r\n                    headers: this.getHeaders(),\r\n                    body: response\r\n                });\r\n                return this.$http.request(window.location.href, options)\r\n                    .map((res: Response) => {\r\n                        let data: any;\r\n                        if (res.headers.has(\"Content-Type\") && res.headers.get(\"Content-Type\").indexOf(\"application/json\") >= 0) {\r\n                            data = res.json();\r\n                        } else {\r\n                            data = res.text();\r\n                            if (!data) {\r\n                                data = res;\r\n                            }\r\n                        }\r\n\r\n                        this.handleDone(data);\r\n                        return data;\r\n                    })\r\n                    .catch(r => this.handleServerError(r, info.silentTry))\r\n                    .toPromise();\r\n            });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/blueleet/umbraco-ajax-Service.ts","import { ContentChild, TemplateRef, EmbeddedViewRef, ViewContainerRef, AfterContentInit, OnChanges, ChangeDetectorRef, SimpleChanges } from \"@angular/core\";\r\nimport * as enums from \"../../enums/\";\r\nimport { ITemplateBase } from \"./ITemplateBase\";\r\n\r\nexport abstract class TemplateBaseComponent implements ITemplateBase<enums.DefaultViewState>, AfterContentInit, OnChanges {\r\n    @ContentChild(TemplateRef) defaultTemplate: TemplateRef<any>;\r\n    viewRef: EmbeddedViewRef<any>;\r\n    currentTemplate: TemplateRef<any>;\r\n    context: Object;\r\n    protected viewState$: enums.DefaultViewState | any;\r\n\r\n    constructor(\r\n        protected changeDetectorRef: ChangeDetectorRef,\r\n        protected viewContainerRef: ViewContainerRef,\r\n        private readonly handleTemplateOutput: boolean = false\r\n    ) { }\r\n\r\n    public get viewState(): enums.DefaultViewState | any {\r\n        return this.viewState$;\r\n    }\r\n\r\n    public set viewState(value: enums.DefaultViewState | any) {\r\n        this.viewState$ = value;\r\n        this.updateTemplate();\r\n    }\r\n\r\n    getTemplate(): TemplateRef<any> {\r\n        let template = null;\r\n        switch (this.viewState) {\r\n            case enums.DefaultViewState.DefaultTemplate:\r\n                template = this.defaultTemplate;\r\n                break;\r\n        }\r\n\r\n        this.currentTemplate = template;\r\n        return template;\r\n    }\r\n\r\n    updateTemplate(): void {\r\n        const template = this.getTemplate();\r\n\r\n        if (this.currentTemplate !== template) {\r\n            this.currentTemplate = template;\r\n        }\r\n    }\r\n\r\n    init(templateRef): void {\r\n        if (this.handleTemplateOutput) {\r\n            this.context = { $implicit: this };\r\n            if (Object.isNullOrUndefined(this.viewState)) {\r\n                this.viewState = enums.DefaultViewState.DefaultTemplate;\r\n            }\r\n            this.viewRef = this.viewContainerRef.createEmbeddedView(templateRef, this.context);\r\n            this.changeDetectorRef.detectChanges();\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes?: SimpleChanges) {\r\n        this.updateTemplate();\r\n        if (this.handleTemplateOutput) {\r\n            if (this.viewRef) {\r\n                this.viewContainerRef.remove(this.viewContainerRef.indexOf(this.viewRef));\r\n            }\r\n\r\n            let templateRef = this.currentTemplate;\r\n            if (templateRef) {\r\n                this.viewRef = this.viewContainerRef.createEmbeddedView(templateRef, this.context);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        if (this.handleTemplateOutput) {\r\n            setTimeout(() => {\r\n                this.context = { $implicit: this };\r\n                if (Object.isNullOrUndefined(this.viewState)) {\r\n                    this.viewState = enums.DefaultViewState.DefaultTemplate;\r\n                }\r\n                this.viewRef = this.viewContainerRef.createEmbeddedView(this.getTemplate(), this.context);\r\n                this.changeDetectorRef.detectChanges();\r\n            },\r\n                1);\r\n        } else {\r\n            if (Object.isNullOrUndefined(this.viewState)) {\r\n                this.viewState = enums.DefaultViewState.DefaultTemplate;\r\n            } else {\r\n                this.updateTemplate();\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/abstraction/TemplateBaseComponent.ts","import { Component, Inject, NgZone, Input, ElementRef, ViewChild, ChangeDetectorRef, TemplateRef, ViewContainerRef, OnInit, AfterContentInit } from \"@angular/core\";\r\nimport { TemplateBaseComponent } from \"../../abstraction/TemplateBaseComponent\";\r\nimport * as bl from \"../../../blueleet\";\r\nimport * as enums from \"../../../enums/\";\r\nimport { AlertBoxService, AlertBoxOptions, AlertBoxEventType } from \"../../../alert-box.service\";\r\n\r\n@Component({\r\n    selector: \"alert-box\",\r\n    template: require(\"./templates/alert-box.html\")\r\n})\r\nexport class BootstrapAlertBoxComponent extends TemplateBaseComponent implements OnInit, AfterContentInit {\r\n    @ViewChild(\"DefaultTemplate\") defaultTemplate: TemplateRef<any>;\r\n    @Input(\"isGlobal\") isGlobal: boolean = false;\r\n    alertTemplate: TemplateRef<any> = null;\r\n    options: AlertBoxOptions = null;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(NgZone) private ngZone: NgZone,\r\n        @Inject(AlertBoxService) private alertBoxService: AlertBoxService\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.viewState$ = enums.DefaultViewState.None;\r\n        super.ngAfterContentInit();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const self = this;\r\n        if (self.isGlobal) {\r\n            self.alertBoxService.on().subscribe((value: AlertBoxOptions) => {\r\n                self.ngZone.run(() => {\r\n                    self.options = value;\r\n                    if (Object.isNullOrUndefined(value)) {\r\n                        self.viewState = enums.DefaultViewState.None;\r\n                    } else {\r\n                        self.viewState = enums.DefaultViewState.DefaultTemplate;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    show(options: AlertBoxOptions, alertTemplate: TemplateRef<any> = null) {\r\n        this.alertTemplate = alertTemplate;\r\n        this.options = options;\r\n        this.viewState = enums.DefaultViewState.DefaultTemplate;\r\n    }\r\n\r\n    isTypeInfo(): boolean {\r\n        return this.options != null && this.options.type === AlertBoxEventType.Info;\r\n    }\r\n\r\n    isTypeSuccess(): boolean {\r\n        return this.options != null && this.options.type === AlertBoxEventType.Success;\r\n    }\r\n\r\n    isTypeWarning(): boolean {\r\n        return this.options != null && this.options.type === AlertBoxEventType.Warning;\r\n    }\r\n\r\n    isTypeError(): boolean {\r\n        return this.options != null && this.options.type === AlertBoxEventType.Error;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/bootstrap/alert-box/alert-box.component.ts","module.exports = \"<ng-template [ngTemplateOutlet]=\\\"this.currentTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\"></ng-template>\\r\\n<ng-template #DefaultTemplate>\\r\\n    <div class=\\\"alert\\\" [ngClass]=\\\"{'alert-info': this.isTypeInfo(), 'alert-success': this.isTypeSuccess(), 'alert-warning': this.isTypeWarning(), 'alert-danger': this.isTypeError() }\\\" style=\\\"z-index: 1;\\\">\\r\\n        <span *ngIf=\\\"this?.options?.showClose\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</span>\\r\\n        <p>{{ this?.options?.message }}</p>\\r\\n        <ng-template [ngTemplateOutlet]=\\\"this.alertTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\"></ng-template>\\r\\n    </div>\\r\\n</ng-template>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/bootstrap/alert-box/templates/alert-box.html\n// module id = ./src/typescript/components/bootstrap/alert-box/templates/alert-box.html\n// module chunks = 3","import { Component, SecurityContext, Sanitizer, ViewChild, Host, HostBinding, Input, ElementRef, Renderer, OnInit, AfterViewInit } from \"@angular/core\";\r\nimport { AbstractControl, FormGroupDirective } from \"@angular/forms\";\r\nimport { AbstractValueAccessor, MakeProvider } from \"../../blueleet/abstraction/AbstractValueAccessor\";\r\nimport * as $ from \"jquery\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport { ValidationService } from \"../../validation.service\";\r\nimport { CapitalizePipe } from \"../../blueleet/pipes/capitalize.pipe\";\r\nimport { PasswordVerdict } from \"../../enums/password-verdict\";\r\n\r\n@Component({\r\n    selector: \"bs-form-input\",\r\n    template: require(\"./templates/form-input.html\"),\r\n    styles: [require(\"./form-input.scss\").toString()],\r\n    providers: [MakeProvider(BootstrapFormInputComponent), CapitalizePipe]\r\n})\r\nexport class BootstrapFormInputComponent extends AbstractValueAccessor implements OnInit, AfterViewInit {\r\n    @HostBinding(\"class.has-error\") hasError: boolean = false;\r\n\r\n    @Input(\"FormControl\") control: AbstractControl;\r\n    @Input(\"renderedInForm\") renderedInForm: boolean = true;\r\n    @Input(\"lowercase\") lowercase: boolean = false;\r\n    @Input(\"label\") label: string = null;\r\n    @Input(\"name\") name: string = null;\r\n    @Input(\"type\") type: string = \"text\";\r\n    @Input(\"placeholder\") placeholder: string = \"\";\r\n    @Input(\"showPasswordStrength\") showPasswordStrength: boolean = false;\r\n    @Input(\"validateOnBlur\") validateOnBlur: boolean = true;\r\n\r\n    @ViewChild(\"input\") inputElement: ElementRef;\r\n    @ViewChild(\"progressBar\") progressBar: ElementRef;\r\n\r\n    progressBarModel: { message: string, passwordVerdict: PasswordVerdict };\r\n    element: JQuery;\r\n    inputSubject: Rx.Subject<string> = new Rx.Subject<string>();\r\n    inputValue: string = \"\"; // We use this instead of mapping against value to not trigger automatic updates so we can control when validators fire.\r\n    errorMessage: string = \"\";\r\n\r\n    constructor(\r\n        public elementRef: ElementRef,\r\n        private renderer: Renderer,\r\n        private capitalizePipe: CapitalizePipe,\r\n        private validationService: ValidationService,\r\n        private sanitizer: Sanitizer,\r\n        @Host() private form: FormGroupDirective\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    updateErrorMessage() {\r\n        let errorMessage: string = \"\";\r\n        for (let propertyName in this.control.errors) {\r\n            if (this.control.errors.hasOwnProperty(propertyName) && this.control.touched) {\r\n                // First check if we have a attribute with the error message if not use the ValidationService.getValidatorErrorMessage.\r\n                const errorAttr = this.element.attr(`error${this.capitalizePipe.transform(propertyName)}`);\r\n                if (errorAttr) {\r\n                    errorMessage = errorAttr;\r\n                } else {\r\n                    errorMessage = this.sanitizer.sanitize(SecurityContext.HTML, ValidationService.getValidatorErrorMessage(propertyName, this.control.errors[propertyName]));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (this.errorMessage !== errorMessage) {\r\n            this.errorMessage = this.sanitizer.sanitize(SecurityContext.HTML, errorMessage);\r\n        }\r\n    }\r\n\r\n    triggerUpdate(value: string, event: Event) {\r\n        if (this.lowercase) {\r\n            value = value.toLowerCase();\r\n        }\r\n\r\n        if (!event.bubbles) {\r\n            this.inputSubject.next(value);\r\n        }\r\n    }\r\n\r\n    onBlur(value): void {\r\n        const self = this;\r\n        if (self.validateOnBlur && self.control.untouched) {\r\n            self.control.markAsTouched();\r\n            self.inputSubject.next(value);\r\n        }\r\n    }\r\n\r\n    onFocusout(value) {\r\n        const self = this;\r\n        if (self.control.untouched) {\r\n            self.control.markAsTouched();\r\n        }\r\n        self.inputSubject.next(value);\r\n    }\r\n\r\n    onFocus(value): void {\r\n        const self = this;\r\n        if (self.validateOnBlur === false && self.control.untouched) {\r\n            self.control.markAsTouched();\r\n            self.inputSubject.next(value);\r\n        }\r\n    }\r\n\r\n    updateValue(value: string) {\r\n        const self = this;\r\n        if (self.control.value === value) {\r\n            // Same value, already validated.\r\n            return;\r\n        }\r\n\r\n        if (value === \"\" || Object.isNullOrUndefined(value)) {\r\n            self.control.markAsUntouched();\r\n        } else {\r\n            // Set the control value but trigger value events only if the control is touched.\r\n            self.control.patchValue(value, { emitEvent: self.control.touched });\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        const self = this;\r\n\r\n        if (self.lowercase) {\r\n            self.renderer.setElementStyle(this.inputElement.nativeElement, \"text-transform\", \"lowercase\");\r\n        }\r\n\r\n        // subscribe on keyup event and debounce it to prevent spam updatings.\r\n        let inputKeyUpObservable = Rx.Observable\r\n            .fromEvent(this.inputElement.nativeElement, \"keyup\")\r\n            .map((i: any) => i.currentTarget.value);\r\n\r\n        Rx.Observable\r\n            .merge(inputKeyUpObservable, this.inputSubject)\r\n            .debounceTime(500)\r\n            .subscribe((value: string) => this.updateValue(value));\r\n\r\n        this.control.statusChanges.subscribe(() => {\r\n            console.log(this.control.errors);\r\n\r\n            let hasError = this.control.touched && this.control.invalid;\r\n            if (hasError) {\r\n                this.updateErrorMessage();\r\n            } else {\r\n                this.errorMessage = \"\";\r\n            }\r\n            this.hasError = hasError;\r\n        });\r\n\r\n        if (self.showPasswordStrength) {\r\n            self.validationService.onPasswordStrengthChange().subscribe((value) => {\r\n                if (self.progressBar) {\r\n                    self.progressBarModel = self.validationService.getPasswordVerdict(value.score);\r\n\r\n                    if (self.value === \"\") {\r\n                        self.progressBarModel.message = \"\";\r\n                        self.renderer.setElementStyle(self.progressBar.nativeElement, \"width\", \"0%\");\r\n                        return;\r\n                    }\r\n\r\n                    switch (self.progressBarModel.passwordVerdict) {\r\n                        case PasswordVerdict.Weak:\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-danger\", true);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-warning\", false);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-success\", false);\r\n                            self.renderer.setElementStyle(self.progressBar.nativeElement, \"width\", \"15%\");\r\n                            break;\r\n                        case PasswordVerdict.Normal:\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-danger\", false);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-warning\", true);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-success\", false);\r\n                            self.renderer.setElementStyle(self.progressBar.nativeElement, \"width\", \"25%\");\r\n                            break;\r\n                        case PasswordVerdict.Medium:\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-danger\", false);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-warning\", false);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-success\", true);\r\n                            self.renderer.setElementStyle(self.progressBar.nativeElement, \"width\", \"50%\");\r\n                            break;\r\n                        case PasswordVerdict.Strong:\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-danger\", false);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-warning\", false);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-success\", true);\r\n                            self.renderer.setElementStyle(self.progressBar.nativeElement, \"width\", \"75%\");\r\n                            break;\r\n                        case PasswordVerdict.VeryStrong:\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-danger\", false);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-warning\", false);\r\n                            self.renderer.setElementClass(self.progressBar.nativeElement, \"progress-bar-success\", true);\r\n                            self.renderer.setElementStyle(self.progressBar.nativeElement, \"width\", \"100%\");\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.element = $(this.elementRef.nativeElement);\r\n\r\n        if (Object.isNullOrUndefined(this.control)) {\r\n            const controlName = this.element.attr(\"formControlName\");\r\n\r\n            if (Object.isNullOrUndefined(controlName)) {\r\n                throw \"No formControlName set and 'FormControl' input is not set, either of those must be set!\";\r\n            }\r\n\r\n            // Find the control in the Host (Parent) form\r\n            let allControls = this.form.form.controls;\r\n            this.control = allControls.hasOwnProperty(controlName) ? allControls[controlName] : null;\r\n            if (Object.isNullOrUndefined(this.control)) {\r\n                throw `Could not find control by ${controlName}!`;\r\n            }\r\n        }\r\n\r\n        this.renderer.setElementClass(this.elementRef.nativeElement, \"form-group\", true);\r\n        this.renderer.setElementClass(this.elementRef.nativeElement, \"has-feedback\", true);\r\n\r\n        if (Object.isNullOrUndefined(this.label) || this.label === \"\") {\r\n            this.label = this.placeholder;\r\n        }\r\n\r\n        // We may have a value already if the form is created with one.\r\n        this.inputValue = this.control.value;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/bootstrap/form-input.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./form-input.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./form-input.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./form-input.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/bootstrap/form-input.scss\n// module id = ./src/typescript/components/bootstrap/form-input.scss\n// module chunks = 3","module.exports = \"<label *ngIf=\\\"this.renderedInForm\\\" class=\\\"col-md-3 form-control-label\\\">{{label}}</label>\\r\\n<div *ngIf=\\\"this.renderedInForm\\\" class=\\\"col-md-9\\\">\\r\\n    <input #input class=\\\"form-control\\\" [name]=\\\"name\\\" [type]=\\\"type\\\" [placeholder]=\\\"placeholder\\\" (blur)=\\\"onBlur($event.target.value)\\\" (focus)=\\\"onFocus($event.target.value)\\\" (focusout)=\\\"onFocusout($event.target.value)\\\" [value]=\\\"inputValue\\\" (input)=\\\"triggerUpdate($event.target.value, $event)\\\">\\r\\n    <span class=\\\"glyphicon glyphicon-remove form-control-feedback\\\" aria-hidden=\\\"true\\\" *ngIf=\\\"hasError\\\"></span>\\r\\n    <div *ngIf=\\\"showPasswordStrength\\\" class=\\\"form-text progress password-progress\\\">\\r\\n        <div #progressBar class=\\\"progress-bar\\\" role=\\\"progressbar\\\" style=\\\"width: 0;\\\">\\r\\n            <p class=\\\"text-center\\\">{{ progressBarModel?.message }}</p>\\r\\n        </div>\\r\\n    </div>\\r\\n    <small *ngIf=\\\"showPasswordStrength && errorMessage !== null\\\" class=\\\"form-text\\\" [innerHTML]=\\\"errorMessage\\\"></small>\\r\\n    <span class=\\\"form-text\\\" aria-hidden=\\\"true\\\" [innerHTML]=\\\"errorMessage\\\" *ngIf=\\\"!showPasswordStrength && control.touched && control.invalid && errorMessage !== null\\\"></span>\\r\\n</div>\\r\\n<input *ngIf=\\\"!this.renderedInForm\\\" #input class=\\\"form-control\\\" [name]=\\\"name\\\" [type]=\\\"type\\\" [placeholder]=\\\"placeholder\\\" (blur)=\\\"onBlur($event.target.value)\\\" (focus)=\\\"onFocus($event.target.value)\\\" (focusout)=\\\"onFocusout($event.target.value)\\\" [value]=\\\"inputValue\\\" (input)=\\\"triggerUpdate($event.target.value, $event)\\\">\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/bootstrap/templates/form-input.html\n// module id = ./src/typescript/components/bootstrap/templates/form-input.html\n// module chunks = 3","import { Component, Inject, ContentChild, ChangeDetectorRef, ViewContainerRef, OnInit, NgZone, TemplateRef } from \"@angular/core\";\r\nimport { FacebookService } from \"ng2-facebook-sdk/dist\";\r\nimport { IMemberPayload as MemberPayload } from \"../../abstraction/IMemberPayload\";\r\nimport { LoginEventService, LoginEventType } from \"../../loginEvent.service\";\r\nimport * as enums from \"../../enums/\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\n\r\nexport enum FacebookLoginCompleteViewState {\r\n    None,\r\n    RegisteredTemplate,\r\n    NeedApprovalTemplate\r\n}\r\n\r\n@Component({\r\n    selector: \"facebook-login-complete\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"this.currentTemplate\" [ngOutletContext]=\"{ $implicit: this.user }\"></ng-template>`,\r\n    viewProviders: [FacebookService]\r\n})\r\nexport class FacebookLoginCompleteComponent extends TemplateBaseComponent implements OnInit {\r\n    @ContentChild(\"Registered\") registeredTemplate: TemplateRef<any>;\r\n    @ContentChild(\"NeedApproval\") needApprovalTemplate: TemplateRef<any>;\r\n    user: any = {};\r\n    status: enums.MemberStatus;\r\n    viewState$: FacebookLoginCompleteViewState = FacebookLoginCompleteViewState.None;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(NgZone) protected ngZone: NgZone,\r\n        @Inject(LoginEventService) protected loginEventService: LoginEventService) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    getTemplate(): TemplateRef<any> {\r\n        if (Object.isNullOrUndefined(this.registeredTemplate)) {\r\n            this.registeredTemplate = null;\r\n        }\r\n        if (Object.isNullOrUndefined(this.needApprovalTemplate)) {\r\n            this.needApprovalTemplate = null;\r\n        }\r\n        switch (this.viewState) {\r\n            case FacebookLoginCompleteViewState.NeedApprovalTemplate:\r\n                return this.needApprovalTemplate;\r\n            case FacebookLoginCompleteViewState.RegisteredTemplate:\r\n                return this.registeredTemplate;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    userLoggedIn(payload: MemberPayload): void {\r\n        this.ngZone.run(() => {\r\n            this.status = payload.status;\r\n            this.user.name = payload.user.name;\r\n\r\n            if (!Object.isNullOrUndefined(this.status) && this.status === enums.MemberStatus.Registered) {\r\n                this.viewState = FacebookLoginCompleteViewState.RegisteredTemplate;\r\n            } else if (!Object.isNullOrUndefined(this.needApprovalTemplate) && !Object.isNullOrUndefined(this.status) && this.status === enums.MemberStatus.NeedApproval) {\r\n                this.viewState = FacebookLoginCompleteViewState.NeedApprovalTemplate;\r\n            } else {\r\n                this.viewState = FacebookLoginCompleteViewState.None;\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.loginEventService.on(LoginEventType.Success).subscribe(x => this.userLoggedIn(x));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/facebook/facebook-login-complete.component.ts","import { Component, Inject, OnInit, NgZone, ChangeDetectorRef, ViewContainerRef, ContentChild, ViewChild, TemplateRef, EmbeddedViewRef } from \"@angular/core\";\r\nimport { FacebookService, FacebookLoginResponse, FacebookInitParams } from \"ng2-facebook-sdk/dist\";\r\nimport * as $script from \"scriptjs\";\r\nimport * as bl from \"../../blueleet\";\r\nimport { IMemberPayload as MemberPayload } from \"../../abstraction/IMemberPayload\";\r\nimport { LoginEventService, LoginEventType } from \"../../loginEvent.service\";\r\nimport * as enums from \"../../enums/\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\n\r\nexport enum FacebookLoginViewState {\r\n    ButtonTemplate,\r\n    LoginCompleteTemplate,\r\n    ErrorTemplate\r\n}\r\n\r\n@Component({\r\n    selector: \"facebook-login\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"this.currentTemplate\" [ngOutletContext]=\"{ $implicit: this }\"></ng-template>\r\n               <ng-template #GenericFacebookError let-fb>\r\n                    <p>Unable to perform the task:</p>\r\n                    <span>{{ fb.payload.message }}</span>\r\n               </ng-template>\r\n              `,\r\n    viewProviders: [FacebookService]\r\n})\r\nexport class FacebookLoginComponent extends TemplateBaseComponent implements OnInit {\r\n    @ViewChild(\"GenericFacebookError\") genericFacebookErrorTemplate: TemplateRef<any>;\r\n    @ContentChild(\"FacebookError\") facebookErrorTemplate: TemplateRef<any>;\r\n    @ContentChild(\"FacebookButton\") facebookButtonTemplate: TemplateRef<any>;\r\n\r\n    facebookButtonTemplateViewRef: EmbeddedViewRef<any>;\r\n    viewState$: FacebookLoginViewState = FacebookLoginViewState.ButtonTemplate;\r\n    user: any;\r\n    memberStatus = enums.MemberStatus;\r\n    status: enums.MemberStatus;\r\n    payload: MemberPayload;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(NgZone) protected ngZone: NgZone,\r\n        @Inject(FacebookService) protected facebookService: FacebookService,\r\n        @Inject(bl.ConfigService) protected configService: bl.ConfigService,\r\n        @Inject(bl.UmbracoAjaxService) protected umbracoAjaxService: bl.UmbracoAjaxService,\r\n        @Inject(LoginEventService) protected loginEventService: LoginEventService) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    getTemplate(): TemplateRef<any> {\r\n        let template: TemplateRef<any> = null;\r\n        switch (this.viewState) {\r\n            case FacebookLoginViewState.LoginCompleteTemplate:\r\n                break;\r\n            case FacebookLoginViewState.ErrorTemplate:\r\n                if (this.facebookErrorTemplate) {\r\n                    template = this.facebookErrorTemplate;\r\n                } else {\r\n                    template = this.genericFacebookErrorTemplate;\r\n                }\r\n                break;\r\n            default:\r\n                template = this.facebookButtonTemplate;\r\n        }\r\n\r\n        return template;\r\n    }\r\n\r\n    facebookLogin($event: Event) {\r\n        $event.preventDefault();\r\n        let self = this;\r\n        this.viewState = FacebookLoginViewState.ButtonTemplate;\r\n        this.facebookService.login({ scope: \"email,user_birthday,public_profile\", return_scopes: true })\r\n            .then(\r\n            (response: FacebookLoginResponse) => {\r\n                this.ngZone.run(() => {\r\n                    this.umbracoAjaxService.post(\"Facebook\", \"LoginPost\", { accessToken: response.authResponse.accessToken })\r\n                        .catch((payload: MemberPayload) => {\r\n                            this.user = undefined;\r\n                            this.payload = payload;\r\n                            this.status = this.payload.status;\r\n                            this.viewState = FacebookLoginViewState.ErrorTemplate;\r\n                            this.loginEventService.emit(LoginEventType.GenericError, payload);\r\n                        })\r\n                        .then((payload: MemberPayload) => {\r\n                            if (payload.messageType === enums.GenericMessages.Success) {\r\n                                self.user = payload.user;\r\n                                this.loginEventService.emit(LoginEventType.Success, payload);\r\n                                this.viewState = FacebookLoginViewState.LoginCompleteTemplate;\r\n                            }\r\n                        });\r\n                });\r\n            },\r\n            (error: any) => console.error(error));\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.configService.ensureConfigs()\r\n            .then(configs => {\r\n                $script(\"https://connect.facebook.net/en_US/sdk.js\",\r\n                    () => {\r\n                        let fbParams: FacebookInitParams = {\r\n                            appId: configs[\"FacebookAppId\"],\r\n                            version: configs[\"FacebookApiVersion\"],\r\n                            xfbml: true,\r\n                            cookie: true\r\n                        };\r\n                        this.facebookService.init(fbParams);\r\n                    });\r\n            });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/facebook/facebook-login.component.ts","import { FacebookLoginComponent } from \"./facebook-login.component\";\r\nimport { FacebookLoginCompleteComponent } from \"./facebook-login-complete.component\";\r\n\r\nexport const facebookComponents = [\r\n    FacebookLoginComponent,\r\n    FacebookLoginCompleteComponent\r\n];\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/facebook/index.ts","import { Component, Inject, NgZone, TemplateRef, ContentChild, ChangeDetectorRef, ViewContainerRef, OnInit, AfterContentInit } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormBuilder } from \"@angular/forms\";\r\nimport { IMemberPayload } from \"../../abstraction/IMemberPayload\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\nimport * as bl from \"../../blueleet\";\r\nimport { LoginEventService, LoginEventType } from \"../../loginEvent.service\";\r\nimport { ValidationService } from \"../../validation.service\";\r\nimport * as enums from \"../../enums/\";\r\n\r\nexport enum ForgotPasswordViewState {\r\n    None,\r\n    DefaultTemplate,\r\n    NewPasswordTemplate,\r\n    MailSent\r\n}\r\n\r\n@Component({\r\n    selector: \"forgot-password\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"this.currentTemplate\" [ngOutletContext]=\"{ $implicit: this }\"></ng-template>`\r\n})\r\nexport class ForgotPasswordComponent extends TemplateBaseComponent implements OnInit, AfterContentInit {\r\n    @ContentChild(\"NewPassword\") newPasswordTemplate: TemplateRef<any>;\r\n    @ContentChild(\"MailSent\") mailSentTemplate: TemplateRef<any>;\r\n    forgotPasswordForm: FormGroup;\r\n    payload: IMemberPayload;\r\n    token: string;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(FormBuilder) private formBuilder: FormBuilder,\r\n        @Inject(NgZone) private ngZone: NgZone,\r\n        @Inject(bl.UmbracoAjaxService) private umbracoAjaxService: bl.UmbracoAjaxService,\r\n        @Inject(LoginEventService) private loginEventService: LoginEventService\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    get viewState(): ForgotPasswordViewState {\r\n        return this.viewState$;\r\n    }\r\n\r\n    set viewState(value: ForgotPasswordViewState) {\r\n        this.viewState$ = value;\r\n        this.updateTemplate();\r\n    }\r\n\r\n    getTemplate(): TemplateRef<any> {\r\n        let template = null;\r\n\r\n        switch (this.viewState) {\r\n            case ForgotPasswordViewState.DefaultTemplate:\r\n                template = this.defaultTemplate;\r\n                break;\r\n            case ForgotPasswordViewState.NewPasswordTemplate:\r\n                template = this.newPasswordTemplate;\r\n                break;\r\n            case ForgotPasswordViewState.MailSent:\r\n                template = this.mailSentTemplate;\r\n                break;\r\n        }\r\n\r\n        return template;\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (!Object.isNullOrUndefined(this.payload) && this.payload.messageType === enums.GenericMessages.Danger) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    doSubmit($event: Event) {\r\n        $event.preventDefault();\r\n\r\n        this.ngZone.run(() => {\r\n            this.umbracoAjaxService.post(\"MemberSurface\", \"ForgotPasswordPost\", this.forgotPasswordForm.value)\r\n                .catch((error: any) => {\r\n                    this.payload = error;\r\n                    if (error.messageType === enums.GenericMessages.Danger && error.status === (enums.MemberStatus.AuthorizationFailure || enums.MemberStatus.FacebookIntegrated)) {\r\n                        this.loginEventService.emit(LoginEventType.SignInError, error);\r\n                    } else {\r\n                        this.loginEventService.emit(LoginEventType.GenericError, error);\r\n                    }\r\n                })\r\n                .then((value: IMemberPayload) => {\r\n                    if (value) {\r\n                        this.payload = value;\r\n                        if (value.messageType === enums.GenericMessages.Success) {\r\n                            this.viewState = ForgotPasswordViewState.MailSent;\r\n                        }\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    doSubmitNewPassword($event: Event) {\r\n        $event.preventDefault();\r\n\r\n        this.ngZone.run(() => {\r\n            this.umbracoAjaxService.post(\"MemberSurface\", \"NewPasswordPost\", this.forgotPasswordForm.value)\r\n                .catch((error: any) => {\r\n                    this.payload = error;\r\n                    if (error.messageType === enums.GenericMessages.Danger && error.status === (enums.MemberStatus.AuthorizationFailure || enums.MemberStatus.FacebookIntegrated)) {\r\n                        this.loginEventService.emit(LoginEventType.SignInError, error);\r\n                    } else if (error.messageType === enums.GenericMessages.Danger && error.status === enums.MemberStatus.LoginExpired) {\r\n                        this.viewState = ForgotPasswordViewState.DefaultTemplate;\r\n                        this.forgotPasswordForm = this.formBuilder.group({\r\n                            email: [\"\", Validators.compose([Validators.required, ValidationService.email])]\r\n                        });\r\n                        if (history) {\r\n                            // Remove the query string.\r\n                            history.pushState(null, \"\", location.href.split(\"?\")[0]);\r\n                        }\r\n                    } else {\r\n                        this.loginEventService.emit(LoginEventType.GenericError, error);\r\n                    }\r\n                })\r\n                .then((value: IMemberPayload) => {\r\n                    if (value) {\r\n                        this.payload = value;\r\n                        if (value.messageType === enums.GenericMessages.Success) {\r\n                            this.loginEventService.emit(LoginEventType.ShowLoginView, value);\r\n                        }\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.token = Object.getQueryStringValue(\"token\");\r\n        if (Object.isNullOrUndefined(this.token)) {\r\n            this.viewState = ForgotPasswordViewState.DefaultTemplate;\r\n        } else {\r\n            this.viewState = ForgotPasswordViewState.NewPasswordTemplate;\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.token = Object.getQueryStringValue(\"token\");\r\n        if (Object.isNullOrUndefined(this.token)) {\r\n            this.forgotPasswordForm = this.formBuilder.group({\r\n                email: [\"\", Validators.compose([Validators.required, ValidationService.email])]\r\n            });\r\n        } else {\r\n            // Switch the view to forgot password\r\n            this.loginEventService.emit(LoginEventType.ShowForgotPasswordView);\r\n            let password = this.formBuilder.control(\"\", ValidationService.passwordValidator(8));\r\n            let confirmPassword = this.formBuilder.control(\"\", ValidationService.equalTo(password, \"Password\", \"Confirm Password\"));\r\n            this.forgotPasswordForm = this.formBuilder.group({\r\n                password: password,\r\n                confirmPassword: confirmPassword\r\n            });\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/forgot-password/forgot-password.component.ts","import {\r\n    Component, Inject, NgZone, ViewChild, ChangeDetectorRef,\r\n    TemplateRef, ViewContainerRef, OnInit, AfterContentInit\r\n    } from \"@angular/core\";\r\nimport { FormGroup, FormArray, FormBuilder } from \"@angular/forms\";\r\nimport { DomSanitizer } from \"@angular/platform-browser\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\nimport * as bl from \"../../blueleet\";\r\nimport * as enums from \"../../enums/\";\r\nimport * as Profilecomponent from \"../profile/profile.component\";\r\nconst _ = require(\"lodash\");\r\n\r\nexport interface IfilterForm {\r\n    all: boolean;\r\n    hairColors: boolean[];\r\n    hairLengths: boolean[];\r\n    colorTypes: boolean[];\r\n    textures: boolean[];\r\n}\r\n\r\n@Component({\r\n    selector: \"image-wall\",\r\n    template: require(\"./templates/image-wall.html\")\r\n})\r\nexport class ImageWallComponent extends TemplateBaseComponent implements OnInit, AfterContentInit {\r\n    @ViewChild(\"DefaultTemplate\") defaultTemplate: TemplateRef<any>;\r\n    hairColors: string[];\r\n    hairLengths: string[];\r\n    colorTypes: string[];\r\n    textures: string[];\r\n    photos: Profilecomponent.IPhoto[];\r\n\r\n    filterForm: FormGroup;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(NgZone) private ngZone: NgZone,\r\n        @Inject(FormBuilder) private formBuilder: FormBuilder,\r\n        @Inject(DomSanitizer) private sanitizer: DomSanitizer,\r\n        @Inject(bl.UmbracoAjaxService) private umbracoAjaxService: bl.UmbracoAjaxService\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    getFilterLabel(items: string[], index: number) {\r\n        return items[index];\r\n    }\r\n\r\n    getSizedUrl(photo: Profilecomponent.IPhoto, width: number): string {\r\n        return `${photo.url}?width=${width}`;\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.ngZone.run(() => {\r\n            const cssImportPromise = System.import(\"./image-wall.scss\");\r\n            const getPreValues = this.umbracoAjaxService.post(\"Profile\", \"GetPhotoPrevaluesPost\").then(value => {\r\n                this.hairColors = value.hairColor;\r\n                this.hairLengths = value.hairLength;\r\n                this.colorTypes = value.colorType;\r\n                this.textures = value.texture;\r\n            });\r\n\r\n            Promise.all([cssImportPromise, getPreValues]).then(() => {\r\n                this.filterForm = this.formBuilder.group({\r\n                    all: [],\r\n                    hairColors: this.formBuilder.array([]),\r\n                    hairLengths: this.formBuilder.array([]),\r\n                    colorTypes: this.formBuilder.array([]),\r\n                    textures: this.formBuilder.array([])\r\n                });\r\n\r\n                this.ngZone.run(() => {\r\n                    this.umbracoAjaxService.post(\"ImageWall\", \"FilterPhotosPost\", { all: true })\r\n                        .then((res: any) => {\r\n                            console.log(res);\r\n                            this.photos = res;\r\n                        });\r\n                });\r\n\r\n                const controlAll = <FormGroup>this.filterForm.controls[\"all\"];\r\n\r\n                const controlHairColors = <FormArray>this.filterForm.controls[\"hairColors\"];\r\n                this.hairColors.forEach((value) => {\r\n                    controlHairColors.push(this.formBuilder.control(false));\r\n                });\r\n\r\n                const controlHairLengths = <FormArray>this.filterForm.controls[\"hairLengths\"];\r\n                this.hairLengths.forEach((value) => {\r\n                    controlHairLengths.push(this.formBuilder.control(false));\r\n                });\r\n\r\n                const controlColorTypes = <FormArray>this.filterForm.controls[\"colorTypes\"];\r\n                this.colorTypes.forEach((value) => {\r\n                    controlColorTypes.push(this.formBuilder.control(false));\r\n                });\r\n\r\n                const controlTextures = <FormArray>this.filterForm.controls[\"textures\"];\r\n                this.textures.forEach((value) => {\r\n                    controlTextures.push(this.formBuilder.control(false));\r\n                });\r\n\r\n                controlAll.valueChanges.subscribe((value: boolean) => {\r\n                    if (value) {\r\n                        controlHairColors.reset(false, { onlySelf: true, emitEvent: false });\r\n                        controlHairLengths.reset(false, { onlySelf: true, emitEvent: false });\r\n                        controlColorTypes.reset(false, { onlySelf: true, emitEvent: false });\r\n                        controlTextures.reset(false, { onlySelf: true, emitEvent: false });\r\n\r\n                        if (this.filterForm.dirty === false) {\r\n                            return;\r\n                        }\r\n\r\n                        this.ngZone.run(() => {\r\n                            this.umbracoAjaxService.post(\"ImageWall\", \"FilterPhotosPost\", { all: true })\r\n                                .then((res: any) => {\r\n                                    console.log(res);\r\n                                    this.photos = res;\r\n                                });\r\n                        });\r\n                    }\r\n                });\r\n\r\n                this.filterForm.valueChanges.debounceTime(500).subscribe((v: IfilterForm) => {\r\n                    let result = { hairColors: [], hairLengths: [], colorTypes: [], textures: [] };\r\n\r\n                    result.hairColors = _.zipWith(this.hairColors, v.hairColors, (value, enabled) => ({ value, enabled }));\r\n                    result.hairColors = _.map(_.filter(result.hairColors, o => o.enabled), \"value\");\r\n\r\n                    result.hairLengths = _.zipWith(this.hairLengths, v.hairLengths, (value, enabled) => ({ value, enabled }));\r\n                    result.hairLengths = _.map(_.filter(result.hairLengths, o => o.enabled), \"value\");\r\n\r\n                    result.colorTypes = _.zipWith(this.colorTypes, v.colorTypes, (value, enabled) => ({ value, enabled }));\r\n                    result.colorTypes = _.map(_.filter(result.colorTypes, o => o.enabled), \"value\");\r\n\r\n                    result.textures = _.zipWith(this.textures, v.textures, (value, enabled) => ({ value, enabled }));\r\n                    result.textures = _.map(_.filter(result.textures, o => o.enabled), \"value\");\r\n\r\n                    this.ngZone.run(() => {\r\n                        this.umbracoAjaxService.post(\"ImageWall\", \"FilterPhotosPost\", result)\r\n                            .then((res: any) => {\r\n                                console.log(res);\r\n                                this.photos = res;\r\n                            });\r\n                    });\r\n                });\r\n\r\n                this.viewState = enums.DefaultViewState.DefaultTemplate;\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.viewState$ = enums.DefaultViewState.None;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/image-wall/image-wall.component.ts","module.exports = \"<ng-template [ngTemplateOutlet]=\\\"this.currentTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\">\\r\\n</ng-template>\\r\\n<ng-template #DefaultTemplate>\\r\\n    <!--<h2>{{ this.filterForm.value | json }}</h2>-->\\r\\n    <form [formGroup]=\\\"filterForm\\\">\\r\\n        <div class=\\\"toolbox-row\\\">\\r\\n            <label class=\\\"toolbox-label\\\">Filtrera efter</label>\\r\\n            <div class=\\\"btn-group\\\">\\r\\n                <label class=\\\"btn btn-secondary\\\" formControlName=\\\"all\\\" btnCheckbox>Allt</label>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"toolbox-row\\\">\\r\\n            <label class=\\\"toolbox-label\\\">Hårfärg</label>\\r\\n            <div class=\\\"btn-group\\\">\\r\\n                <div formArrayName=\\\"hairColors\\\" class=\\\"form-array\\\">\\r\\n                    <div *ngFor=\\\"let control of filterForm?.controls?.hairColors?.controls; let i=index\\\">\\r\\n                        <label class=\\\"btn btn-secondary\\\" [formControlName]=\\\"i\\\" btnCheckbox>{{ getFilterLabel(this.hairColors, i) }}</label>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"toolbox-row\\\">\\r\\n            <label class=\\\"toolbox-label\\\">Hårlängd</label>\\r\\n            <div class=\\\"btn-group\\\">\\r\\n                <div formArrayName=\\\"hairLengths\\\" class=\\\"form-array\\\">\\r\\n                    <div *ngFor=\\\"let control of filterForm?.controls?.hairLengths?.controls; let i=index\\\">\\r\\n                        <label class=\\\"btn btn-secondary\\\" [formControlName]=\\\"i\\\" btnCheckbox>{{ getFilterLabel(this.hairLengths, i) }}</label>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!--<div class=\\\"toolbox-row\\\">\\r\\n            <label class=\\\"toolbox-label\\\">Färgtyp</label>\\r\\n            <div class=\\\"btn-group\\\">\\r\\n                <div formArrayName=\\\"colorTypes\\\" class=\\\"form-array\\\">\\r\\n                    <div *ngFor=\\\"let control of filterForm?.controls?.colorTypes?.controls; let i=index\\\">\\r\\n                        <label class=\\\"btn btn-secondary\\\" [formControlName]=\\\"i\\\" btnCheckbox>{{ getFilterLabel(this.colorTypes, i) }}</label>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"toolbox-row\\\">\\r\\n            <label class=\\\"toolbox-label\\\">Texturer</label>\\r\\n            <div class=\\\"btn-group\\\">\\r\\n                <div formArrayName=\\\"colorTypes\\\" class=\\\"form-array\\\">\\r\\n                    <div *ngFor=\\\"let control of filterForm?.controls?.textures?.controls; let i=index\\\">\\r\\n                        <label class=\\\"btn btn-secondary\\\" [formControlName]=\\\"i\\\" btnCheckbox>{{ getFilterLabel(this.textures, i) }}</label>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>-->\\r\\n    </form>\\r\\n    <div class=\\\"row widget widget-flat widget-card-list\\\">\\r\\n        <div class=\\\"widget-card\\\" *ngFor=\\\"let item of this?.photos; let i = index\\\">\\r\\n            <div class=\\\"card\\\">\\r\\n                <a class=\\\"card-link\\\" [href]=\\\"item.url\\\">\\r\\n                    <picture>\\r\\n                        <source media=\\\"(min-width: 960px)\\\" [srcset]=\\\"getSizedUrl(item, 960)\\\">\\r\\n                        <source media=\\\"(min-width: 575px)\\\" [srcset]=\\\"getSizedUrl(item, 575)\\\">\\r\\n                        <source media=\\\"(min-width: 385px)\\\" [srcset]=\\\"getSizedUrl(item, 385)\\\">\\r\\n                        <img class=\\\"card-image img-thumbnail\\\" [src]=\\\"getSizedUrl(item, 385)\\\" [alt]=\\\"item.name\\\">\\r\\n                    </picture>\\r\\n                </a>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</ng-template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/image-wall/templates/image-wall.html\n// module id = ./src/typescript/components/image-wall/templates/image-wall.html\n// module chunks = 3","import { Component, Inject, NgZone, ViewContainerRef, ChangeDetectorRef, Renderer, OnInit } from \"@angular/core\";\r\nimport { LoginEventService, LoginEventType } from \"../../loginEvent.service\";\r\nimport { IMemberPayload } from \"../../abstraction/IMemberPayload\";\r\nimport * as enums from \"../../enums/\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\n\r\n@Component({\r\n    selector: \"login-signup-complete\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"this.currentTemplate\" [ngOutletContext]=\"{ $implicit: this }\"></ng-template>`,\r\n    styles: [require(\"./login-signup.scss\").toString()]\r\n})\r\nexport class LoginSignupCompleteComponent extends TemplateBaseComponent implements OnInit {\r\n    viewState$: enums.DefaultViewState = enums.DefaultViewState.None;\r\n    model: IMemberPayload;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(NgZone) protected ngZone: NgZone,\r\n        @Inject(Renderer) protected renderer: Renderer,\r\n        @Inject(LoginEventService) protected loginEventService: LoginEventService) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    isNeedApproval(): boolean {\r\n        if (Object.isNullOrUndefined(this.model)) {\r\n            return false;\r\n        }\r\n\r\n        return this.model.status === enums.MemberStatus.NeedApproval;\r\n    }\r\n\r\n    isEmailAuthorisationNeeded(): boolean {\r\n        if (Object.isNullOrUndefined(this.model)) {\r\n            return false;\r\n        }\r\n\r\n        return this.model.status === enums.MemberStatus.EmailAuthorisationNeeded;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.loginEventService.on(LoginEventType.Success).subscribe(value => {\r\n            this.ngZone.run(() => {\r\n                this.model = value;\r\n                this.viewState = enums.DefaultViewState.DefaultTemplate;\r\n            });\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/login-signup/login-signup-complete.component.ts","import { Component, Inject, NgZone, QueryList, ContentChildren, ContentChild, TemplateRef, ViewContainerRef, Renderer, OnInit, AfterContentInit } from \"@angular/core\";\r\nimport { LoginEventService, LoginEventType } from \"../../loginEvent.service\";\r\nimport { BootstrapFormInputComponent } from \"../bootstrap/form-input.component\";\r\nimport { UserService } from \"../../user.service\";\r\nimport { IMemberPayload as MemberPayload } from \"../../abstraction/IMemberPayload\";\r\nimport { GenericMessages } from \"../../enums/generic-messages-enum\";\r\nimport { MemberStatus } from \"../../enums/member-status-enum\";\r\nimport * as bl from \"../../blueleet\";\r\nimport {IPayload as Payload} from \"../../abstraction/IPayload\";\r\n\r\nexport enum LoginSignupViewState {\r\n    None,\r\n    LoginTemplate,\r\n    SignupTemplate,\r\n    ForgotPasswordTemplate\r\n}\r\n\r\n@Component({\r\n    selector: \"login-signup\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"this.currentTemplate\" [ngOutletContext]=\"{ $implicit: this }\"></ng-template>`,\r\n    styles: [require(\"./login-signup.scss\").toString()]\r\n})\r\nexport class LoginSignupComponent implements OnInit, AfterContentInit {\r\n    @ContentChild(\"Login\") loginTemplate: TemplateRef<any>;\r\n    @ContentChild(\"Signup\") signupTemplate: TemplateRef<any>;\r\n    @ContentChild(\"ForgotPassword\") forgotPasswordTemplate: TemplateRef<any>;\r\n    @ContentChildren(BootstrapFormInputComponent, { descendants: true }) vc: QueryList<BootstrapFormInputComponent>;\r\n    viewState$: LoginSignupViewState = LoginSignupViewState.LoginTemplate;\r\n\r\n    get viewState() {\r\n        return this.viewState$;\r\n    }\r\n\r\n    set viewState(value: LoginSignupViewState) {\r\n        this.viewState$ = value;\r\n        this.currentTemplate = this.getTemplate();\r\n    }\r\n\r\n    currentTemplate: TemplateRef<any>;\r\n\r\n    constructor(\r\n        @Inject(NgZone) protected ngZone: NgZone,\r\n        @Inject(ViewContainerRef) protected viewContainerRef: ViewContainerRef,\r\n        @Inject(Renderer) protected renderer: Renderer,\r\n        @Inject(LoginEventService) protected loginEventService: LoginEventService,\r\n        @Inject(UserService) protected userService: UserService,\r\n        @Inject(bl.UmbracoAjaxService) private umbracoAjaxService: bl.UmbracoAjaxService) {\r\n    }\r\n\r\n    getTemplate(): TemplateRef<any> {\r\n        switch (this.viewState) {\r\n            case LoginSignupViewState.LoginTemplate:\r\n                return this.loginTemplate;\r\n            case LoginSignupViewState.SignupTemplate:\r\n                return this.signupTemplate;\r\n            case LoginSignupViewState.ForgotPasswordTemplate:\r\n                return this.forgotPasswordTemplate;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    showLogin($event: Event): void {\r\n        $event.preventDefault();\r\n        this.ngZone.run(() => {\r\n            this.viewState = LoginSignupViewState.LoginTemplate;\r\n            console.log(this.vc);\r\n        });\r\n    }\r\n\r\n    showSignup($event: Event): void {\r\n        $event.preventDefault();\r\n        this.ngZone.run(() => {\r\n            this.viewState = LoginSignupViewState.SignupTemplate;\r\n            console.log(this.vc);\r\n        });\r\n    }\r\n\r\n    showForgotPassword($event: Event): void {\r\n        $event.preventDefault();\r\n        this.ngZone.run(() => {\r\n            this.viewState = LoginSignupViewState.ForgotPasswordTemplate;\r\n        });\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.userService.getMember().catch((reason: MemberPayload) => {\r\n            if (reason.status === MemberStatus.LoginExpired) {\r\n                this.currentTemplate = this.getTemplate();\r\n                this.vc.changes.subscribe((value: BootstrapFormInputComponent) => {\r\n                });\r\n            }\r\n        }).then((value: MemberPayload) => {\r\n            if (value && value.messageType === GenericMessages.Success) {\r\n                window.location.href = \"/\";\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const forgotPassToken = Object.getQueryStringValue(\"token\");\r\n        if (!Object.isNullOrUndefined(forgotPassToken)) {\r\n            this.viewState = LoginSignupViewState.ForgotPasswordTemplate;\r\n        }\r\n\r\n        this.loginEventService.on(LoginEventType.None).subscribe((): void => {\r\n            this.viewState = LoginSignupViewState.None;\r\n        });\r\n        this.loginEventService.on(LoginEventType.Success).subscribe((): void => {\r\n            this.viewState = LoginSignupViewState.None;\r\n        });\r\n        this.loginEventService.on(LoginEventType.ShowLoginView).subscribe((): void => {\r\n            this.viewState = LoginSignupViewState.LoginTemplate;\r\n        });\r\n        this.loginEventService.on(LoginEventType.ShowSignupView).subscribe((): void => {\r\n            this.viewState = LoginSignupViewState.SignupTemplate;\r\n        });\r\n        this.loginEventService.on(LoginEventType.ShowForgotPasswordView).subscribe((): void => {\r\n            this.viewState = LoginSignupViewState.ForgotPasswordTemplate;\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/login-signup/login-signup.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./login-signup.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./login-signup.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./login-signup.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/login-signup/login-signup.scss\n// module id = ./src/typescript/components/login-signup/login-signup.scss\n// module chunks = 3","import { Component, Inject, Input, NgZone, ViewContainerRef, ChangeDetectorRef, Renderer, OnInit } from \"@angular/core\";\r\nimport { LoginEventService, LoginEventType } from \"../../loginEvent.service\";\r\nimport { IMemberPayload } from \"../../abstraction/IMemberPayload\";\r\nimport * as enums from \"../../enums/\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\nimport { Protected } from \"../../decorators/Protected\";\r\nimport * as bl from \"../../blueleet\";\r\n\r\n// @Protected\r\n@Component({\r\n    selector: \"auth-signout\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"this.currentTemplate\" [ngOutletContext]=\"{ $implicit: this }\"></ng-template>`,\r\n    styles: [require(\"./signout.scss\").toString()]\r\n})\r\nexport class SignoutComponent extends TemplateBaseComponent implements OnInit {\r\n    viewState$: enums.DefaultViewState = enums.DefaultViewState.DefaultTemplate;\r\n    model: IMemberPayload;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(NgZone) protected ngZone: NgZone,\r\n        @Inject(Renderer) protected renderer: Renderer,\r\n        @Inject(bl.UmbracoAjaxService) protected umbracoAjaxService: bl.UmbracoAjaxService) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    signout() {\r\n        this.ngZone.run(() => {\r\n            this.umbracoAjaxService.post(\"MemberSurface\", \"SignOutPost\").then((value: IMemberPayload) => {\r\n                window.location.href = value.loginUrl;\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.ngZone.run(() => {\r\n            this.umbracoAjaxService.post(\"MemberSurface\", \"GetMemberPost\").then(value => {\r\n                this.model = value;\r\n            }).catch((reason: IMemberPayload) => {\r\n                if (reason.status === enums.MemberStatus.LoginExpired) {\r\n                    this.viewState = enums.DefaultViewState.None;\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/login-signup/signout.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./signout.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./signout.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./signout.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/login-signup/signout.scss\n// module id = ./src/typescript/components/login-signup/signout.scss\n// module chunks = 3","import { Component, Inject, NgZone, Input, ElementRef, ViewChild, ContentChild, ChangeDetectorRef, TemplateRef, ViewContainerRef, OnInit, AfterViewInit, ChangeDetectionStrategy } from \"@angular/core\";\r\nimport { FormGroup, FormArray, FormBuilder, Validators } from \"@angular/forms\";\r\nimport { ModalDirective } from \"ngx-bootstrap/modal\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\nimport * as bl from \"../../blueleet\";\r\nimport * as enums from \"../../enums/\";\r\nimport { UserService } from \"../../user.service\";\r\nimport { NotificationService, INotification, PagedNotificationResult } from \"./notification.service\";\r\nconst _ = require(\"lodash\");\r\n\r\n@Component({\r\n    selector: \"notification-wall\",\r\n    template: require(\"./templates/notification-wall.html\"),\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [NotificationService]\r\n})\r\nexport class NotificationWallComponent extends TemplateBaseComponent implements OnInit, AfterViewInit {\r\n    @ViewChild(\"DefaultTemplate\") defaultTemplate: TemplateRef<any>;\r\n    @ViewChild(\"notesModal\") public notesModal: ModalDirective;\r\n    @ContentChild(\"ContentTemplat\") contentTemplate: TemplateRef<any>;\r\n    @ContentChild(\"ModalHeaderTemplat\") modalHeaderTemplat: TemplateRef<any>;\r\n    @ContentChild(\"ModalContentTemplat\") modalContentTemplat: TemplateRef<any>;\r\n\r\n    @Input() memberId: number;\r\n    @Input() updateInterval: number = 5000;\r\n    @Input() waitMessage: string = \"...\";\r\n    @Input() modalHeader: string = \"\";\r\n\r\n    notifications: PagedNotificationResult = new PagedNotificationResult();\r\n    isUpdating: boolean = false;\r\n    busy: Promise<any>[] = [];\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(NgZone) private ngZone: NgZone,\r\n        @Inject(bl.UmbracoAjaxService) private umbracoAjaxService: bl.UmbracoAjaxService,\r\n        @Inject(UserService) public userService: UserService,\r\n        @Inject(NotificationService) private notificationService: NotificationService\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    openModalNotes($event: Event) {\r\n        $event.preventDefault();\r\n\r\n        if (this.hasNotifications() === false) {\r\n            return;\r\n        }\r\n\r\n        this.notesModal.config = {\r\n            backdrop: true,\r\n            keyboard: true\r\n        };\r\n\r\n        this.notesModal.show();\r\n    }\r\n\r\n    hasNotifications(): boolean {\r\n        return !_.isEmpty(this.notifications);\r\n    }\r\n\r\n    removeNotification(notification: INotification) {\r\n        this.notificationService.removeNotification(this.memberId, notification);\r\n    }\r\n\r\n    removeAllNotifications() {\r\n        this.notificationService.removeAllNotifications(this.memberId);\r\n    }\r\n\r\n    closeModalNotes() {\r\n        this.notesModal.hide();\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.notificationService.onNotificationsChange.subscribe(value => {\r\n            if (_.isEmpty(value.items)) {\r\n                if (this.hasNotifications()) {\r\n                    this.notifications = new PagedNotificationResult();\r\n                    this.changeDetectorRef.markForCheck();\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            this.notifications = value;\r\n            this.changeDetectorRef.markForCheck();\r\n        });\r\n\r\n        setInterval(() => {\r\n            this.updateState();\r\n        }, this.updateInterval);\r\n    }\r\n\r\n    updateState() {\r\n        if (this.isUpdating) {\r\n            return;\r\n        }\r\n\r\n        this.isUpdating = true;\r\n        this.notificationService.updateNotifications(this.memberId).then(() => {\r\n            this.isUpdating = false;\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        System.import(\"./notification-wall.scss\");\r\n        this.viewState$ = enums.DefaultViewState.DefaultTemplate;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/notification/notification-wall.component.ts","import { Injectable, Inject, NgZone } from \"@angular/core\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport * as bl from \"../../blueleet\";\r\nimport * as enums from \"../../enums/\";\r\nconst _ = require(\"lodash\");\r\n\r\n@Injectable()\r\nexport class NotificationService {\r\n    public onNotificationsChange: Rx.BehaviorSubject<IPagedResult<INotification>> = new Rx.BehaviorSubject(new PagedNotificationResult());\r\n\r\n    constructor( @Inject(bl.UmbracoAjaxService) private umbracoAjaxService: bl.UmbracoAjaxService) { }\r\n\r\n    public updateNotifications(memberId: number): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            return this.umbracoAjaxService.post(\"Notification\", \"GetNotificationsPost\", { memberId: memberId })\r\n                .catch((value) => {\r\n                    reject(value);\r\n                    this.onNotificationsChange.error(value);\r\n                })\r\n                .then((value: IPagedResult<INotification>) => {\r\n                    // No participants.\r\n                    if (_.isEmpty(value.items) && _.isEmpty(this.onNotificationsChange.value.items) === false) {\r\n                        resolve(new PagedNotificationResult());\r\n                        this.onNotificationsChange.next(new PagedNotificationResult());\r\n                    } else if (_.isEmpty(value.items) === false && _.isEmpty(this.onNotificationsChange.value.items) === false) {\r\n                        let diff = _(value).differenceBy(this.onNotificationsChange.value.items, \"memberId\").value(); // Filter out the already existing items.\r\n                        if (_.isEmpty(diff)) {\r\n                            console.log(\"updateNotifications => No changes.\");\r\n                            // No changes\r\n                            resolve();\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    resolve(value);\r\n                    this.onNotificationsChange.next(value);\r\n                });\r\n        });\r\n    }\r\n\r\n    public removeNotification(memberId: number, notification: INotification): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            return this.umbracoAjaxService.post(\"Notification\", \"RemoveNotificationPost\", { memberId: memberId, messageId: notification.messageId })\r\n                .catch((value) => {\r\n                    reject(value);\r\n                    this.onNotificationsChange.error(value);\r\n                }).then(value => {\r\n                    resolve(value);\r\n\r\n                    const index = this.onNotificationsChange.value.items.indexOf(notification);\r\n                    if (index !== -1) {\r\n                        const res = this.onNotificationsChange.value;\r\n                        res.items.splice(index, 1);\r\n                        this.onNotificationsChange.next(res);\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    public removeAllNotifications(memberId: number): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            return this.umbracoAjaxService.post(\"Notification\", \"RemoveAllNotificationsPost\", { memberId: memberId })\r\n                .catch((value) => {\r\n                    reject(value);\r\n                    this.onNotificationsChange.error(value);\r\n                }).then(value => {\r\n                    resolve(value);\r\n                    this.onNotificationsChange.next(null);\r\n                });\r\n        });\r\n    }\r\n}\r\n\r\nexport class PagedNotificationResult implements IPagedResult<INotification> {\r\n    items: INotification[] = [];\r\n    pageNumber: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport interface INotification {\r\n    messageId: number;\r\n    message: string;\r\n    createDate: Date;\r\n    fromMember: any;\r\n    toMember: any;\r\n}\r\n\r\nexport interface IPagedResult<TEntity> {\r\n    items: TEntity[];\r\n    pageNumber: number;\r\n    totalPages: number;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/notification/notification.service.ts","module.exports = \"<ng-template [ngTemplateOutlet]=\\\"this.currentTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\"></ng-template>\\r\\n<ng-template #DefaultTemplate>\\r\\n    <ng-template *ngIf=\\\"this?.contentTemplate\\\" [ngTemplateOutlet]=\\\"contentTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\"></ng-template>\\r\\n    <div bsModal #notesModal=\\\"bs-modal\\\" class=\\\"modal fade modal-notifications\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"notifications modal\\\" aria-hidden=\\\"true\\\">\\r\\n        <div class=\\\"modal-dialog modal-lg\\\">\\r\\n            <div class=\\\"modal-content\\\">\\r\\n                <div class=\\\"modal-header\\\">\\r\\n                    <ng-template *ngIf=\\\"this?.modalHeaderTemplat\\\" [ngTemplateOutlet]=\\\"this.modalHeaderTemplat\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\"></ng-template>\\r\\n                    <button type=\\\"button\\\" class=\\\"close pull-right\\\" aria-label=\\\"Close\\\" (click)=\\\"closeModalNotes()\\\">\\r\\n                        <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n                    </button>\\r\\n                </div>\\r\\n                <div class=\\\"modal-body\\\">\\r\\n                    <ng-template *ngIf=\\\"this?.modalContentTemplat\\\" [ngTemplateOutlet]=\\\"this.modalContentTemplat\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\"></ng-template>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"!this.contentTemplate\\\">\\r\\n        <h1>Default template of notifications</h1>\\r\\n    </div>\\r\\n</ng-template>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/notification/templates/notification-wall.html\n// module id = ./src/typescript/components/notification/templates/notification-wall.html\n// module chunks = 3","module.exports = __webpack_public_path__ + \"./assets/components/profile/next.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/profile/next.png\n// module id = ./src/typescript/components/profile/next.png\n// module chunks = 3","module.exports = __webpack_public_path__ + \"./assets/components/profile/prev.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/profile/prev.png\n// module id = ./src/typescript/components/profile/prev.png\n// module chunks = 3","import {\r\n    Component, Inject, ChangeDetectionStrategy, NgZone, HostListener, Input, ElementRef, ViewChild,\r\n    ChangeDetectorRef, TemplateRef, ViewContainerRef, OnInit, AfterContentInit, SimpleChanges, OnChanges\r\n    } from \"@angular/core\";\r\nimport { FormGroup, FormArray, FormBuilder, Validators } from \"@angular/forms\";\r\nimport { Response } from \"@angular/http\";\r\nimport { DomSanitizer } from \"@angular/platform-browser\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\nimport { FileUploader, FileItem, ParsedResponseHeaders } from \"ng2-file-upload\";\r\nimport { ModalDirective } from \"ngx-bootstrap/modal\";\r\nimport * as bl from \"../../blueleet\";\r\nimport * as enums from \"../../enums/\";\r\nconst _ = require(\"lodash\");\r\nrequire(\"./next.png\");\r\nrequire(\"./prev.png\");\r\n\r\nexport interface IPhoto {\r\n    url: string;\r\n    name: string;\r\n    createDate: Date;\r\n    id: number;\r\n    displayName: string;\r\n    hairColor: any;\r\n    hairLength: any;\r\n    colorType: any;\r\n    texture: any;\r\n    isApproved: boolean;\r\n}\r\n\r\nexport interface IProfileEntity {\r\n    user: any;\r\n}\r\n\r\nexport interface IPhotoChange {\r\n    controlIndex: number;\r\n    photo: IPhoto;\r\n}\r\n\r\nexport interface IGetPhotosPayload {\r\n    items: IPhoto[];\r\n    totalPages: number;\r\n}\r\n\r\n@Component({\r\n    selector: \"profile-panel\",\r\n    template: require(\"./templates/profile.html\"),\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ProfileComponent extends TemplateBaseComponent implements OnInit, AfterContentInit, OnChanges {\r\n    @ViewChild(\"photoModal\") public photoModal: ModalDirective;\r\n    @ViewChild(\"DefaultTemplate\") defaultTemplate: TemplateRef<any>;\r\n    @ViewChild(\".pane-photos\") photosPanelElement: ElementRef;\r\n    @Input(\"user-id\") id: number = null;\r\n    profile: IProfileEntity;\r\n    photos: IPhoto[];\r\n    photosPageIndex: number = 1;\r\n    photosTotalPages: number;\r\n    currentEditingPhoto: IPhoto = null;\r\n    currentPhotoIsVisible: boolean = true;\r\n    currentImageIndex: number = 1;\r\n    enableKeybordNav: boolean = false;\r\n    profileForm: FormGroup;\r\n    photosForm: FormGroup;\r\n    avatarForm: FormGroup;\r\n    photoChanges: IPhotoChange[] = [];\r\n    isEditingPhoto: boolean = false;\r\n    uploader: FileUploader = new FileUploader({ url: \"/umbraco/api/Profile/UploadPhotos/\", autoUpload: true, removeAfterUpload: true });\r\n    busy: Promise<any>[] = [];\r\n    showPhotoInfo: boolean = false;\r\n\r\n    hairColors: string[];\r\n    hairLengths: string[];\r\n    colorTypes: string[];\r\n    textures: string[];\r\n\r\n    // ToDo: refactor into common directive or alert service.\r\n    // {\r\n    //    type: 'success',\r\n    //    msg: `<strong>Well done!</strong> You successfully read this important alert message.`\r\n    // },\r\n    // {\r\n    //    type: 'info',\r\n    //    msg: `<strong>Heads up!</strong> This alert needs your attention, but it's not super important.`\r\n    // },\r\n    // {\r\n    //    type: 'danger',\r\n    //    msg: `<strong>Warning!</strong> Better check yourself, you're not looking too good.`\r\n    // }\r\n    alerts: any = [];\r\n\r\n    modalAlerts: any = [];\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(NgZone) private ngZone: NgZone,\r\n        @Inject(FormBuilder) private formBuilder: FormBuilder,\r\n        @Inject(FormBuilder) private sanitizer: DomSanitizer,\r\n        @Inject(bl.UmbracoAjaxService) private umbracoAjaxService: bl.UmbracoAjaxService\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n        setInterval(() => {\r\n            this.changeDetectorRef.markForCheck();\r\n        }, 500);\r\n    }\r\n\r\n    toggleShowInfo() {\r\n        this.showPhotoInfo = !this.showPhotoInfo;\r\n    }\r\n\r\n    approvePhoto(item: IPhoto = this.currentEditingPhoto) {\r\n        this.umbracoAjaxService.post(\"Profile\", \"PhotoApprovalPost\", { imageId: item.id, approve: true }).then((value: Response) => {\r\n            if (value.status === 200) {\r\n                this.currentEditingPhoto.isApproved = true;\r\n            } else {\r\n                this.modalAlerts.push({ type: \"danger\", msg: `${value.status}: Något gick fel.` });\r\n            }\r\n        });\r\n    }\r\n\r\n    disapprovePhoto(item: IPhoto = this.currentEditingPhoto) {\r\n        this.umbracoAjaxService.post(\"Profile\", \"PhotoApprovalPost\", { imageId: item.id, approve: false }).then((value: Response) => {\r\n            if (value.status === 200) {\r\n                this.currentEditingPhoto.isApproved = false;\r\n            } else {\r\n                this.modalAlerts.push({ type: \"danger\", msg: `${value.status}: Något gick fel.` });\r\n            }\r\n        });\r\n    }\r\n\r\n    deletePhoto(item: IPhoto = this.currentEditingPhoto) {\r\n        if (confirm(`Är du säker på att du vill radera ${item.displayName}?`)) {\r\n            const promise = this.umbracoAjaxService.post(\"Profile\", \"DeletePhotoPost\", { id: item.id }).then(() => {\r\n                let index = this.photos.indexOf(item);\r\n                this.photos.splice(index, 1);\r\n                if (index % this.photos.length <= 1) {\r\n                    const newPhoto = this.photos[index];\r\n                    this.setCurrentEditingPhoto(newPhoto);\r\n                } else {\r\n                    this.closeModalPhoto();\r\n                }\r\n            });\r\n            this.busy.push(promise);\r\n        }\r\n    }\r\n\r\n    getSizedUrl(photo: IPhoto, width: number): string {\r\n        if (Object.isNullOrUndefined(photo)) {\r\n            return \"\";\r\n        } else if (Object.isNullOrUndefined(photo.url)) {\r\n            console.log(photo);\r\n            return \"\";\r\n        }\r\n\r\n        return `${photo.url}?width=${width}`;\r\n    }\r\n\r\n    initPhotoChange(photo: IPhoto, controlIndex: number) {\r\n        this.photoChanges.push({ photo: photo, controlIndex: controlIndex });\r\n\r\n        // initialize our address\r\n        return this.formBuilder.group({\r\n            id: [photo.id],\r\n            displayName: [photo.displayName, Validators.required],\r\n            hairColor: [photo.hairColor],\r\n            hairLength: [photo.hairLength],\r\n            colorType: [photo.colorType],\r\n            texture: [photo.texture]\r\n        });\r\n    }\r\n\r\n    mapSelectFor(values: string[]) {\r\n        return _.map(values,\r\n            (item) => {\r\n                return { value: item, text: item };\r\n            });\r\n    }\r\n\r\n    isCurrentEditingPhoto(index: any): boolean {\r\n        const foundItem: IPhotoChange = _.find(this.photoChanges, (o: IPhotoChange) => o.controlIndex === index);\r\n        if (foundItem) {\r\n            return foundItem.photo.id === this.currentEditingPhoto.id;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    hasPhotoChangeFor(photo: IPhoto): boolean {\r\n        const foundItem = _.find(this.photoChanges, (o: IPhotoChange) => o.photo.id === photo.id);\r\n        if (foundItem) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    addPhotoChange(photo: IPhoto) {\r\n        if (this.hasPhotoChangeFor(photo)) {\r\n            return;\r\n        }\r\n\r\n        // add address to the list\r\n        const control = <FormArray>this.photosForm.controls[\"photoChanges\"];\r\n        control.push(this.initPhotoChange(photo, control.length));\r\n    }\r\n\r\n    removePhotoChange(photoId: number) {\r\n        let control = <FormArray>this.photosForm.controls[\"photoChanges\"];\r\n        let changeIndex: number;\r\n\r\n        this.photoChanges.forEach((value, index) => {\r\n            if (value.photo.id === photoId) {\r\n                const con = control.at(index);\r\n                con.disable();\r\n                changeIndex = index;\r\n            }\r\n        });\r\n\r\n        if (changeIndex) {\r\n            this.photoChanges.splice(changeIndex, 1);\r\n        }\r\n    }\r\n\r\n    hasPages(startIndex: number = null) {\r\n        let photoIndex = startIndex === null ? (this.photos === null ? 0 : this.photos.length) : startIndex;\r\n        if (photoIndex === -1) {\r\n            return true;\r\n        }\r\n\r\n        photoIndex += 1;\r\n        if (photoIndex > this.photosTotalPages) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    nextPhoto() {\r\n        const self = this;\r\n        self.currentPhotoIsVisible = false;\r\n        let photoIndex = self.photos.indexOf(self.currentEditingPhoto) + 1;\r\n\r\n        // modulus '%' keeps index within the bounds, while incrementing.\r\n        if (photoIndex % this.photos.length === 0) {\r\n            // check if we have any more pages to fetch.\r\n            if (this.photosPageIndex % this.photosTotalPages === 0) {\r\n                photoIndex = 0;\r\n            }\r\n        }\r\n\r\n        self.getImage(photoIndex).then(value => {\r\n            self.setCurrentEditingPhoto(value);\r\n        });\r\n    }\r\n\r\n    prevPhoto() {\r\n        const self = this;\r\n        self.currentPhotoIsVisible = false;\r\n        let photoIndex = self.photos.indexOf(self.currentEditingPhoto) - 1;\r\n        if (photoIndex === -1) {\r\n            photoIndex = self.photos.length - 1;\r\n        }\r\n\r\n        self.getImage(photoIndex).then(value => {\r\n            self.setCurrentEditingPhoto(value);\r\n        });\r\n    }\r\n\r\n    getImage(index: number): Promise<IPhoto> {\r\n        const self = this;\r\n        const promise = new Promise<IPhoto>((resolve) => {\r\n            let currentPhotosSize = self.photos.length;\r\n            if (currentPhotosSize > index) {\r\n                self.currentImageIndex = index;\r\n                resolve(self.photos[index]);\r\n            } else {\r\n                // Try to load more images.\r\n                self.doLoadMorePhotos().then(() => {\r\n                    const hasNew = (currentPhotosSize % self.photos.length) !== 0;\r\n                    if (hasNew) {\r\n                        self.currentImageIndex = index;\r\n                        resolve(self.photos[index]);\r\n                    } else {\r\n                        self.currentImageIndex = 0;\r\n                        resolve(self.photos[0]);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    openModalPhoto(photo: IPhoto, $event: Event) {\r\n        this.photoModal.config = {\r\n            backdrop: \"static\"\r\n        };\r\n\r\n        $event.preventDefault();\r\n        this.setCurrentEditingPhoto(photo);\r\n        this.photoModal.show();\r\n        this.enableKeyboardNav();\r\n    }\r\n\r\n    closeModalPhoto() {\r\n        if (this.photosForm.dirty) {\r\n            this.modalAlerts.push({ type: \"warning\", msg: \"Du har ändringar som inte sparats. vänligen tryck på spara-knappen.\", dismissOnTimeout: 5000 });\r\n            return;\r\n        }\r\n\r\n        this.disableKeyboardNav();\r\n        this.setCurrentEditingPhoto(null);\r\n        this.photoModal.hide();\r\n    }\r\n\r\n    setCurrentEditingPhoto(photo: IPhoto) {\r\n        let visible = photo !== null;\r\n        if (visible) {\r\n            this.addPhotoChange(photo);\r\n        }\r\n\r\n        this.currentEditingPhoto = photo;\r\n        this.currentPhotoIsVisible = visible;\r\n        // this.changeDetectorRef.detectChanges();\r\n    }\r\n\r\n    enableKeyboardNav() {\r\n        this.enableKeybordNav = true;\r\n    };\r\n\r\n    disableKeyboardNav() {\r\n        this.enableKeybordNav = false;\r\n    };\r\n\r\n    @HostListener(\"document:keyup\", [\"$event\"])\r\n    keybordActionKeyUp(event) {\r\n        if (this.enableKeybordNav) {\r\n            this.ngZone.run(() => {\r\n                this.keyboardAction(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    keyboardAction(event) {\r\n        const keycodeEsc = 27;\r\n        const keycodeLeftArrow = 37;\r\n        const keycodeRightArrow = 39;\r\n\r\n        const keycode = event.keyCode;\r\n        if (keycode === keycodeEsc) {\r\n            this.closeModalPhoto();\r\n        } else if (keycode === keycodeLeftArrow) {\r\n            this.prevPhoto();\r\n        } else if (keycode === keycodeRightArrow) {\r\n            this.nextPhoto();\r\n        }\r\n    };\r\n\r\n    doSave() {\r\n        if (this.profileForm.dirty === false && this.photosForm.dirty === false) {\r\n            console.log(\"No changes, skiping save.\");\r\n            return;\r\n        }\r\n\r\n        this.ngZone.run(() => {\r\n            if (this.profileForm.dirty) {\r\n                let promise = this.umbracoAjaxService.post(\"Profile\", \"SaveProfilePost\", this.profileForm.value)\r\n                    .catch(() => {\r\n                    })\r\n                    .then((value: boolean) => {\r\n                        if (value) {\r\n                            // this.createProfileForm(this.id);\r\n                        } else {\r\n                            this.alerts.push({ type: \"danger\", msg: \"Något gick fel.\" });\r\n                        }\r\n                    });\r\n                this.busy.push(promise);\r\n            }\r\n\r\n            if (this.photosForm.dirty) {\r\n                const changes: FormArray = <FormArray>this.photosForm.controls[\"photoChanges\"];\r\n                const valuesToSend = [];\r\n                changes.controls.forEach((v) => {\r\n                    if (v.dirty) {\r\n                        valuesToSend.push(v.value);\r\n                    }\r\n                });\r\n\r\n                let promise = this.umbracoAjaxService.post(\"Profile\", \"SavePhotosPost\", { photoChanges: valuesToSend });\r\n                this.busy.push(promise);\r\n\r\n                promise.then((value: boolean) => {\r\n                    if (value === false) {\r\n                        this.alerts.push({ type: \"danger\", msg: \"Något gick fel.\" });\r\n                    } else {\r\n                        changes.controls.forEach((v) => {\r\n                            if (v.dirty) {\r\n                                v.markAsPristine();\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    // this.changeDetectorRef.detectChanges();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    doCancel() {\r\n        this.createProfileForm(this.id);\r\n        this.profileForm.markAsPristine();\r\n    }\r\n\r\n    doCancelPhotosForm() {\r\n        this.enableKeyboardNav();\r\n        if (this.photosPageIndex !== 1) {\r\n            this.createOrUpdatePhotosForm(1, true);\r\n        }\r\n        this.photosForm.markAsPristine();\r\n        this.isEditingPhoto = false;\r\n    }\r\n\r\n    doEditPhotosForm() {\r\n        this.disableKeyboardNav();\r\n        this.isEditingPhoto = true;\r\n    }\r\n\r\n    doLoadMorePhotos(): Promise<IPhoto[]> {\r\n        if (this.hasPages()) {\r\n            this.photosPageIndex += 1;\r\n            let promise = this.createOrUpdatePhotosForm(this.photosPageIndex);\r\n            this.busy.push(promise);\r\n\r\n            return promise;\r\n        }\r\n\r\n        return Promise.resolve<IPhoto[]>([]);\r\n    }\r\n\r\n    createProfileForm(id: number = null) {\r\n        const self = this;\r\n\r\n        let promise: Promise<any> = new Promise((resolve, reject) => {\r\n            if (Object.isNotNullOrUndefined(id)) {\r\n                let getProfilePromise = self.umbracoAjaxService.post(\"Profile\", \"GetProfilePost\", { id: id }).catch(reject).then((value: any) => {\r\n                    self.profile = value;\r\n                    resolve(value);\r\n                });\r\n                this.busy.push(getProfilePromise);\r\n            } else {\r\n                resolve(self.profile);\r\n            }\r\n        });\r\n\r\n        promise.then(value => {\r\n            this.profileForm = this.formBuilder.group({\r\n                name: [value.user.name],\r\n                email: [value.user.email],\r\n                aboutMe: [value.user.aboutMe],\r\n                bio: [value.user.bio],\r\n                memberField: [value.user.memberField]\r\n            });\r\n            this.avatarForm = this.formBuilder.group({\r\n                avatarUrl: [value.user.avatar]\r\n            });\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    createOrUpdatePhotosForm(page: number = null, reset: boolean = false) {\r\n        const self = this;\r\n        let fetch = page !== null;\r\n\r\n        if (fetch && Object.isNotNullOrUndefined(self.photosTotalPages) && self.photosTotalPages > page) {\r\n            fetch = false;\r\n        }\r\n\r\n        let promise: Promise<IPhoto[]> = new Promise((resolve, reject) => {\r\n            if (fetch) {\r\n                let getPhotosPromise = self.umbracoAjaxService.post(\"Profile\", \"GetPhotosPost\", { page: page, pageSize: 25, id: self.id }).catch(reject).then((value: IGetPhotosPayload) => {\r\n                    self.photosTotalPages = value.totalPages;\r\n\r\n                    if (Object.isNullOrUndefined(self.photos)) {\r\n                        self.photos = value.items;\r\n                    } else {\r\n                        self.photos = _(self.photos) // start sequence\r\n                            .keyBy(\"id\") // create a dictionary of the 1st array\r\n                            .merge(_.keyBy(value.items, \"id\")) // create a dictionary of the 2nd array, and merge it to the 1st\r\n                            .values() // turn the combined dictionary to array\r\n                            .value(); // get the value (array) out of the sequence\r\n                    }\r\n\r\n                    const diff = _.differenceBy(self.photos, value.items, \"id\");\r\n                    if (diff.length) {\r\n                        resolve(diff);\r\n                    } else {\r\n                        resolve(self.photos);\r\n                    }\r\n                });\r\n                this.busy.push(getPhotosPromise);\r\n            } else {\r\n                resolve(self.photos);\r\n            }\r\n        });\r\n\r\n        promise.then((value: IPhoto[]) => {\r\n            if (reset || Object.isNullOrUndefined(self.photosForm)) {\r\n                self.photoChanges = [];\r\n                self.photosForm = self.formBuilder.group({\r\n                    photoChanges: self.formBuilder.array([])\r\n                });\r\n            }\r\n\r\n            if (value) {\r\n                value.forEach((photo: IPhoto) => {\r\n                    self.addPhotoChange(photo);\r\n                });\r\n            }\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        super.ngOnChanges(changes);\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.ngZone.run(() => {\r\n            this.uploader.onSuccessItem = (item: FileItem, response: string, status: number, headers: ParsedResponseHeaders) => {\r\n                let files: IPhoto[] = JSON.parse(response);\r\n                files.forEach((photo) => {\r\n                    this.photos.unshift(photo);\r\n                    this.addPhotoChange(photo);\r\n                });\r\n                this.setCurrentEditingPhoto(null);\r\n            };\r\n\r\n            const cssImportPromise = System.import(\"./profile.scss\");\r\n            const profileFormPromise = this.createProfileForm(this.id);\r\n            const photosFormPromise = this.createOrUpdatePhotosForm(1);\r\n            const getPreValues = this.umbracoAjaxService.post(\"Profile\", \"GetPhotoPrevaluesPost\").then(value => {\r\n                this.hairColors = value.hairColor;\r\n                this.hairLengths = value.hairLength;\r\n                this.colorTypes = value.colorType;\r\n                this.textures = value.texture;\r\n            });\r\n\r\n            Promise.all([cssImportPromise, profileFormPromise, photosFormPromise, getPreValues]).then(() => {\r\n                this.viewState = enums.DefaultViewState.DefaultTemplate;\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.viewState$ = enums.DefaultViewState.None;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/profile/profile.component.ts","module.exports = \"<ng-template [ngTemplateOutlet]=\\\"this.currentTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\">\\r\\n</ng-template>\\r\\n<ng-template #DefaultTemplate>\\r\\n    <div class=\\\"col-lg-10 col-sm-11\\\">\\r\\n        <div *ngIf=\\\"alerts?.length > 0\\\" class=\\\"row\\\">\\r\\n            <div class=\\\"col-xs-12\\\" *ngFor=\\\"let alert of this?.alerts\\\">\\r\\n                <alert [type]=\\\"alert.type\\\" dismissOnTimeout=\\\"5000\\\"><span [innerHtml]=\\\"alert.msg\\\"></span></alert>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row profile\\\">\\r\\n            <div class=\\\"col-sm-3\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-xs-7 col-sm-12\\\">\\r\\n                        <form class=\\\"form-horizontal\\\" [formGroup]=\\\"avatarForm\\\">\\r\\n                            <inline-text-editor [openInModal]=\\\"true\\\" formControlName=\\\"avatarUrl\\\" [focusThis]=\\\"true\\\" type=\\\"text\\\" name=\\\"avatar\\\">\\r\\n                                <presentation-state>\\r\\n                                    <ng-template let-editor>\\r\\n                                        <img class=\\\"profile-image\\\" [src]=\\\"editor?.value\\\">\\r\\n                                    </ng-template>\\r\\n                                </presentation-state>\\r\\n                                <edit-state>\\r\\n                                    <ng-template let-editor>\\r\\n                                        <render-editor class=\\\"editor-value\\\"></render-editor>\\r\\n                                    </ng-template>\\r\\n                                </edit-state>\\r\\n                            </inline-text-editor>\\r\\n                        </form>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-xs-5 col-sm-12\\\">\\r\\n                        <inline-editor-group [openInModal]=\\\"true\\\" (onSave)=\\\"this.doSave()\\\" (onCancel)=\\\"this.doCancel()\\\" [(disableSave)]=\\\"this?.profileForm.invalid || !this?.profileForm.dirty\\\">\\r\\n                            <form class=\\\"form-horizontal\\\" [formGroup]=\\\"profileForm\\\">\\r\\n                                <h3>Allmän information</h3>\\r\\n                                <ul class=\\\"profile-details\\\">\\r\\n                                    <li>\\r\\n                                        <inline-text-editor formControlName=\\\"name\\\" [focusThis]=\\\"true\\\" type=\\\"text\\\" name=\\\"name\\\">\\r\\n                                            <presentation-state>\\r\\n                                                <ng-template let-editor>\\r\\n                                                    <div>\\r\\n                                                        <i class=\\\"fa fa-user\\\" aria-hidden=\\\"true\\\"></i> Namn\\r\\n                                                    </div>\\r\\n                                                    <p>{{ editor?.value }}</p>\\r\\n                                                </ng-template>\\r\\n                                            </presentation-state>\\r\\n                                            <edit-state>\\r\\n                                                <ng-template let-editor>\\r\\n                                                    <div class=\\\"row\\\">\\r\\n                                                        <div class=\\\"col-xs-12\\\">\\r\\n                                                            <label for=\\\"inline-editor-{{ editor.name }}\\\" class=\\\"form-control-label\\\">Namn</label>\\r\\n                                                            <render-editor class=\\\"editor-value\\\"></render-editor>\\r\\n                                                        </div>\\r\\n                                                    </div>\\r\\n                                                </ng-template>\\r\\n                                            </edit-state>\\r\\n                                        </inline-text-editor>\\r\\n                                        <inline-textarea-editor formControlName=\\\"aboutMe\\\" [focusThis]=\\\"true\\\" type=\\\"text\\\" name=\\\"aboutMe\\\">\\r\\n                                            <presentation-state>\\r\\n                                                <ng-template let-editor></ng-template>\\r\\n                                            </presentation-state>\\r\\n                                            <edit-state>\\r\\n                                                <ng-template let-editor>\\r\\n                                                    <div class=\\\"row\\\">\\r\\n                                                        <div class=\\\"col-xs-12\\\">\\r\\n                                                            <label for=\\\"inline-editor-{{ editor.name }}\\\" class=\\\"form-control-label\\\">Om mig</label>\\r\\n                                                            <render-editor class=\\\"editor-value\\\"></render-editor>\\r\\n                                                        </div>\\r\\n                                                    </div>\\r\\n                                                </ng-template>\\r\\n                                            </edit-state>\\r\\n                                        </inline-textarea-editor>\\r\\n\\r\\n                                        <inline-textarea-editor formControlName=\\\"bio\\\" type=\\\"text\\\" name=\\\"bio\\\">\\r\\n                                            <presentation-state>\\r\\n                                                <ng-template let-editor></ng-template>\\r\\n                                            </presentation-state>\\r\\n                                            <edit-state>\\r\\n                                                <ng-template let-editor>\\r\\n                                                    <div class=\\\"row\\\">\\r\\n                                                        <div class=\\\"col-xs-12\\\">\\r\\n                                                            <label for=\\\"inline-editor-{{ editor.name }}\\\" class=\\\"form-control-label\\\">Bio</label>\\r\\n                                                            <render-editor class=\\\"editor-value\\\"></render-editor>\\r\\n                                                        </div>\\r\\n                                                    </div>\\r\\n                                                </ng-template>\\r\\n                                            </edit-state>\\r\\n                                        </inline-textarea-editor>\\r\\n                                        \\r\\n                                        <inline-textarea-editor formControlName=\\\"memberField\\\" type=\\\"text\\\" name=\\\"memberField\\\" *IfAdmin>\\r\\n                                            <presentation-state>\\r\\n                                                <ng-template let-editor>\\r\\n                                                </ng-template>\\r\\n                                            </presentation-state>\\r\\n                                            <edit-state>\\r\\n                                                <ng-template let-editor>\\r\\n                                                    <div class=\\\"row\\\">\\r\\n                                                        <div class=\\\"col-xs-12\\\">\\r\\n                                                            <label for=\\\"inline-editor-{{ editor.name }}\\\" class=\\\"form-control-label\\\">Annan information (visas endast för admins)</label>\\r\\n                                                            <render-editor class=\\\"editor-value\\\"></render-editor>\\r\\n                                                        </div>\\r\\n                                                    </div>\\r\\n                                                </ng-template>\\r\\n                                            </edit-state>\\r\\n                                        </inline-textarea-editor>\\r\\n                                    </li>\\r\\n                                </ul>\\r\\n\\r\\n                                <h3>Kontakt information</h3>\\r\\n                                <ul class=\\\"profile-details\\\">\\r\\n                                    <li>\\r\\n                                        <div>\\r\\n                                            <i class=\\\"fa fa-envelope\\\"></i> E-post\\r\\n                                        </div>\\r\\n                                        <p>{{ this?.profile.user.email }}</p>\\r\\n                                    </li>\\r\\n                                </ul>\\r\\n                            </form>\\r\\n                        </inline-editor-group>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-sm-9\\\">\\r\\n                <ul class=\\\"nav nav-tabs nav-tabs-default\\\" role=\\\"tablist\\\">\\r\\n                    <li role=\\\"presentation\\\" class=\\\"active\\\"><a href=\\\"#info\\\" aria-controls=\\\"skills\\\" role=\\\"tab\\\" data-toggle=\\\"tab\\\">Info</a></li>\\r\\n                    <li role=\\\"presentation\\\"><a href=\\\"#photos\\\" aria-controls=\\\"photos\\\" role=\\\"tab\\\" data-toggle=\\\"tab\\\">Bilder</a></li>\\r\\n                </ul>\\r\\n                <div class=\\\"tab-content\\\">\\r\\n                    <div class=\\\"tab-pane active\\\" id=\\\"info\\\">\\r\\n                        <div class=\\\"row\\\">\\r\\n                            <div class=\\\"col-sm-12\\\">\\r\\n                                <h2>Om mig</h2>\\r\\n                                <p>{{ this?.profileForm.get(\\\"aboutMe\\\")?.value }}</p>\\r\\n                                \\r\\n                                <h2>Bio</h2>\\r\\n                                <p>{{ this?.profileForm.get(\\\"bio\\\")?.value }}</p>\\r\\n                                <div *IfAdmin>\\r\\n                                    <h2>Annan information (visas endast för admins)</h2>\\r\\n                                    <p>{{ this?.profileForm.get(\\\"memberField\\\")?.value }}</p>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <div class=\\\"col-sm-7\\\"></div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"tab-pane pane-photos\\\" id=\\\"photos\\\">\\r\\n                        <div class=\\\"row\\\">\\r\\n                            <div [ngBusy]=\\\"{busy: this?.busy, message: 'Var god vänta...', backdrop: true, minDuration: 600, delay: 1000}\\\"></div>\\r\\n                        </div>\\r\\n                        <div class=\\\"row\\\">\\r\\n                            <div class=\\\"col-xs-12\\\">\\r\\n                                <input type=\\\"file\\\" ng2FileSelect [uploader]=\\\"uploader\\\" multiple />\\r\\n                                <div class=\\\"table-responsive\\\">\\r\\n                                    <table *ngIf=\\\"this?.uploader.queue.length >= 1\\\" class=\\\"table\\\">\\r\\n                                        <thead>\\r\\n                                            <tr>\\r\\n                                                <th width=\\\"50%\\\">Namn</th>\\r\\n                                                <th>Förlopp</th>\\r\\n                                                <th>Status</th>\\r\\n                                            </tr>\\r\\n                                        </thead>\\r\\n                                        <tbody>\\r\\n                                            <tr *ngFor=\\\"let item of uploader.queue\\\">\\r\\n                                                <td><strong>{{ item?.file?.name | truncate : 10 }}</strong></td>\\r\\n                                                <td *ngIf=\\\"uploader.isHTML5\\\" nowrap>{{ item?.file?.size/1024/1024 | number:'.2' }} MB</td>\\r\\n                                                <td *ngIf=\\\"uploader.isHTML5\\\">\\r\\n                                                    <div class=\\\"progress\\\" style=\\\"margin-bottom: 0;\\\">\\r\\n                                                        <div class=\\\"progress-bar\\\" role=\\\"progressbar\\\" [ngStyle]=\\\"{ 'width': item.progress + '%' }\\\"></div>\\r\\n                                                    </div>\\r\\n                                                </td>\\r\\n                                                <td class=\\\"text-center\\\">\\r\\n                                                    <span *ngIf=\\\"item.isSuccess\\\"><i class=\\\"glyphicon glyphicon-ok\\\"></i></span>\\r\\n                                                    <span *ngIf=\\\"item.isCancel\\\"><i class=\\\"glyphicon glyphicon-ban-circle\\\"></i></span>\\r\\n                                                    <span *ngIf=\\\"item.isError\\\"><i class=\\\"glyphicon glyphicon-remove\\\"></i></span>\\r\\n                                                </td>\\r\\n                                            </tr>\\r\\n                                        </tbody>\\r\\n                                    </table>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"row widget widget-flat widget-card-list\\\">\\r\\n                            <div class=\\\"widget-card\\\" *ngFor=\\\"let item of this?.photos; let i = index\\\">\\r\\n                                <div class=\\\"card\\\">\\r\\n                                    <a class=\\\"card-link\\\" [href]=\\\"item.url\\\" (click)=\\\"openModalPhoto(item, $event)\\\">\\r\\n                                        <picture>\\r\\n                                            <source media=\\\"(min-width: 960px)\\\" [srcset]=\\\"getSizedUrl(item, 960)\\\">\\r\\n                                            <source media=\\\"(min-width: 575px)\\\" [srcset]=\\\"getSizedUrl(item, 575)\\\">\\r\\n                                            <source media=\\\"(min-width: 385px)\\\" [srcset]=\\\"getSizedUrl(item, 385)\\\">\\r\\n                                            <img class=\\\"card-image img-thumbnail\\\" [src]=\\\"getSizedUrl(item, 385)\\\" [alt]=\\\"item.name\\\">\\r\\n                                        </picture>\\r\\n                                    </a>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <div bsModal #photoModal=\\\"bs-modal\\\" class=\\\"modal fade modal-photo\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"photo modal\\\" aria-hidden=\\\"true\\\">\\r\\n                                <div class=\\\"modal-dialog modal-lg\\\">\\r\\n                                    <div class=\\\"modal-content\\\">\\r\\n                                        <div class=\\\"modal-header\\\">\\r\\n                                            <div *ngIf=\\\"currentEditingPhoto != null\\\" class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"image controls\\\">\\r\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"approvePhoto()\\\" *IfAdminAnd=\\\"!currentEditingPhoto.isApproved\\\">\\r\\n                                                    <i class=\\\"fa fa-thumbs-o-up\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                                                    <span class=\\\"sr-only\\\">Godkänn</span>\\r\\n                                                </button>\\r\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"disapprovePhoto()\\\" *IfAdminAnd=\\\"currentEditingPhoto.isApproved\\\">\\r\\n                                                    <i class=\\\"fa fa-ban\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                                                    <span class=\\\"sr-only\\\">Underkänn</span>\\r\\n                                                </button>\\r\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"toggleShowInfo()\\\">\\r\\n                                                    <i class=\\\"fa fa-info\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                                                    <span class=\\\"sr-only\\\">Info</span>\\r\\n                                                </button>\\r\\n                                                <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"deletePhoto()\\\">\\r\\n                                                    <i class=\\\"fa fa-trash\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                                                    <span class=\\\"sr-only\\\">Radera</span>\\r\\n                                                </button>\\r\\n                                            </div>\\r\\n                                            <button type=\\\"button\\\" class=\\\"close pull-right\\\" aria-label=\\\"Close\\\" (click)=\\\"closeModalPhoto()\\\">\\r\\n                                                <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n                                            </button>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"modal-body\\\" *ngIf=\\\"currentEditingPhoto != null\\\">\\r\\n                                            <div [ngBusy]=\\\"{busy: this?.busy, message: 'Var god vänta...', backdrop: true, minDuration: 600, delay: 1000}\\\"></div>\\r\\n                                            <bl-fader class=\\\"modal-row\\\" [(isVisible)]=\\\"currentPhotoIsVisible\\\">\\r\\n                                                <picture>\\r\\n                                                    <source media=\\\"(min-width: 960px)\\\" [srcset]=\\\"getSizedUrl(currentEditingPhoto, 960)\\\">\\r\\n                                                    <source media=\\\"(min-width: 575px)\\\" [srcset]=\\\"getSizedUrl(currentEditingPhoto, 575)\\\">\\r\\n                                                    <source media=\\\"(min-width: 385px)\\\" [srcset]=\\\"getSizedUrl(item, 385)\\\">\\r\\n                                                    <img class=\\\"img-fluid\\\" [src]=\\\"getSizedUrl(currentEditingPhoto, 385)\\\" [alt]=\\\"currentEditingPhoto.name\\\">\\r\\n                                                </picture>\\r\\n                                                <div class=\\\"modal-nav\\\">\\r\\n                                                    <a class=\\\"nav-prev\\\" (click)=\\\"prevPhoto()\\\"></a>\\r\\n                                                    <a class=\\\"nav-next\\\" (click)=\\\"nextPhoto()\\\"></a>\\r\\n                                                </div>\\r\\n                                            </bl-fader>\\r\\n                                            <inline-editor-group *ngIf=\\\"showPhotoInfo\\\" [openInModal]=\\\"false\\\" (onEdit)=\\\"doEditPhotosForm()\\\" (onSave)=\\\"doSave()\\\" (onCancel)=\\\"doCancelPhotosForm()\\\" [(disableSave)]=\\\"this?.photosForm.invalid || !this?.photosForm.dirty\\\" class=\\\"row modal-row\\\">\\r\\n                                                <div class=\\\"col-xs-12\\\">\\r\\n                                                    <h3>{{ currentEditingPhoto.displayName }}</h3>\\r\\n                                                    <form [formGroup]=\\\"photosForm\\\">\\r\\n                                                        <div formArrayName=\\\"photoChanges\\\">\\r\\n                                                            <div *ngFor=\\\"let change of photosForm?.controls?.photoChanges?.controls; let i=index\\\">\\r\\n                                                                <div [formGroupName]=\\\"i\\\" *ngIf=\\\"isCurrentEditingPhoto(i)\\\">\\r\\n                                                                    <inline-text-editor formControlName=\\\"displayName\\\" [focusThis]=\\\"true\\\" type=\\\"text\\\" name=\\\"displayName\\\" [class.horizontal]=\\\"!isEditingPhoto\\\" class=\\\"inline-editor\\\">\\r\\n                                                                        <presentation-state>\\r\\n                                                                            <ng-template let-editor>\\r\\n                                                                                <div class=\\\"editor\\\">\\r\\n                                                                                    <label class=\\\"editor-label\\\">Namn</label>\\r\\n                                                                                    <span class=\\\"editor-value\\\">{{ editor?.value }}</span>\\r\\n                                                                                </div>\\r\\n                                                                            </ng-template>\\r\\n                                                                        </presentation-state>\\r\\n                                                                        <edit-state>\\r\\n                                                                            <ng-template let-editor>\\r\\n                                                                                <div class=\\\"editor\\\">\\r\\n                                                                                    <label class=\\\"editor-label\\\">Namn</label>\\r\\n                                                                                    <render-editor class=\\\"editor-value\\\"></render-editor>\\r\\n                                                                                </div>\\r\\n                                                                            </ng-template>\\r\\n                                                                        </edit-state>\\r\\n                                                                    </inline-text-editor>\\r\\n\\r\\n                                                                    <inline-select-editor [options]=\\\"this?.hairColors\\\" formControlName=\\\"hairColor\\\" type=\\\"text\\\" name=\\\"hairColor\\\" [class.horizontal]=\\\"!isEditingPhoto\\\" class=\\\"inline-editor\\\">\\r\\n                                                                        <presentation-state>\\r\\n                                                                            <ng-template let-editor>\\r\\n                                                                                <div class=\\\"editor\\\">\\r\\n                                                                                    <label class=\\\"editor-label\\\">Hårfärg</label>\\r\\n                                                                                    <span class=\\\"editor-value\\\">{{ editor?.value }}</span>\\r\\n                                                                                </div>\\r\\n                                                                            </ng-template>\\r\\n                                                                        </presentation-state>\\r\\n                                                                        <edit-state>\\r\\n                                                                            <ng-template let-editor>\\r\\n                                                                                <div class=\\\"editor\\\">\\r\\n                                                                                    <label class=\\\"form-control-label\\\">Hårfärg</label>\\r\\n                                                                                    <render-editor class=\\\"editor-value\\\"></render-editor>\\r\\n                                                                                </div>\\r\\n                                                                            </ng-template>\\r\\n                                                                        </edit-state>\\r\\n                                                                    </inline-select-editor>\\r\\n\\r\\n                                                                    <inline-select-editor [options]=\\\"this?.hairLengths\\\" formControlName=\\\"hairLength\\\" type=\\\"text\\\" name=\\\"hairLength\\\" [class.horizontal]=\\\"!isEditingPhoto\\\" class=\\\"inline-editor\\\">\\r\\n                                                                        <presentation-state>\\r\\n                                                                            <ng-template let-editor>\\r\\n                                                                                <div class=\\\"editor\\\">\\r\\n                                                                                    <label class=\\\"editor-label\\\">Hårlängd</label>\\r\\n                                                                                    <span class=\\\"editor-value\\\">{{ editor?.value }}</span>\\r\\n                                                                                </div>\\r\\n                                                                            </ng-template>\\r\\n                                                                        </presentation-state>\\r\\n                                                                        <edit-state>\\r\\n                                                                            <ng-template let-editor>\\r\\n                                                                                <div class=\\\"editor\\\">\\r\\n                                                                                    <label class=\\\"form-control-label\\\">Hårlängd</label>\\r\\n                                                                                    <render-editor class=\\\"editor-value\\\"></render-editor>\\r\\n                                                                                </div>\\r\\n                                                                            </ng-template>\\r\\n                                                                        </edit-state>\\r\\n                                                                    </inline-select-editor>\\r\\n\\r\\n                                                                    <!--<inline-select-editor [options]=\\\"this?.colorTypes\\\" formControlName=\\\"colorType\\\" type=\\\"text\\\" name=\\\"colorType\\\" [class.horizontal]=\\\"!isEditingPhoto\\\" class=\\\"inline-editor\\\">\\r\\n                                                                        <presentation-state>\\r\\n                                                                            <ng-template let-editor>\\r\\n                                                                                <div class=\\\"editor\\\">\\r\\n                                                                                    <label class=\\\"editor-label\\\">Färgtyp</label>\\r\\n                                                                                    <span class=\\\"editor-value\\\">{{ editor?.value }}</span>\\r\\n                                                                                </div>\\r\\n                                                                            </ng-template>\\r\\n                                                                        </presentation-state>\\r\\n                                                                        <edit-state>\\r\\n                                                                            <ng-template let-editor>\\r\\n                                                                                <div class=\\\"editor\\\">\\r\\n                                                                                    <label class=\\\"form-control-label\\\">Färgtyp</label>\\r\\n                                                                                    <render-editor class=\\\"editor-value\\\"></render-editor>\\r\\n                                                                                </div>\\r\\n                                                                            </ng-template>\\r\\n                                                                        </edit-state>\\r\\n                                                                    </inline-select-editor>\\r\\n\\r\\n                                                                    <inline-select-editor [options]=\\\"this?.textures\\\" formControlName=\\\"texture\\\" type=\\\"text\\\" name=\\\"texture\\\" [class.horizontal]=\\\"!isEditingPhoto\\\" class=\\\"inline-editor\\\">\\r\\n                                                                        <presentation-state>\\r\\n                                                                            <ng-template let-editor>\\r\\n                                                                                <div class=\\\"editor\\\">\\r\\n                                                                                    <label class=\\\"editor-label\\\">Textur</label>\\r\\n                                                                                    <span class=\\\"editor-value\\\">{{ editor?.value }}</span>\\r\\n                                                                                </div>\\r\\n                                                                            </ng-template>\\r\\n                                                                        </presentation-state>\\r\\n                                                                        <edit-state>\\r\\n                                                                            <ng-template let-editor>\\r\\n                                                                                <div class=\\\"editor\\\">\\r\\n                                                                                    <label class=\\\"form-control-label\\\">Textur</label>\\r\\n                                                                                    <render-editor class=\\\"editor-value\\\"></render-editor>\\r\\n                                                                                </div>\\r\\n                                                                            </ng-template>\\r\\n                                                                        </edit-state>\\r\\n                                                                    </inline-select-editor>-->\\r\\n                                                                </div>\\r\\n                                                            </div>\\r\\n                                                        </div>\\r\\n                                                    </form>\\r\\n                                                </div>\\r\\n                                            </inline-editor-group>\\r\\n                                            <div *ngIf=\\\"modalAlerts?.length > 0\\\" class=\\\"row modal-row\\\" style=\\\"padding-top: 1em;\\\">\\r\\n                                                <div class=\\\"col-xs-12\\\" *ngFor=\\\"let alert of this?.modalAlerts\\\">\\r\\n                                                    <alert [type]=\\\"alert.type\\\" [dismissOnTimeout]=\\\"alert?.dismissOnTimeout\\\" [dismissible]=\\\"true\\\"><span [innerHtml]=\\\"alert.msg\\\"></span></alert>\\r\\n                                                </div>\\r\\n                                            </div>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div *ngIf=\\\"hasPages()\\\" class=\\\"row\\\">\\r\\n                            <div class=\\\"col-xs-12\\\">\\r\\n                                <button type=\\\"button\\\" (click)=\\\"doLoadMorePhotos()\\\" class=\\\"btn btn-secondary btn-block\\\">\\r\\n                                    Visa fler resultat\\r\\n                                </button>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</ng-template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/profile/templates/profile.html\n// module id = ./src/typescript/components/profile/templates/profile.html\n// module chunks = 3","import { ChangeDetectorRef, Component, Inject, ViewContainerRef, OnInit } from \"@angular/core\";\r\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\nimport { Protected } from \"../../decorators/Protected\";\r\nimport * as enums from \"../../enums\";\r\n\r\n@Protected\r\n@Component({\r\n    selector: \"search-box\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"this?.currentTemplate\" [ngOutletContext]=\"{ $implicit: this }\"></ng-template>`,\r\n    styles: [require(\"./search-box.scss\").toString()]\r\n})\r\nexport class SearchBoxComponent extends TemplateBaseComponent implements OnInit {\r\n    public searchForm: FormGroup;\r\n\r\n    constructor(\r\n        // @Inject(bl.ConfigService) private configService: bl.ConfigService,\r\n        // @Inject(bl.UmbracoAjaxService) private umbracoAjaxService: bl.UmbracoAjaxService\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(FormBuilder) private formBuilder: FormBuilder\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    doSearch($event: Event) {\r\n        $event.preventDefault();\r\n        console.log(\"[SearchBoxComponent]:OnSubmit -> search()\", this.searchForm);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.viewState$ = enums.DefaultViewState.DefaultTemplate;\r\n\r\n        this.searchForm = this.formBuilder.group({\r\n            searchWord: [\"\", Validators.required]\r\n        });\r\n\r\n        this.searchForm.valueChanges.subscribe(value => {\r\n            // do something with value here\r\n            console.log(\"[SearchBoxComponent] new value:'\" + value.searchWord + \"'\", value);\r\n        });\r\n\r\n        // this.configService.ensureConfigs()\r\n        //    .then(configs => {});\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/search-box/search-box.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./search-box.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./search-box.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./search-box.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/search-box/search-box.scss\n// module id = ./src/typescript/components/search-box/search-box.scss\n// module chunks = 3","import { ChangeDetectorRef, Component, Inject, ViewChild, ContentChild, TemplateRef, ViewContainerRef, OnInit } from \"@angular/core\";\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\nimport * as enums from \"../../enums\";\r\nimport * as bl from \"../../blueleet/\";\r\nimport { ISearchResult } from \"../../blueleet/modules/search/search.service\";\r\nimport Uri = require(\"urijs\");\r\n\r\n@Component({\r\n    selector: \"search-result-empty\",\r\n    template: ``\r\n})\r\nexport class SearchEmptyComponent extends TemplateBaseComponent implements OnInit {\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    public show(term: string) {\r\n        this.viewState = enums.DefaultViewState.DefaultTemplate;\r\n    }\r\n\r\n    public hide() {\r\n        this.viewState = enums.DefaultViewState.None;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.viewState = enums.DefaultViewState.None;\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: \"search-wall\",\r\n    template: require(\"./templates/search-wall.html\"),\r\n    styles: [require(\"./search-wall.scss\").toString()]\r\n})\r\nexport class SearchWallComponent extends TemplateBaseComponent implements OnInit {\r\n    @ViewChild(\"DefaultTemplate\") defaultTemplate: TemplateRef<any>;\r\n    @ContentChild(SearchEmptyComponent) searchResultEmpty: SearchEmptyComponent;\r\n\r\n    public searchWord: string;\r\n    public searchForm: FormGroup;\r\n    public searchResult: ISearchResult = null;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(FormBuilder) private formBuilder: FormBuilder,\r\n        @Inject(bl.ConfigService) private configService: bl.ConfigService,\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    onSearchUpdate(value: any) {\r\n        console.log(\"[SearchBoxComponent => onSearchUpdate] triggered with value:\", value);\r\n        this.searchResult = value;\r\n\r\n        if (this.searchResultEmpty) {\r\n            if (this.searchResult.results.length === 0) {\r\n                this.searchResultEmpty.show(this.searchWord);\r\n            } else {\r\n                this.searchResultEmpty.hide();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.viewState = enums.DefaultViewState.None;\r\n        this.configService.ensureConfigs().then(value => {\r\n            const searchQueryKey = value.searchQueryKey;\r\n            let searchTerm = \"\";\r\n\r\n            let url = new Uri(window.location.href);\r\n            if (url.hasQuery(searchQueryKey)) {\r\n                let query = url.search(true);\r\n                searchTerm = query[searchQueryKey];\r\n            }\r\n\r\n            this.searchForm = this.formBuilder.group({\r\n                searchWord: [searchTerm]\r\n            });\r\n\r\n            this.searchForm.valueChanges.debounceTime(500).subscribe((newValue: any) => {\r\n                // do something with value here\r\n                console.log(\"[SearchBoxComponent] new value:'\" + newValue.searchWord + \"'\", newValue);\r\n\r\n                if (newValue.searchWord.length < 2) {\r\n                    return;\r\n                }\r\n\r\n                url.setQuery(searchQueryKey, newValue.searchWord);\r\n                let newUrl = url.href();\r\n\r\n                // Update the query parameter\r\n                history.pushState(\"\", \"\", newUrl);\r\n\r\n                // Trigger a search change event by assigning a new value to searchWord.\r\n                this.searchWord = newValue.searchWord;\r\n            });\r\n\r\n            this.viewState = enums.DefaultViewState.DefaultTemplate;\r\n\r\n            if (searchTerm.length > 1) {\r\n                // Trigger search.\r\n                this.searchForm.get(\"searchWord\").patchValue(searchTerm);\r\n            }\r\n        });\r\n    }\r\n\r\n    isContent(type: enums.SearchType): boolean {\r\n        return type === enums.SearchType.Content;\r\n    }\r\n\r\n    isMedia(type: enums.SearchType): boolean {\r\n        return type === enums.SearchType.Media;\r\n    }\r\n\r\n    isFile(type: enums.SearchType): boolean {\r\n        return type === enums.SearchType.File;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/search-wall/search-wall.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./search-wall.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./search-wall.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./search-wall.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/search-wall/search-wall.scss\n// module id = ./src/typescript/components/search-wall/search-wall.scss\n// module chunks = 3","module.exports = \"<ng-template [ngTemplateOutlet]=\\\"this.currentTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\"></ng-template>\\r\\n<ng-template #DefaultTemplate>\\r\\n    <form [formGroup]=\\\"searchForm\\\" class=\\\"col-12 my-4\\\">\\r\\n        <bs-form-input formControlName=\\\"searchWord\\\" type=\\\"text\\\" name=\\\"searchWord\\\" placeholder=\\\"Sök\\\" [renderedInForm]=\\\"false\\\"></bs-form-input>\\r\\n    </form>\\r\\n    <bl-search [searchTerm]=\\\"this?.searchWord\\\" (onSearchUpdate)=\\\"this?.onSearchUpdate($event);\\\" class=\\\"col-12\\\">\\r\\n        <ng-template>\\r\\n            <div class=\\\"card-deck\\\" *ngIf=\\\"this?.searchResult\\\">\\r\\n                <div *ngFor=\\\"let result of this.searchResult?.results\\\" class=\\\"col-sm-12 my-sm-2 col-md-4\\\">\\r\\n                    <div class=\\\"module-card card-linked card\\\">\\r\\n                        <ng-template [ngIf]=\\\"isContent(result?.type)\\\">\\r\\n                            <a class=\\\"card-link\\\" [href]=\\\"result.url\\\"></a>\\r\\n                            <div class=\\\"card-block\\\">\\r\\n                                <i class=\\\"fa fa-circle pull-right\\\"></i>\\r\\n                                <h4 class=\\\"card-title\\\">{{ result.nodeName }}</h4>\\r\\n                                <p class=\\\"card-text\\\">{{ result.gridFrontPage | truncate: 100 }}</p>\\r\\n                            </div>\\r\\n                        </ng-template>\\r\\n                        <ng-template [ngIf]=\\\"isMedia(result?.type)\\\">\\r\\n                            <a class=\\\"card-link\\\" [href]=\\\"result.url\\\"></a>\\r\\n                            <img class=\\\"card-img-top\\\" src=\\\"\\\" [alt]=\\\"result.nodeName\\\">\\r\\n                            <div class=\\\"card-block\\\">\\r\\n                                <h4 class=\\\"card-title\\\">{{ result.nodeName }}</h4>\\r\\n                            </div>\\r\\n                        </ng-template>\\r\\n                        <ng-template [ngIf]=\\\"isFile(result?.type)\\\">\\r\\n                            <a class=\\\"card-link\\\" [href]=\\\"result.url\\\"></a>\\r\\n                            <div class=\\\"card-block\\\">\\r\\n                                <h4 class=\\\"card-title\\\">{{ result.nodeName }}</h4>\\r\\n                            </div>\\r\\n                        </ng-template>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <ng-template [ngTemplateOutlet]=\\\"this.searchResultEmpty?.currentTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\"></ng-template>\\r\\n            </div>\\r\\n        </ng-template>\\r\\n    </bl-search>\\r\\n</ng-template>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/search-wall/templates/search-wall.html\n// module id = ./src/typescript/components/search-wall/templates/search-wall.html\n// module chunks = 3","import { Component, Inject, NgZone, Input, ContentChild, ChangeDetectorRef, ViewChild, ViewContainerRef, TemplateRef, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\r\nimport { MemberStatus } from \"../../enums\";\r\nimport { IMemberPayload } from \"../../abstraction/IMemberPayload\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\nimport * as bl from \"../../blueleet\";\r\nimport { LoginEventService, LoginEventType } from \"../../loginEvent.service\";\r\nimport { GenericMessages } from \"../../enums/generic-messages-enum\";\r\nimport { BootstrapAlertBoxComponent } from \"../bootstrap/alert-box/alert-box.component\";\r\nimport { AlertBoxOptions, AlertBoxEventType } from \"../../alert-box.service\";\r\n\r\n@Component({\r\n    selector: \"simple-login\",\r\n    template: require(\"./templates/simple-login.html\")\r\n})\r\nexport class SimpleLoginComponent extends TemplateBaseComponent implements OnInit {\r\n    @ContentChild(BootstrapAlertBoxComponent) alertBoxComponent: BootstrapAlertBoxComponent;\r\n    @ViewChild(\"AlertEmailConfirmationNeeded\") alertEmailConfirmationNeededTemplate: TemplateRef<any>;\r\n    @Input(\"emailConfirmationText\") emailConfirmationText: string;\r\n    @Input(\"emailConfirmationButtonText\") emailConfirmationButtonText: string;\r\n    loginForm: FormGroup;\r\n    payload: IMemberPayload;\r\n    showForm: boolean = true;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(FormBuilder) private formBuilder: FormBuilder,\r\n        @Inject(NgZone) private ngZone: NgZone,\r\n        @Inject(bl.UmbracoAjaxService) private umbracoAjaxService: bl.UmbracoAjaxService,\r\n        @Inject(LoginEventService) private loginEventService: LoginEventService\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (!Object.isNullOrUndefined(this.payload) && this.payload.messageType === GenericMessages.Danger) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    sendConfirmationMail($event: Event) {\r\n        $event.preventDefault();\r\n        this.ngZone.run(() => {\r\n            this.umbracoAjaxService.post(\"MemberSurface\", \"SendConfirmationMailPost\", { email: this.payload.user.email })\r\n                .catch((error: any) => {\r\n                    this.payload = error;\r\n\r\n                    // Show error alert box with message.\r\n                    let alertBoxOption = new AlertBoxOptions(AlertBoxEventType.Error, error.message);\r\n                    this.alertBoxComponent.show(alertBoxOption);\r\n\r\n                    if (error.messageType === GenericMessages.Danger && error.status === (MemberStatus.AuthorizationFailure || MemberStatus.FacebookIntegrated)) {\r\n                        this.loginEventService.emit(LoginEventType.SignInError, error);\r\n                    } else {\r\n                        this.loginEventService.emit(LoginEventType.GenericError, error);\r\n                    }\r\n                })\r\n                .then((value: IMemberPayload) => {\r\n                    if (value) {\r\n                        this.payload = value;\r\n                        if (value.messageType === GenericMessages.Success) {\r\n                            let alertBoxOption = new AlertBoxOptions(AlertBoxEventType.Success, value.message);\r\n                            this.alertBoxComponent.show(alertBoxOption);\r\n                        }\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    doLogin($event: Event) {\r\n        $event.preventDefault();\r\n        console.log(\"[SimpleLoginFormComponent]:OnSubmit -> doLogin()\", this.loginForm);\r\n        this.ngZone.run(() => {\r\n            this.umbracoAjaxService.post(\"MemberSurface\", \"SignInMemberPost\", this.loginForm.value)\r\n                .catch((error: any) => {\r\n                    this.payload = error;\r\n\r\n                    // Show error alert box with message.\r\n                    let alertBoxOption = new AlertBoxOptions(AlertBoxEventType.Error, error.message);\r\n                    this.alertBoxComponent.show(alertBoxOption);\r\n\r\n                    if (error.messageType === GenericMessages.Danger && error.status === (MemberStatus.AuthorizationFailure || MemberStatus.FacebookIntegrated)) {\r\n                        this.loginEventService.emit(LoginEventType.SignInError, error);\r\n                    } else {\r\n                        this.loginEventService.emit(LoginEventType.GenericError, error);\r\n                    }\r\n                })\r\n                .then((value: IMemberPayload) => {\r\n                    if (value) {\r\n                        this.payload = value;\r\n                        if (value.messageType === GenericMessages.Success) {\r\n                            if (value.status === MemberStatus.EmailAuthorisationNeeded) {\r\n                                this.showForm = false;\r\n                                let alertBoxOption = new AlertBoxOptions(AlertBoxEventType.Success, value.message);\r\n                                this.alertBoxComponent.show(alertBoxOption, this.alertEmailConfirmationNeededTemplate);\r\n                                return;\r\n                            }\r\n\r\n                            if (value.status !== MemberStatus.AlreadyLoggedIn) {\r\n                                this.loginEventService.emit(LoginEventType.Success, value);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const confirmEmailToken = Object.getQueryStringValue(\"confirmEmailToken\");\r\n        if (!Object.isNullOrUndefined(confirmEmailToken)) {\r\n        }\r\n\r\n        this.loginForm = this.formBuilder.group({\r\n            username: [\"\", Validators.required],\r\n            password: [\"\", Validators.required],\r\n            remember: [\"1\"]\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/simple-login/simple-login.component.ts","module.exports = \"<ng-template [ngTemplateOutlet]=\\\"this.currentTemplate\\\" [ngOutletContext]=\\\"{ $implicit: this }\\\"></ng-template>\\r\\n<ng-template #AlertEmailConfirmationNeeded>\\r\\n   {{ this.emailConfirmationText }} <button type=\\\"button\\\" (click)=\\\"this.sendConfirmationMail($event)\\\"><i class=\\\"fa fa-envelope-o\\\" aria-hidden=\\\"true\\\"></i> {{ this.emailConfirmationButtonText }}</button>\\r\\n</ng-template>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/simple-login/templates/simple-login.html\n// module id = ./src/typescript/components/simple-login/templates/simple-login.html\n// module chunks = 3","import { Component, Inject, NgZone, ChangeDetectorRef, ViewContainerRef, OnInit } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormBuilder } from \"@angular/forms\";\r\nimport { MemberStatus } from \"../../enums\";\r\nimport { IMemberPayload } from \"../../abstraction/IMemberPayload\";\r\nimport { TemplateBaseComponent } from \"../abstraction/TemplateBaseComponent\";\r\nimport * as bl from \"../../blueleet\";\r\nimport { LoginEventService, LoginEventType } from \"../../loginEvent.service\";\r\nimport { GenericMessages } from \"../../enums/generic-messages-enum\";\r\nimport { ValidationService } from \"../../validation.service\";\r\n\r\n@Component({\r\n    selector: \"simple-signup\",\r\n    template: `<ng-template [ngTemplateOutlet]=\"this.currentTemplate\" [ngOutletContext]=\"{ $implicit: this }\"></ng-template>`\r\n})\r\nexport class SimpleSignUpComponent extends TemplateBaseComponent implements OnInit {\r\n    signUpForm: FormGroup;\r\n    payload: IMemberPayload;\r\n    signupSuccess: boolean = false;\r\n\r\n    constructor(\r\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\r\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\r\n        @Inject(FormBuilder) private formBuilder: FormBuilder,\r\n        @Inject(NgZone) private ngZone: NgZone,\r\n        @Inject(bl.UmbracoAjaxService) private umbracoAjaxService: bl.UmbracoAjaxService,\r\n        @Inject(LoginEventService) private loginEventService: LoginEventService,\r\n        @Inject(ValidationService) private validationService: ValidationService\r\n    ) {\r\n        super(changeDetectorRef, viewContainer);\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (!Object.isNullOrUndefined(this.payload) && this.payload.messageType === GenericMessages.Danger) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    doSignUp($event: Event) {\r\n        $event.preventDefault();\r\n\r\n        this.ngZone.run(() => {\r\n            this.umbracoAjaxService.post(\"MemberSurface\", \"SignUpMemberPost\", this.signUpForm.value)\r\n                .catch((error: any) => {\r\n                    this.payload = error;\r\n                    if (error.messageType === GenericMessages.Danger && error.status === (MemberStatus.AuthorizationFailure || MemberStatus.FacebookIntegrated)) {\r\n                        this.loginEventService.emit(LoginEventType.SignInError, error);\r\n                    } else {\r\n                        this.loginEventService.emit(LoginEventType.GenericError, error);\r\n                    }\r\n                })\r\n                .then((value: IMemberPayload) => {\r\n                    console.log(\"SignUpMemberPost\", value);\r\n                    if (value) {\r\n                        this.payload = value;\r\n                        this.signupSuccess = true;\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        let password = this.formBuilder.control(\"\", ValidationService.passwordValidator(8));\r\n        let confirmPassword = this.formBuilder.control(\"\", ValidationService.equalTo(password, \"Password\", \"Confirm Password\"));\r\n        const usernamePatternValidator = this.validationService.pattern(new RegExp(/[-!$%^&*()+|~=`{}\\[\\]:\\\";#@'<>?,\\/\\.]/), \"Username contains invalid characters -!$%^&*()+|~=`{}[]:\\\";#@'<>?,\\/\\.\");\r\n\r\n        this.signUpForm = this.formBuilder.group({\r\n            email: [\"\", Validators.compose([Validators.required, ValidationService.email]), this.validationService.emailValidator(this.umbracoAjaxService).bind(this)],\r\n            username: [\"\", Validators.compose([Validators.required, usernamePatternValidator, Validators.minLength(4)]), this.validationService.usernameValidator(this.umbracoAjaxService).bind(this)],\r\n            firstName: [\"\", Validators.required],\r\n            lastName: [\"\", Validators.required],\r\n            gender: [\"\", Validators.required],\r\n            passwordGroup: this.formBuilder.group({\r\n                password: password,\r\n                confirmPassword: confirmPassword\r\n            })\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/simple-signup/simple-signup.component.ts","module.exports = __webpack_public_path__ + \"./assets/components/widget-quickNavigator/quicknav-arrow.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/widget-quickNavigator/quicknav-arrow.png\n// module id = ./src/typescript/components/widget-quickNavigator/quicknav-arrow.png\n// module chunks = 3","module.exports = \"<ul class=\\\"widget-quickNavigator\\\" *ngIf=\\\"menu\\\">\\r\\n    <li class=\\\"quickNavigator-editLink\\\">\\r\\n        <a href=\\\"{{menu.editLinkUrl}}\\\" target=\\\"_self\\\"><span>Umbraco</span></a>\\r\\n    </li>\\r\\n    <li class=\\\"quickNavigator-dropdown\\\">\\r\\n        <a class=\\\"quickNavigator-dropdown-arrow\\\" (click)=\\\"toggle($event)\\\"></a>\\r\\n        <ul class=\\\"quickNavigator-menu\\\" [ngClass]=\\\"{'menu-open': isMenuOpen }\\\">\\r\\n            <li *ngFor=\\\"let value of menu?.items\\\">\\r\\n                <a href=\\\"{{ value.url }}\\\" target=\\\"{{ value.target }}\\\">{{ value.name }}</a>\\r\\n            </li>\\r\\n            <ng-content></ng-content>\\r\\n        </ul>\\r\\n    </li>\\r\\n</ul>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/widget-quickNavigator/templates/quicknavigator.html\n// module id = ./src/typescript/components/widget-quickNavigator/templates/quicknavigator.html\n// module chunks = 3","module.exports = __webpack_public_path__ + \"./assets/components/widget-quickNavigator/umbraco.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/widget-quickNavigator/umbraco.svg\n// module id = ./src/typescript/components/widget-quickNavigator/umbraco.svg\n// module chunks = 3","import { Component, NgZone, Inject, ElementRef, OnInit } from \"@angular/core\";\r\nimport { IQuickNavigatorMenu } from \"./abstraction/IQuickNavigatorMenu\";\r\nimport * as $ from \"jquery\";\r\nimport { UmbracoAjaxService } from \"../../blueleet/\";\r\nrequire(\"./quicknav-arrow.png\");\r\nrequire(\"./umbraco.svg\");\r\n\r\n@Component({\r\n    selector: \"widget-quick-navigator\",\r\n    template: require(\"./templates/quicknavigator.html\"),\r\n    styles: [require(\"./widget-quickNavigator.scss\").toString()]\r\n})\r\nexport class WidgetQuickNavigatorComponent implements OnInit {\r\n    isMenuOpen: boolean = false;\r\n    menu: IQuickNavigatorMenu = undefined;\r\n\r\n    constructor(\r\n        @Inject(UmbracoAjaxService) private umbracoAjaxService: UmbracoAjaxService,\r\n        @Inject(NgZone) private zone: NgZone,\r\n        @Inject(ElementRef) private elementRef: ElementRef) { }\r\n\r\n    toggle(event) {\r\n        event.preventDefault();\r\n        this.isMenuOpen = !this.isMenuOpen;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const promise = this.umbracoAjaxService.post(\"QuickNavigatorWidget\", \"GetLinkItemsPost\", null, { silentTry: true });\r\n        promise.then(value => {\r\n            if (value) {\r\n                this.zone.run(() => {\r\n                    this.menu = value;\r\n                    $(document).on(\"click\", ($event: Event) => {\r\n                        if (!$($event.target).closest(this.elementRef.nativeElement).length) {\r\n                            // Hide the component.\r\n                            this.isMenuOpen = false;\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/components/widget-quickNavigator/widget-quickNavigator.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./widget-quickNavigator.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./widget-quickNavigator.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/index.js!../../../../node_modules/sass-loader/index.js!./widget-quickNavigator.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/components/widget-quickNavigator/widget-quickNavigator.scss\n// module id = ./src/typescript/components/widget-quickNavigator/widget-quickNavigator.scss\n// module chunks = 3","import { NgZone } from \"@angular/core\";\r\nimport { TemplateBaseComponent } from \"../components/abstraction/TemplateBaseComponent\";\r\nimport { UserService } from \"../user.service\";\r\nconst _ = require(\"lodash\");\r\n\r\nexport function Protected<TFunction extends Function>(target: TFunction): TFunction {\r\n    if (target.prototype instanceof TemplateBaseComponent) {\r\n        let ngAfterContentInit = target.prototype.ngAfterContentInit;\r\n        let updateTemplate = target.prototype.updateTemplate;\r\n\r\n        Object.defineProperty(target.prototype,\r\n            \"updateTemplate\",\r\n            {\r\n                value: function () {\r\n                    const currentTemplateState = this.currentTemplate;\r\n                    const viewContainerRef = this.viewContainerRef;\r\n                    const zone: NgZone = viewContainerRef.injector.get(NgZone);\r\n                    const userService: UserService = viewContainerRef.injector.get(UserService);\r\n                    const args = arguments;\r\n\r\n                    userService.onHasAccess.subscribe(hasAccess => {\r\n                        zone.run(() => {\r\n                            this.currentTemplate = null;\r\n                            if (_.isBoolean(hasAccess) && hasAccess) {\r\n                                this.currentTemplate = currentTemplateState;\r\n                                return updateTemplate.apply(this, args);\r\n                            } else {\r\n                                this.currentTemplate = null;\r\n                                return () => { };\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n\r\n        Object.defineProperty(target.prototype, \"ngAfterContentInit\", {\r\n            value: function () {\r\n                const viewContainerRef = this.viewContainerRef;\r\n                const zone: NgZone = viewContainerRef.injector.get(NgZone);\r\n                const userService: UserService = viewContainerRef.injector.get(UserService);\r\n                const args = arguments;\r\n\r\n                zone.run(() => {\r\n                    userService.onHasAccess.subscribe((hasAccess: boolean) => {\r\n                        if (_.isBoolean(hasAccess) && hasAccess) {\r\n                            return ngAfterContentInit.apply(this, args);\r\n                        } else {\r\n                            this.currentTemplate = null;\r\n                            return () => { };\r\n                        }\r\n                    });\r\n                });\r\n\r\n                return () => { };\r\n            }\r\n        });\r\n\r\n        return target;\r\n    }\r\n\r\n    console.warn(`The object '${target.constructor.name}' is not supported for @Protected.`);\r\n    return target;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/decorators/Protected.ts","import { Injectable, Inject, } from \"@angular/core\";\r\n\r\n/**\r\n* Reference: http://detectmobilebrowsers.com/\r\n*/\r\n@Injectable()\r\nexport class DetectDeviceService {\r\n    /* tslint:disable:max-line-length */\r\n    private mobileRegex: RegExp = new RegExp(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/);\r\n    private mobilePartialRegex: RegExp = new RegExp(/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i);\r\n    /* tslint:enable:max-line-length */\r\n\r\n    constructor( @Inject(Window) public window: Window) { }\r\n\r\n    public isMobile(): boolean {\r\n        let agent = navigator.userAgent || navigator.vendor || (<any>window).opera;\r\n\r\n        return this.mobileRegex.test(agent) || this.mobilePartialRegex.test(agent.substring(0, 4));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/detectDevice.service.ts","export class Env {\r\n    static isProd(): boolean {\r\n        return ENV === \"production\";\r\n    }\r\n\r\n    static isDev(): boolean {\r\n        return ENV === \"development\";\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/dev-helpers.ts","export enum DefaultViewState {\r\n    None,\r\n    DefaultTemplate\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/enums/default-view-state-enum.ts","export enum Gender {\r\n    /**\r\n     * @description Male flag.\r\n     */\r\n    Male = 0,\r\n\r\n    /**\r\n     * @description Female flag.\r\n     */\r\n    Female = 1\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/enums/gender.ts","export enum GenericMessages {\r\n    Warning,\r\n    Danger,\r\n    Success,\r\n    Info\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/enums/generic-messages-enum.ts","/**\r\n * @module\r\n * @description\r\n * Entry point for all public enums.\r\n */\r\nexport * from \"./generic-messages-enum\";\r\nexport * from \"./member-status-enum\";\r\nexport * from \"./default-view-state-enum\";\r\nexport * from \"./password-verdict\";\r\nexport * from \"./gender\";\r\nexport * from \"./searchType\";\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/enums/index.ts","export enum MemberStatus {\r\n    Unknown,\r\n    NeedApproval,\r\n    EmailAuthorisationNeeded,\r\n    Registered,\r\n    NotRegistered,\r\n    LoginExpired,\r\n    EmailRetrievalDisallowed,\r\n    AlreadyLoggedIn,\r\n    LoggedIn,\r\n    AuthorizationFailure,\r\n    FacebookIntegrated,\r\n    AlreadyRegistered,\r\n    AdminLoggedIn\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/enums/member-status-enum.ts","export enum PasswordVerdict {\r\n    /**\r\n     * @description Too guessable: risky password.\r\n     */\r\n    Weak = 0,\r\n\r\n    /**\r\n     * @description Very guessable: protection from throttled online attacks.\r\n     */\r\n    Normal = 1,\r\n\r\n    /**\r\n     * @description Somewhat guessable: protection from unthrottled online attacks.\r\n     */\r\n    Medium = 2,\r\n\r\n    /**\r\n     * @description Safely unguessable: moderate protection from offline slow-hash scenario.\r\n     */\r\n    Strong = 3,\r\n\r\n    /**\r\n     * @description Very unguessable: strong protection from offline slow-hash scenario.\r\n     */\r\n    VeryStrong = 4\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/enums/password-verdict.ts","export enum SearchType {\r\n    /**\r\n     * @description Marks a content type.\r\n     */\r\n    Content,\r\n\r\n    /**\r\n     * @description Marks a media type.\r\n     */\r\n    Media,\r\n\r\n    /**\r\n     * @description Marks a file type.\r\n     */\r\n    File\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/enums/searchType.ts","import { Injectable, Directive, ElementRef, Inject, Renderer, HostListener, Input, OnInit, AfterContentInit, OnChanges, SimpleChanges } from \"@angular/core\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport * as bl from \"./blueleet/\";\r\nimport * as $ from \"jquery\";\r\nimport { HoverableEventService, HoverableEventType } from \"./hoverableEvent.service\";\r\n\r\n@Directive({\r\n    selector: \"[hoverable-group]\",\r\n    providers: [HoverableEventService]\r\n})\r\nexport class HoverableGroupDirective implements OnInit, AfterContentInit, OnChanges {\r\n    @Input(\"hoverable-group\") group: string;\r\n    @Input(\"show-on-hover\") showOnHover: boolean = true;\r\n\r\n    constructor( @Inject(HoverableEventService) private eventService: HoverableEventService) { }\r\n\r\n    @HostListener(\"mouseenter\")\r\n    public onMouseEnter(): void {\r\n        this.eventService.emit(HoverableEventType.MouseEnter);\r\n    }\r\n\r\n    @HostListener(\"mouseleave\")\r\n    public onMouseLeave(): void {\r\n        this.eventService.emit(HoverableEventType.MouseLeave);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        const group = changes[\"group\"];\r\n        if (group) {\r\n            // Checks if this is an existing item created before.\r\n            if (typeof group.previousValue === \"string\") {\r\n                this.eventService.setGroup(group.currentValue);\r\n                this.eventService.emit(HoverableEventType.InstanceGroup, this);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.eventService.setGroup(this.group);\r\n        this.eventService.emit(HoverableEventType.InstanceGroup, this);\r\n    }\r\n\r\n    ngOnInit(): void { }\r\n}\r\n\r\n@Directive({\r\n    selector: \"[hoverable]\",\r\n    providers: [HoverableEventService]\r\n})\r\nexport class HoverableDirective implements AfterContentInit, OnChanges {\r\n    @Input(\"hoverable\") group: string = null;\r\n    @Input(\"show-on-hover\") showOnHover: boolean = null;\r\n    @Input(\"visible-display-value\") visibleDisplayValue: string = \"inline-block\";\r\n    displayHiddenValue: string = \"none\";\r\n    orginaValue: string;\r\n    mouseEnterSubscription: Rx.Subscription;\r\n    mouseLeaveSubscription: Rx.Subscription;\r\n\r\n    constructor(\r\n        @Inject(ElementRef) private elementRef: ElementRef,\r\n        @Inject(Renderer) private renderer: Renderer,\r\n        @Inject(HoverableEventService) private eventService: HoverableEventService) {\r\n    }\r\n\r\n    public enter(): void {\r\n        if (this.showOnHover) {\r\n            this.renderer.setElementStyle(this.elementRef.nativeElement, \"display\", this.orginaValue);\r\n        } else {\r\n            this.renderer.setElementStyle(this.elementRef.nativeElement, \"display\", \"none\");\r\n        }\r\n    }\r\n\r\n    public leave(): void {\r\n        if (this.showOnHover) {\r\n            this.renderer.setElementStyle(this.elementRef.nativeElement, \"display\", \"none\");\r\n        } else {\r\n            this.renderer.setElementStyle(this.elementRef.nativeElement, \"display\", this.orginaValue);\r\n        }\r\n    }\r\n\r\n    private initialize(instance?: HoverableGroupDirective): void {\r\n        if (instance) {\r\n            if (this.showOnHover === null && instance.showOnHover !== null) {\r\n                this.showOnHover = instance.showOnHover;\r\n            }\r\n        }\r\n\r\n        if (this.showOnHover) {\r\n            this.renderer.setElementStyle(this.elementRef.nativeElement, \"display\", \"none\");\r\n        } else {\r\n            this.renderer.setElementStyle(this.elementRef.nativeElement, \"display\", this.orginaValue);\r\n        }\r\n\r\n        this.mouseEnterSubscription = this.eventService.on(HoverableEventType.MouseEnter).subscribe(() => {\r\n            this.enter();\r\n        });\r\n\r\n        this.mouseLeaveSubscription = this.eventService.on(HoverableEventType.MouseLeave).subscribe(() => {\r\n            this.leave();\r\n        });\r\n    }\r\n\r\n    private updateOrginalValue(): void {\r\n        this.orginaValue = $(this.elementRef.nativeElement).css(\"display\");\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        const group = changes[\"group\"];\r\n        if (group) {\r\n            this.eventService.setGroup(group.currentValue);\r\n            if (typeof group.previousValue !== \"string\") {\r\n                // This is a new entity\r\n                this.updateOrginalValue();\r\n\r\n                // We set this as predefined to prevent it from showing up before we can determine if it should or not.\r\n                this.renderer.setElementStyle(this.elementRef.nativeElement, \"display\", \"none\");\r\n\r\n                if (this.group) {\r\n                    // Subscribe to initialize event.\r\n                    this.eventService.on(HoverableEventType.InstanceGroup).debounceTime(1000).subscribe((instance: HoverableGroupDirective) => {\r\n                        // Unsubscrbie if already subscribing.\r\n                        if (this.mouseLeaveSubscription) {\r\n                            this.mouseLeaveSubscription.unsubscribe();\r\n                        }\r\n                        if (this.mouseEnterSubscription) {\r\n                            this.mouseEnterSubscription.unsubscribe();\r\n                        }\r\n\r\n                        // This ensures initialize is called in the correct moment.\r\n                        setTimeout(() => this.initialize(instance), 1);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit(): void { }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/hoverable.directive.ts","import { Injectable, Directive, ElementRef, Inject, Renderer, HostListener, Input, OnInit } from \"@angular/core\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport * as bl from \"./blueleet/\";\r\nimport * as $ from \"jquery\";\r\n\r\nexport enum HoverableEventType {\r\n    MouseEnter,\r\n    MouseLeave,\r\n    InstanceGroup\r\n}\r\n\r\n@Injectable()\r\nexport class HoverableEventService implements bl.IBroadcastEvent<HoverableEventType> {\r\n    group: string = null;\r\n\r\n    constructor( @Inject(bl.BroadcasterService) protected broadcaster: bl.BroadcasterService) { }\r\n\r\n    public emit(eventType: HoverableEventType, data?: any): void {\r\n        let key = this.getKey(eventType);\r\n        this.broadcaster.broadcast(key, data);\r\n    }\r\n\r\n    public on(eventType: HoverableEventType): Rx.Observable<any> {\r\n        let key = this.getKey(eventType);\r\n        return this.broadcaster.on<any>(key);\r\n    }\r\n\r\n    public setGroup(value: any) {\r\n        this.group = value;\r\n    }\r\n\r\n    public getKey(ofType: HoverableEventType) {\r\n        let key: string;\r\n        switch (ofType) {\r\n            case HoverableEventType.MouseEnter:\r\n                key = \"HoverableEventType:MouseEnter\";\r\n                break;\r\n            case HoverableEventType.MouseLeave:\r\n                key = \"HoverableEventType:MouseLeave\";\r\n                break;\r\n            case HoverableEventType.InstanceGroup:\r\n                key = \"HoverableEventType:InstanceGroup\";\r\n                break;\r\n            default:\r\n                key = \"HoverableEventType:None\";\r\n                break;\r\n        }\r\n\r\n        return this.group === null ? `${key}` : `${key}:${this.group}`;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/hoverableEvent.service.ts","import { Directive, ElementRef, Inject, Renderer, HostListener, Input, OnInit } from \"@angular/core\";\r\nimport * as $ from \"jquery\";\r\n\r\n@Directive({ selector: \"[icon-color]\" })\r\nexport class IconColorDirective implements OnInit {\r\n    @Input(\"icon-color\") iconColor: string;\r\n    $iconElement: any;\r\n\r\n    constructor( @Inject(ElementRef) public elementRef: ElementRef, @Inject(Renderer) public renderer: Renderer) { }\r\n\r\n    @HostListener(\"mouseenter\")\r\n    public onMouseEnter(): void {\r\n        this.highlight(this.iconColor);\r\n    }\r\n\r\n    @HostListener(\"mouseleave\")\r\n    public onMouseLeave(): void {\r\n        this.highlight(null);\r\n    }\r\n\r\n    private highlight(color: string): void {\r\n        this.renderer.setElementStyle(this.$iconElement, \"color\", color);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.$iconElement = $(this.elementRef.nativeElement).find(\"i\")[0];\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/icon-color.directive.ts","import { Directive, Input, TemplateRef, ViewContainerRef, Inject, AfterViewInit } from \"@angular/core\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport * as $ from \"jquery\";\r\nimport { UserService } from \"./user.service\";\r\n\r\n@Directive({ selector: \"[IfAdminAnd]\" })\r\nexport class IfAdminAndDirective implements AfterViewInit {\r\n    public onStateChange: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n    private hasView: boolean = false;\r\n    private condition: boolean = undefined;\r\n\r\n    @Input(\"IfAdminAnd\") set ifAdminAnd(condition: boolean) {\r\n        this.condition = condition;\r\n        if (this.userService.onIsAdminChange.value) {\r\n            if (!condition && this.hasView) {\r\n                this.onStateChange.next(false);\r\n            } else if (condition && !this.hasView) {\r\n                this.onStateChange.next(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        @Inject(TemplateRef) private templateRef: TemplateRef<any>,\r\n        @Inject(ViewContainerRef) private viewContainer: ViewContainerRef,\r\n        @Inject(UserService) private userService: UserService) { }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.viewContainer.clear();\r\n        this.hasView = false;\r\n        this.onStateChange.subscribe((showView) => {\r\n            if (showView && !this.hasView) {\r\n                this.hasView = true;\r\n                this.viewContainer.createEmbeddedView(this.templateRef);\r\n            } else if (!showView && this.hasView) {\r\n                this.hasView = false;\r\n                this.viewContainer.clear();\r\n            }\r\n        });\r\n\r\n        this.userService.isAdmin().then(() => {\r\n            this.userService.onIsAdminChange.subscribe((isAdmin) => {\r\n                if (this.condition !== undefined && this.condition === false) {\r\n                    isAdmin = false;\r\n                }\r\n\r\n                this.onStateChange.next(isAdmin);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n@Directive({ selector: \"[IfAdmin]\" })\r\nexport class IfAdminDirective implements AfterViewInit {\r\n    public onStateChange: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n    private hasView = false;\r\n\r\n    constructor(\r\n        @Inject(TemplateRef) private templateRef: TemplateRef<any>,\r\n        @Inject(ViewContainerRef) private viewContainer: ViewContainerRef,\r\n        @Inject(UserService) private userService: UserService) { }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.viewContainer.clear();\r\n        this.hasView = false;\r\n        this.onStateChange.subscribe((showView) => {\r\n            if (showView && !this.hasView) {\r\n                this.hasView = true;\r\n                this.viewContainer.createEmbeddedView(this.templateRef);\r\n            } else if (!showView && this.hasView) {\r\n                this.hasView = false;\r\n                this.viewContainer.clear();\r\n            }\r\n        });\r\n\r\n        this.userService.isAdmin().then(() => {\r\n            this.userService.onIsAdminChange.subscribe((isAdmin) => {\r\n                this.onStateChange.next(isAdmin);\r\n            });\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/if-admin.directive.ts","import { Pipe, PipeTransform } from \"@angular/core\";\r\n\r\n@Pipe({ name: \"log\" })\r\nexport class LogPipe implements PipeTransform {\r\n    transform(value: string): any {\r\n        if (!value) {\r\n            console.log(\"[LogPipe]: value is:\");\r\n            console.log(value);\r\n            return value;\r\n        }\r\n\r\n        console.log(\"[LogPipe]: value is null\");\r\n\r\n        return value;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/log.pipe.ts","import { Injectable, Inject } from \"@angular/core\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport * as bl from \"./blueleet/\";\r\nimport * as MemberPayload from \"./abstraction/IMemberPayload\";\r\nimport { IBroadcastEvent } from \"./blueleet/broadcaster.service\";\r\n\r\nexport enum LoginEventType {\r\n    None,\r\n    Success,\r\n    GenericError,\r\n    SignInError,\r\n    SignUpError,\r\n    ForgotPasswordError,\r\n    ShowLoginView,\r\n    ShowSignupView,\r\n    ShowForgotPasswordView\r\n}\r\n\r\n@Injectable()\r\nexport class LoginEventService implements IBroadcastEvent<LoginEventType> {\r\n    constructor( @Inject(bl.BroadcasterService) protected broadcaster: bl.BroadcasterService) { }\r\n\r\n    public emit(eventType: LoginEventType, data?: MemberPayload.IMemberPayload): void {\r\n        let key = this.getKey(eventType);\r\n        this.broadcaster.broadcast(key, data);\r\n        if (eventType !== (LoginEventType.Success || LoginEventType.None)) {\r\n            this.broadcaster.broadcast(\"LoginEventType:Error\", data);\r\n        }\r\n    }\r\n\r\n    public on(eventType: LoginEventType): Rx.Observable<MemberPayload.IMemberPayload> {\r\n        let key = this.getKey(eventType);\r\n        return this.broadcaster.on<MemberPayload.IMemberPayload>(key);\r\n    }\r\n\r\n    public onError(): Rx.Observable<MemberPayload.IMemberPayload> {\r\n        return this.broadcaster.on<MemberPayload.IMemberPayload>(\"LoginEventType:Error\");\r\n    }\r\n\r\n    public getKey(ofType: LoginEventType) {\r\n        switch (ofType) {\r\n            case LoginEventType.Success:\r\n                return \"LoginEventType:Success\";\r\n            case LoginEventType.ForgotPasswordError:\r\n                return \"LoginEventType:ForgotPasswordError\";\r\n            case LoginEventType.GenericError:\r\n                return \"LoginEventType:GenericError\";\r\n            case LoginEventType.SignInError:\r\n                return \"LoginEventType:SignInError\";\r\n            case LoginEventType.SignUpError:\r\n                return \"LoginEventType:SignUpError\";\r\n            case LoginEventType.ShowLoginView:\r\n                return \"LoginEventType:ShowLoginView\";\r\n            case LoginEventType.ShowSignupView:\r\n                return \"LoginEventType:ShowSignupView\";\r\n            case LoginEventType.ShowForgotPasswordView:\r\n                return \"LoginEventType:ShowForgotPasswordView\";\r\n            default:\r\n                return \"LoginEventType:None\";\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/loginEvent.service.ts","/* tslint:disable */\r\nimport { Component, AfterViewInit } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app\", // this will ensure that angular controlls the whole page with only one root component.\r\n    template: (<any>document).getElementById(\"mainAppContent\").innerText // Currently we have no way of using existing html as per to https://github.com/angular/angular/issues/1858 so we use this hack.\r\n})\r\nexport class AppComponent implements AfterViewInit {\r\n    ngAfterViewInit(): void {        \r\n        //function sleep(ms) {\r\n        //    Pace.stop();\r\n        //    Pace.bar.render();\r\n        //    return new Promise(resolve => setTimeout(resolve, ms)).then(value => {\r\n        //        console.log(\"after sleep\");\r\n        //        Pace.bar.done();\r\n        //        return value;\r\n        //    });\r\n        //}\r\n\r\n        //(<any>window).sleep = sleep;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/main.app.ts","import { NgModule, APP_INITIALIZER } from \"@angular/core\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { HttpModule } from \"@angular/http\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { FileUploadModule } from \"ng2-file-upload\";\r\nimport * as ng2Busy from \"angular2-busy\";\r\n\r\n// ToDo: separate below code into own modules and import for better readability.\r\n\r\n// Valor imports\r\nimport { AlertModule } from \"ngx-bootstrap/alert\";\r\nimport { ModalModule } from \"ngx-bootstrap/modal\";\r\nimport { ButtonsModule } from \"ngx-bootstrap/buttons\";\r\nimport { PopoverModule } from \"ngx-bootstrap/popover\";\r\nimport { window } from \"ngx-bootstrap/utils/facade/browser\";\r\n\r\n// Application specific imports\r\nimport { AppComponent } from \"./main.app\";\r\nimport { IconColorDirective } from \"./icon-color.directive\";\r\nimport { LogPipe } from \"./log.pipe\";\r\nimport { DetectDeviceService } from \"./detectDevice.service\";\r\nimport { WidgetSearchDirective } from \"./widget-search.directive\";\r\nimport { WidgetQuickNavigatorComponent } from \"./components/widget-quickNavigator/widget-quickNavigator.component\";\r\nimport { facebookComponents } from \"./components/facebook/\";\r\nimport { LoginSignupComponent } from \"./components/login-signup/login-signup.component\";\r\nimport { LoginEventService, LoginEventType } from \"./loginEvent.service\";\r\nimport { LoginSignupCompleteComponent } from \"./components/login-signup/login-signup-complete.component\";\r\nimport { SearchBoxComponent } from \"./components/search-box/search-box.component\";\r\nimport { SimpleLoginComponent } from \"./components/simple-login/simple-login.component\";\r\nimport { UserService } from \"./user.service\";\r\nimport { SimpleSignUpComponent } from \"./components/simple-signup/simple-signup.component\";\r\nimport { BootstrapFormInputComponent } from \"./components/bootstrap/form-input.component\";\r\nimport { BootstrapAlertBoxComponent } from \"./components/bootstrap/alert-box/alert-box.component\";\r\nimport { ValidationService } from \"./validation.service\";\r\nimport { ForgotPasswordComponent } from \"./components/forgot-password/forgot-password.component\";\r\nimport { ProfileComponent } from \"./components/profile/profile.component\";\r\nimport { SignoutComponent } from \"./components/login-signup/signout.component\";\r\nimport { MemberStatus } from \"./enums/member-status-enum\";\r\nimport { AlertBoxService } from \"./alert-box.service\";\r\nimport { HoverableGroupDirective, HoverableDirective } from \"./hoverable.directive\";\r\nimport { HoverableEventService } from \"./hoverableEvent.service\";\r\nimport { IfAdminDirective, IfAdminAndDirective } from \"./if-admin.directive\";\r\nimport { ImageWallComponent } from \"./components/image-wall/image-wall.component\";\r\nimport { NotificationWallComponent } from \"./components/notification/notification-wall.component\";\r\nimport { PriceCalculationModule } from \"./modules/PriceCalculation/module\";\r\nimport { SearchWallComponent, SearchEmptyComponent } from \"./components/search-wall/search-wall.component\";\r\nimport * as bl from \"./blueleet/\";\r\n\r\n// Configure ngx-bootstrap\r\nwindow.__theme = \"bs4\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        BrowserModule,\r\n        HttpModule,\r\n        ReactiveFormsModule,\r\n        FileUploadModule,\r\n        ng2Busy.BusyModule,\r\n        bl.CommonDirectivesModule,\r\n        bl.WidgetsModule,\r\n        bl.BlueLeetUmbracoModule.forRoot(),\r\n        bl.InlineEditorModule.forRoot(),\r\n        bl.SearchModule.forRoot(),\r\n        bl.LanguageModule,\r\n        AlertModule.forRoot(),\r\n        ModalModule.forRoot(),\r\n        ButtonsModule.forRoot(),\r\n        PopoverModule.forRoot(),\r\n        PriceCalculationModule\r\n    ],\r\n    declarations: [\r\n        LogPipe,\r\n        AppComponent,\r\n        HoverableGroupDirective,\r\n        HoverableDirective,\r\n        IconColorDirective,\r\n        WidgetSearchDirective,\r\n        IfAdminDirective,\r\n        IfAdminAndDirective,\r\n        WidgetQuickNavigatorComponent,\r\n        facebookComponents,\r\n        LoginSignupComponent,\r\n        LoginSignupCompleteComponent,\r\n        SimpleLoginComponent,\r\n        SimpleSignUpComponent,\r\n        ForgotPasswordComponent,\r\n        SearchBoxComponent,\r\n        BootstrapFormInputComponent,\r\n        BootstrapAlertBoxComponent,\r\n        ProfileComponent,\r\n        SignoutComponent,\r\n        ImageWallComponent,\r\n        NotificationWallComponent,\r\n        SearchWallComponent,\r\n        SearchEmptyComponent\r\n    ],\r\n    providers: [\r\n        { provide: Window, useValue: window },\r\n        DetectDeviceService,\r\n        UserService,\r\n        LoginEventService,\r\n        AlertBoxService,\r\n        ValidationService,\r\n        HoverableEventService\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\r\nexport function appInializer(userService: UserService, umbracoAjaxService: bl.UmbracoAjaxService, loginEventService: LoginEventService): Promise<any> {\r\n    loginEventService.on(LoginEventType.Success).subscribe((value) => {\r\n        if (value.user || value.status === MemberStatus.AdminLoggedIn) {\r\n            if (!Object.isNullOrUndefined(value.redirectToProfilePage)) {\r\n                window.location.href = value.redirectToProfilePage;\r\n            } else {\r\n                umbracoAjaxService.post(\"MemberSurface\", \"GetLoginUrlPost\").then(url => {\r\n                    if (window.location.pathname.replace(new RegExp(\"/$\"), \"\") !== url.replace(new RegExp(\"/$\"), \"\")) {\r\n                        window.location.reload();\r\n                    } else {\r\n                        window.location.href = \"/\";\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    return new Promise((resolve) => {\r\n        userService.hasAccess().then(value => {\r\n            if (value) {\r\n                umbracoAjaxService.post(\"MemberSurface\", \"GetLoginUrlPost\").then(url => {\r\n                    if (window.location.pathname.replace(new RegExp(\"/$\"), \"\") === url.replace(new RegExp(\"/$\"), \"\")) {\r\n                        window.location.href = \"/\";\r\n                    } else {\r\n                        resolve(value);\r\n                    }\r\n                });\r\n            } else {\r\n                resolve(value);\r\n            }\r\n        });\r\n    });\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/main.bootstraper.ts","import { enableProdMode } from \"@angular/core\";\r\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\r\nimport { AppModule } from \"./main.bootstraper\";\r\nimport { Env } from \"./dev-helpers\";\r\n\r\nif (Env.isProd()) {\r\n    enableProdMode();\r\n}\r\n\r\nexport function main() {\r\n    return platformBrowserDynamic().bootstrapModule(AppModule, { useDebug: Env.isDev() });\r\n}\r\n\r\nif (document.readyState === \"complete\") {\r\n    main();\r\n} else {\r\n    (<any>document).addEventListener(\"DOMContentLoaded\", main);\r\n}\r\n\r\n// Import assets.\r\nimport \"./../assets/stylesheets/ie10-viewport-bug-workaround.css\";\r\nimport \"./../assets/images/favicon.png\";\r\nimport \"./../assets/images/clock-preview.png\";\r\n\r\n// Module assets\r\nimport \"angular2-busy/build/style/busy.css\";\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/main.browser.ts","import { PriceSet } from \"../entities/priceSet\";\r\nimport { Price } from \"../entities/price\";\r\n\r\nexport abstract class PriceCalculator {\r\n    public abstract setPrice(set: PriceSet);\r\n    public abstract calculate(): Price;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/abstraction/priceCalculator.ts","import { Price, PriceSet } from \"../index\";\r\nconst _ = require(\"lodash\");\r\n\r\nexport abstract class PriceCalculatorServiceBase {\r\n    pris: Price;\r\n    resekostnad: number;\r\n    materialMoms: number;\r\n    skattReduction: number;\r\n    moms: number;\r\n    isIncMoms: boolean;\r\n    protected inizialized: boolean = false;\r\n\r\n    constructor() {\r\n        this.pris = new Price();\r\n    }\r\n\r\n    public setPrice(set: PriceSet) {\r\n        if (this.inizialized === false) {\r\n            this.inizialized = true;\r\n\r\n            // Ensure that we calculate against 1.\r\n            set.vatRate = parseInt(\"1.0\", 10) + set.vatRate;\r\n        }\r\n\r\n        set.unitPrice = _.toNumber(set.unitPrice);\r\n\r\n        let a = this.pris.styckPris;\r\n        this.resekostnad = set.travelCost;\r\n        this.materialMoms = set.materialVat;\r\n        this.skattReduction = set.discountRate;\r\n        this.moms = set.vatRate;\r\n        this.isIncMoms = set.incVat;\r\n\r\n        if (this.skattReduction === 0) {\r\n            this.skattReduction = 1;\r\n        }\r\n\r\n        if (set.incVat) {\r\n            a.exMoms = set.unitPrice / set.vatRate;\r\n            a.incMoms = set.unitPrice;\r\n        } else {\r\n            a.exMoms = set.unitPrice;\r\n            a.incMoms = set.unitPrice * set.vatRate;\r\n        }\r\n    }\r\n\r\n    protected roundUp(p: number): number {\r\n        // avrunda upp till närmaste krona.\r\n        return (Math.ceil(p / 1)) * 1;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/abstraction/priceCalculatorServiceBase.ts","module.exports = \"<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header\\\">\\r\\n        {{ title }}\\r\\n    </div>\\r\\n    <div class=\\\"card-block\\\">\\r\\n        <h4 class=\\\"card-title\\\">{{ question }}</h4>\\r\\n        <ul class=\\\"list-group list-group-flush\\\" [formGroup]=\\\"calculatorForm\\\">\\r\\n            <li class=\\\"list-group-item\\\">               \\r\\n                <ng-select [items]=\\\"sqmList\\\"\\r\\n                           (data)=\\\"refreshValue($event)\\\"\\r\\n                           (selected)=\\\"selected($event)\\\"\\r\\n                           (typed)=\\\"typed($event)\\\"\\r\\n                           [placeholder]=\\\"this?.placeholderTitle\\\">\\r\\n                </ng-select>\\r\\n            </li>\\r\\n            <li class=\\\"list-group-item\\\" *ngIf=\\\"this?.sessions?.length\\\">\\r\\n                <p class=\\\"list-group-item-heading\\\">{{ this?.sessionTitle }}</p>\\r\\n                <div class=\\\"btn-group-vertical mx-auto w-100\\\">\\r\\n                    <label class=\\\"btn btn-primary change-price\\\" *ngFor=\\\"let item of this?.sessions; let i = index\\\" formControlName=\\\"session\\\" [btnRadio]=\\\"i\\\" [value]=\\\"activeSessionIndex\\\">{{ item.description }}</label>\\r\\n                </div>\\r\\n            </li>\\r\\n            <li class=\\\"list-group-item\\\" *ngIf=\\\"options.showFullPrice && showResultMessage\\\">{{ this?.fullPriceMessage }} {{ this?.price.incMoms }}</li>\\r\\n            <li class=\\\"list-group-item\\\" *ngIf=\\\"options.showReducedPrice && showResultMessage\\\">{{ this?.priceDiscountMessage }} {{ this?.price.incMoms }}</li>\\r\\n        </ul>\\r\\n    </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/modules/PriceCalculation/components/templates/widget-priceCalculatorByHours.html\n// module id = ./src/typescript/modules/PriceCalculation/components/templates/widget-priceCalculatorByHours.html\n// module chunks = 3","module.exports = \"<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header\\\">\\r\\n        {{ title }}\\r\\n    </div>\\r\\n    <div class=\\\"card-block\\\">\\r\\n        <h4 class=\\\"card-title\\\">{{ question }}</h4>\\r\\n        <ul class=\\\"list-group list-group-flush\\\" [formGroup]=\\\"calculatorForm\\\">\\r\\n            <li class=\\\"list-group-item\\\">\\r\\n                <input type=\\\"number\\\" [min]=\\\"sqmMin\\\" class=\\\"form-control\\\" formControlName=\\\"squareMeters\\\" />\\r\\n            </li>\\r\\n            <li class=\\\"list-group-item\\\" *ngIf=\\\"this?.priceVariations?.length\\\">\\r\\n                <p class=\\\"list-group-item-heading\\\">{{ this?.variationsTitle }}</p>\\r\\n                <div class=\\\"btn-group-vertical mx-auto w-100\\\">\\r\\n                    <label class=\\\"btn btn-primary change-price\\\" *ngFor=\\\"let item of this?.priceVariations; let i = index\\\" formControlName=\\\"variation\\\" [btnRadio]=\\\"i\\\" [value]=\\\"activeVariationIndex\\\">{{ item.heading }}</label>\\r\\n                </div>\\r\\n            </li>\\r\\n            <li class=\\\"list-group-item\\\" *ngIf=\\\"options.showFullPrice && showResultMessage\\\">{{ this?.fullPriceMessage }} {{ this?.price.incMoms }}</li>\\r\\n            <li class=\\\"list-group-item\\\" *ngIf=\\\"options.showReducedPrice && showResultMessage\\\">{{ this?.priceDiscountMessage }} {{ this?.price.incMoms }}</li>\\r\\n        </ul>\\r\\n    </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/modules/PriceCalculation/components/templates/widget-priceCalculatorBySquareMeters.html\n// module id = ./src/typescript/modules/PriceCalculation/components/templates/widget-priceCalculatorBySquareMeters.html\n// module chunks = 3","import { NgZone, Inject, Input, ElementRef, OnInit } from \"@angular/core\";\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\";\r\nimport { DomSanitizer } from \"@angular/platform-browser\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport * as $ from \"jquery\";\r\nimport * as bl from \"../../../blueleet\";\r\nimport { ValidationService } from \"../../../validation.service\";\r\nimport * as index from \"../index\";\r\n\r\nexport interface IWidgetPriceCalculatorOptions {\r\n    unitPrice: number;\r\n    discountRate: number;\r\n    incVat: boolean;\r\n    vatRate: number;\r\n    materialVat: number;\r\n    travelCost: number;\r\n}\r\n\r\nexport abstract class WidgetPriceCalculatorComponent<TOptType extends IWidgetPriceCalculatorOptions> implements OnInit {\r\n    calculatorForm: FormGroup;\r\n    defaultPriceSet: index.PriceSet;\r\n    activePriceSet: index.PriceSet;\r\n    price: index.Price;\r\n    fullPriceMessage: string;\r\n    priceDiscountMessage: string;\r\n    showResultMessage: boolean = false;\r\n\r\n    /*\r\n    *  Editor settings\r\n    */\r\n    @Input() title: string;\r\n    @Input() question: string;\r\n    @Input() options: TOptType | any;\r\n    @Input(\"sqm-min\") sqmMin: number = 10;\r\n\r\n    protected onPriceChangesLock: Rx.BehaviorSubject<index.Price> = new Rx.BehaviorSubject<index.Price>(null);\r\n    public onPriceChanges: Rx.Observable<index.Price> = this.onPriceChangesLock.asObservable();\r\n\r\n    constructor(\r\n        @Inject(NgZone) protected zone: NgZone,\r\n        @Inject(FormBuilder) protected formBuilder: FormBuilder,\r\n        @Inject(DomSanitizer) protected sanitizer: DomSanitizer,\r\n        @Inject(ElementRef) protected elementRef: ElementRef,\r\n        @Inject(bl.UmbracoAjaxService) protected umbracoAjaxService: bl.UmbracoAjaxService,\r\n        @Inject(bl.ConfigService) protected configService: bl.ConfigService,\r\n        @Inject(bl.TranslatorService) protected translatorService: bl.TranslatorService,\r\n        @Inject(ValidationService) protected validationService: ValidationService) {\r\n    }\r\n\r\n    setActive(set: index.PriceSet) {\r\n        this.activePriceSet = set;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const self = this;\r\n        if (self.options) {\r\n            self.options = JSON.parse(self.options);\r\n        } else {\r\n            self.options = {};\r\n        }\r\n\r\n        $.extend(self.options, { showFullPrice: true, showReducedPrice: true, showVariations: true }, self.options);\r\n\r\n        self.defaultPriceSet = new index.PriceSet(self.question,\r\n            self.options.unitPrice,\r\n            self.options.discountRate,\r\n            self.options.incVat,\r\n            self.options.vatRate,\r\n            self.options.materialVat,\r\n            self.options.travelCost);\r\n\r\n        self.setActive(self.defaultPriceSet);\r\n\r\n        self.onPriceChanges.subscribe(price => {\r\n            if (price === null) {\r\n                self.showResultMessage = false;\r\n                return;\r\n            }\r\n\r\n            let p1 = self.translatorService.smartTranslate(\"PriceCalculator.FullPriceMessage\", { Price: price.utanReduction.incMoms });\r\n            let p2 = self.translatorService.smartTranslate(\"PriceCalculator.DiscountPriceMessage\", { Price: price.medReduction.incMoms });\r\n\r\n            Promise.all([p1, p2]).then(values => {\r\n                this.zone.run(() => {\r\n                    self.fullPriceMessage = values[0];\r\n                    self.priceDiscountMessage = values[1];\r\n                    self.showResultMessage = true;\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/components/widget-priceCalculator.component.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/index.js!../../../../../node_modules/sass-loader/index.js!./widget-priceCalculator.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/index.js!../../../../../node_modules/sass-loader/index.js!./widget-priceCalculator.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/index.js!../../../../../node_modules/sass-loader/index.js!./widget-priceCalculator.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/typescript/modules/PriceCalculation/components/widget-priceCalculator.scss\n// module id = ./src/typescript/modules/PriceCalculation/components/widget-priceCalculator.scss\n// module chunks = 3","import { Component, NgZone, Inject, Input, ElementRef, OnInit } from \"@angular/core\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { DomSanitizer } from \"@angular/platform-browser\";\r\nimport * as $ from \"jquery\";\r\nimport * as bl from \"../../../blueleet\";\r\nimport { ValidationService } from \"../../../validation.service\";\r\nimport * as index from \"../index\";\r\nimport * as PriceSet from \"../entities/priceSet\";\r\nimport { WidgetPriceCalculatorComponent, IWidgetPriceCalculatorOptions } from \"./widget-priceCalculator.component\";\r\nconst _ = require(\"lodash\");\r\n\r\nexport class Session {\r\n    public occasion: number;\r\n    public description: string;\r\n}\r\n\r\nexport class HourBySquareMeter {\r\n    public hour: string;\r\n    public squareMeter: string;\r\n}\r\n\r\nexport interface IWidgetPriceCalculatorByHoursOptions extends IWidgetPriceCalculatorOptions {\r\n    sessions: Session[];\r\n    hourBySquareMeters: HourBySquareMeter[];\r\n}\r\n\r\n@Component({\r\n    selector: \"widget-price-calculator-by-hours\",\r\n    template: require(\"./templates/widget-priceCalculatorByHours.html\"),\r\n    styles: [require(\"./widget-priceCalculator.scss\").toString()],\r\n    providers: [index.PriceCalculatorByHours]\r\n})\r\nexport class WidgetPriceCalculatorByHoursComponent extends WidgetPriceCalculatorComponent<IWidgetPriceCalculatorByHoursOptions> implements OnInit, IWidgetPriceCalculatorByHoursOptions {\r\n    activeSessionIndex: number = 0;\r\n\r\n    /*\r\n    *  Editor settings\r\n    */\r\n    @Input() sessionTitle: string;\r\n    @Input() placeholderTitle: string;\r\n\r\n    /*\r\n    *  Calculator settings\r\n    */\r\n    @Input() unitPrice: number;\r\n    @Input() discountRate: number;\r\n    @Input() incVat: boolean;\r\n    @Input() vatRate: number;\r\n    @Input() materialVat: number;\r\n    @Input() travelCost: number;\r\n    @Input() sessions: Session[] = [];\r\n    @Input() hourBySquareMeters: HourBySquareMeter[] = [];\r\n\r\n    hoursBySqmPairs: any[];\r\n    sqmList: any[];\r\n\r\n    constructor(\r\n        @Inject(NgZone) zone: NgZone,\r\n        @Inject(FormBuilder) formBuilder: FormBuilder,\r\n        @Inject(DomSanitizer) sanitizer: DomSanitizer,\r\n        @Inject(ElementRef) elementRef: ElementRef,\r\n        @Inject(bl.UmbracoAjaxService) umbracoAjaxService: bl.UmbracoAjaxService,\r\n        @Inject(bl.ConfigService) configService: bl.ConfigService,\r\n        @Inject(bl.TranslatorService) translatorService: bl.TranslatorService,\r\n        @Inject(ValidationService) validationService: ValidationService,\r\n        @Inject(index.PriceCalculatorByHours) private priceCalculatorByHours: index.PriceCalculatorByHours,\r\n    ) {\r\n        super(zone, formBuilder, sanitizer, elementRef, umbracoAjaxService, configService, translatorService, validationService);\r\n    }\r\n\r\n    setActive(set: PriceSet.PriceSet): void {\r\n        super.setActive(set);\r\n        this.priceCalculatorByHours.setPrice(this.activePriceSet);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        const self = this;\r\n\r\n        // Copy over any settings to self instance.\r\n        $.extend(self, self.options);\r\n\r\n        // Partition 'hourBySquareMeters' by two skipping first\r\n        this.hoursBySqmPairs = _.chunk(this.hourBySquareMeters, 2);\r\n        this.sqmList = _.map(this.hoursBySqmPairs, (pair: HourBySquareMeter[], index: number) => {\r\n            let low = pair[0];\r\n            let highe = pair[1];\r\n            let text: string;\r\n\r\n            if (highe) {\r\n                text = `${parseInt(low.squareMeter, 10)} - ${parseInt(highe.squareMeter, 10)}`;\r\n            } else {\r\n                text = `${parseInt(low.squareMeter, 10)}`;\r\n            }\r\n\r\n            // Bug: ng-select can not handle index with 0 as it is skipped.\r\n            let result = { id: index + 1, text: text };\r\n            return result;\r\n        });\r\n\r\n        self.calculatorForm = self.formBuilder.group({\r\n            squareMeters: [\"\", ValidationService.number],\r\n            session: [0, ValidationService.number]\r\n        });\r\n\r\n        const squareMetersControl = self.calculatorForm.get(\"squareMeters\");\r\n        const sessionControl = self.calculatorForm.get(\"session\");\r\n        sessionControl.valueChanges.subscribe((index: any) => {\r\n            self.activeSessionIndex = index;\r\n\r\n            // Trigger an update\r\n            squareMetersControl.patchValue(squareMetersControl.value);\r\n        });\r\n\r\n        squareMetersControl.valueChanges.debounceTime(500).throttle(() => { return self.onPriceChangesLock; }).subscribe((value: any) => {\r\n\r\n            // Bug: ng-select can not handle index with 0 as it is skipped.\r\n            let hour = self.hoursBySqmPairs[value.id - 1][0].hour;\r\n            let session: Session = self.sessions[self.activeSessionIndex];\r\n\r\n            self.priceCalculatorByHours.setHours(hour);\r\n            self.priceCalculatorByHours.setTimesYear(session.occasion);\r\n            self.price = self.priceCalculatorByHours.calculate();\r\n\r\n            // Call next to release throttle and signal new price.\r\n            self.onPriceChangesLock.next(self.price);\r\n        });\r\n    }\r\n\r\n    selected(value: any): void {\r\n        const self = this;\r\n        const squareMetersControl = self.calculatorForm.get(\"squareMeters\");\r\n        squareMetersControl.patchValue(value);\r\n    }\r\n    \r\n    typed(value: any): void {\r\n        console.log('New search input: ', value);\r\n    }\r\n\r\n    refreshValue(value: any): void {\r\n        console.log(value);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/components/widget-priceCalculatorByHours.component.ts","import { Component, NgZone, Inject, Input, ElementRef, OnInit } from \"@angular/core\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { DomSanitizer } from \"@angular/platform-browser\";\r\nimport * as $ from \"jquery\";\r\nimport * as bl from \"../../../blueleet\";\r\nimport { ValidationService } from \"../../../validation.service\";\r\nimport * as index from \"../index\";\r\nimport * as PriceSet from \"../entities/priceSet\";\r\nimport { WidgetPriceCalculatorComponent, IWidgetPriceCalculatorOptions } from \"./widget-priceCalculator.component\";\r\nconst _ = require(\"lodash\");\r\n\r\nexport class PriceVariation {\r\n    public heading: string;\r\n    public unitPrice: number;\r\n}\r\n\r\nexport interface IWidgetPriceCalculatorBySquareMetersOptions extends IWidgetPriceCalculatorOptions {\r\n    priceVariations: PriceVariation[];\r\n}\r\n\r\n@Component({\r\n    selector: \"widget-price-calculator-by-square-meters\",\r\n    template: require(\"./templates/widget-priceCalculatorBySquareMeters.html\"),\r\n    styles: [require(\"./widget-priceCalculator.scss\").toString()],\r\n    providers: [index.PriceCalculatorBySquareMeters]\r\n})\r\nexport class WidgetPriceCalculatorBySquareMetersComponent extends WidgetPriceCalculatorComponent<IWidgetPriceCalculatorBySquareMetersOptions> implements OnInit, IWidgetPriceCalculatorBySquareMetersOptions {\r\n    activeVariationIndex: number = 0;\r\n\r\n    /*\r\n    *  Editor settings\r\n    */\r\n    @Input() variationsTitle: string;\r\n\r\n    /*\r\n    *  Calculator settings\r\n    */\r\n    @Input() unitPrice: number;\r\n    @Input() discountRate: number;\r\n    @Input() incVat: boolean;\r\n    @Input() vatRate: number;\r\n    @Input() materialVat: number;\r\n    @Input() travelCost: number;\r\n    @Input() priceVariations: PriceVariation[] = [];\r\n\r\n    constructor(\r\n        @Inject(NgZone) zone: NgZone,\r\n        @Inject(FormBuilder) formBuilder: FormBuilder,\r\n        @Inject(DomSanitizer) sanitizer: DomSanitizer,\r\n        @Inject(ElementRef) elementRef: ElementRef,\r\n        @Inject(bl.UmbracoAjaxService) umbracoAjaxService: bl.UmbracoAjaxService,\r\n        @Inject(bl.ConfigService) configService: bl.ConfigService,\r\n        @Inject(bl.TranslatorService) translatorService: bl.TranslatorService,\r\n        @Inject(ValidationService) validationService: ValidationService,\r\n        @Inject(index.PriceCalculatorBySquareMeters) private priceCalculatorBySquareMeters: index.PriceCalculatorBySquareMeters,\r\n    ) {\r\n        super(zone, formBuilder, sanitizer, elementRef, umbracoAjaxService, configService, translatorService, validationService);\r\n    }\r\n\r\n    setActiveVariation(variation: PriceVariation) {\r\n        this.activePriceSet.name = variation.heading;\r\n        this.activePriceSet.unitPrice = variation.unitPrice;\r\n        this.setActive(this.activePriceSet);\r\n    }\r\n\r\n    setActive(set: PriceSet.PriceSet): void {\r\n        super.setActive(set);\r\n        this.priceCalculatorBySquareMeters.setPrice(this.activePriceSet);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        const self = this;\r\n\r\n        // Copy over any settings to self instance.\r\n        $.extend(self, self.options);\r\n\r\n        self.calculatorForm = self.formBuilder.group({\r\n            squareMeters: [\"\", ValidationService.number],\r\n            variation: [0, ValidationService.number]\r\n        });\r\n\r\n        const squareMetersControl = self.calculatorForm.get(\"squareMeters\");\r\n        const variationControl = self.calculatorForm.get(\"variation\");\r\n        variationControl.valueChanges.subscribe((index: any) => {\r\n            let variation: PriceVariation = self.priceVariations[index];\r\n            self.setActiveVariation(variation);\r\n            self.activeVariationIndex = index;\r\n\r\n            // Trigger an update\r\n            squareMetersControl.patchValue(squareMetersControl.value);\r\n        });\r\n\r\n        squareMetersControl.valueChanges.debounceTime(500).throttle(() => { return self.onPriceChangesLock; }).subscribe((value: any) => {\r\n            value = parseInt(value || 0, 10);\r\n\r\n            if (value <= 0 || _.isNaN(value)) {\r\n                self.onPriceChangesLock.next(null);\r\n                return;\r\n            }\r\n\r\n            self.priceCalculatorBySquareMeters.setSquareMeters(value);\r\n            self.price = self.priceCalculatorBySquareMeters.calculate();\r\n\r\n            // Call next to release throttle and signal new price.\r\n            self.onPriceChangesLock.next(self.price);\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/components/widget-priceCalculatorBySquareMeters.component.ts","export class Price {\r\n    material;\r\n    medReduction;\r\n    utanReduction;\r\n    styckPris;\r\n\r\n    constructor() {\r\n        this.styckPris = new function () {\r\n            this.exMoms = 0;\r\n            this.incMoms = 0;\r\n        };\r\n        this.utanReduction = new function () {\r\n            this.exMoms = 0;\r\n            this.incMoms = 0;\r\n        };\r\n        this.medReduction = new function () {\r\n            this.exMoms = 0;\r\n            this.incMoms = 0;\r\n        };\r\n        this.material = new function () {\r\n            this.exMoms = 0;\r\n            this.incMoms = 0;\r\n        };\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/entities/price.ts","export class PriceSet {\r\n    public name: string;\r\n    public unitPrice: number;\r\n    public discountRate: number = 0.50;\r\n    public incVat: boolean = false;\r\n    public vatRate: number = 0.25;\r\n    public materialVat: number = 0.04;\r\n    public travelCost: number = 0;\r\n\r\n    constructor(name: string, unitPrice: number, discountRate: number, incVat: boolean, vatRate: number, materialVat: number, travelCost: number) {\r\n        this.name = name;\r\n        this.unitPrice = unitPrice;\r\n        this.discountRate = discountRate;\r\n        this.incVat = incVat;\r\n        this.vatRate = vatRate;\r\n        this.materialVat = materialVat;\r\n        this.travelCost = travelCost;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/entities/priceSet.ts","export * from \"./entities/price\";\r\nexport * from \"./abstraction/priceCalculator\";\r\nexport * from \"./entities/priceSet\";\r\nexport * from \"./priceCalculatorByHour.service\";\r\nexport * from \"./priceCalculatorBySquareMeters.service\";\r\nexport * from \"./components/widget-priceCalculatorBySquareMeters.component\";\r\nexport * from \"./components/widget-priceCalculatorByHours.component\";\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/index.ts","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { ButtonsModule } from \"ngx-bootstrap/buttons\";\r\nimport { SelectModule } from \"ng2-select-compat\"\r\nimport * as bl from \"../../blueleet\";\r\nimport { WidgetPriceCalculatorBySquareMetersComponent, WidgetPriceCalculatorByHoursComponent } from \"./index\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, ReactiveFormsModule, ButtonsModule, SelectModule, bl.BlueLeetUmbracoModule.forRoot(), bl.LanguageModule],\r\n    exports: [WidgetPriceCalculatorBySquareMetersComponent, WidgetPriceCalculatorByHoursComponent],\r\n    declarations: [WidgetPriceCalculatorBySquareMetersComponent, WidgetPriceCalculatorByHoursComponent]\r\n})\r\nexport class PriceCalculationModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/module.ts","import { Injectable } from \"@angular/core\";\r\nimport { Price, PriceCalculator } from \"./index\";\r\nimport { PriceCalculatorServiceBase } from \"./abstraction/priceCalculatorServiceBase\";\r\nconst _ = require(\"lodash\");\r\n\r\n@Injectable()\r\nexport class PriceCalculatorByHours extends PriceCalculatorServiceBase implements PriceCalculator {\r\n    private hours: number;\r\n    private timesYear: number;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public setHours(value: number) {\r\n        this.hours = _.toNumber(value);\r\n    }\r\n\r\n    public setTimesYear(value: number) {\r\n        this.timesYear = _.toNumber(value);\r\n    }\r\n\r\n    public calculate(): Price {\r\n        // beräkningar börjar här\r\n        const c = this.pris;\r\n        const cost1 = c.utanReduction;\r\n        const cost2 = c.medReduction;\r\n        const costMat = c.material;\r\n\r\n        // beräkningar per månad = timme * pris * tillfällen per år.\r\n        cost1.exMoms = (this.hours * c.styckPris.exMoms * this.timesYear) / 12;\r\n\r\n        // beräkna material kostnaden\r\n        const materialMoms = parseInt(\"0.0\", 10) + this.materialMoms;\r\n        costMat.exMoms = cost1.exMoms * materialMoms;\r\n\r\n        // beräkna skattereduktionen genom kostnaden av cost1 ex moms.\r\n        cost2.exMoms = cost1.exMoms * this.skattReduction;\r\n\r\n        // lägg till övriga kostnader\r\n        let travelCost = (this.timesYear * this.resekostnad) / 12;\r\n        cost1.exMoms += costMat.exMoms + travelCost;\r\n        cost2.exMoms += costMat.exMoms + travelCost;\r\n\r\n        // beräkna kostnaden inc moms.\r\n        costMat.incMoms = costMat.exMoms * this.moms;\r\n        cost1.incMoms = cost1.exMoms * this.moms;\r\n        cost2.incMoms = cost2.exMoms * this.moms;\r\n\r\n        // avrunda uppåt till närmaste heltal.\r\n        cost1.exMoms = this.roundUp(cost1.exMoms);\r\n        cost2.exMoms = this.roundUp(cost2.exMoms);\r\n\r\n        cost1.incMoms = this.roundUp(cost1.incMoms);\r\n        cost2.incMoms = this.roundUp(cost2.incMoms);\r\n\r\n        return c;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/priceCalculatorByHour.service.ts","import { Injectable } from \"@angular/core\";\r\nimport { Price, PriceCalculator } from \"./index\";\r\nimport { PriceCalculatorServiceBase } from \"./abstraction/priceCalculatorServiceBase\";\r\nconst _ = require(\"lodash\");\r\n\r\n@Injectable()\r\nexport class PriceCalculatorBySquareMeters extends PriceCalculatorServiceBase implements PriceCalculator {\r\n    private squareMeters: number;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public setSquareMeters(value: number): void {\r\n        this.squareMeters = _.toNumber(value);\r\n    }\r\n\r\n    public calculate(): Price {\r\n        // beräkningar börjar här\r\n        const c = this.pris;\r\n        const cost1 = c.utanReduction;\r\n        const cost2 = c.medReduction;\r\n        const costMat = c.material;\r\n        let meter2 = this.squareMeters;\r\n\r\n        // beräkningar av 1 kvm = pris * värdet av kvadratmeter.\r\n        cost1.exMoms = meter2 * c.styckPris.exMoms;\r\n\r\n        // beräkna material kostnaden\r\n        const materialMoms = parseInt(\"0.0\", 10) + this.materialMoms;\r\n        costMat.exMoms = cost1.exMoms * materialMoms;\r\n\r\n        // beräkna skattereduktionen genom kostnaden av cost1 ex moms.\r\n        cost2.exMoms = cost1.exMoms * this.skattReduction;\r\n\r\n        // lägg till övriga kostnader momspliktig\r\n        cost1.exMoms += costMat.exMoms;\r\n        cost2.exMoms += costMat.exMoms;\r\n\r\n        // beräkna kostnaden inc moms.\r\n        costMat.incMoms = costMat.exMoms * this.moms;\r\n        cost1.incMoms = cost1.exMoms * this.moms;\r\n        cost2.incMoms = cost2.exMoms * this.moms;\r\n\r\n        // lägg till övriga kostnader som ej är momspliktig\r\n        cost1.incMoms += this.resekostnad;\r\n        cost2.incMoms += this.resekostnad;\r\n\r\n        // avrunda uppåt till närmaste heltal.\r\n        cost1.exMoms = this.roundUp(cost1.exMoms);\r\n        cost2.exMoms = this.roundUp(cost2.exMoms);\r\n\r\n        cost1.incMoms = this.roundUp(cost1.incMoms);\r\n        cost2.incMoms = this.roundUp(cost2.incMoms);\r\n\r\n        return c;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/modules/PriceCalculation/priceCalculatorBySquareMeters.service.ts","import \"core-js/es6/symbol\";\r\nimport \"core-js/es6/object\";\r\nimport \"core-js/es6/function\";\r\nimport \"core-js/es6/parse-int\";\r\nimport \"core-js/es6/parse-float\";\r\nimport \"core-js/es6/number\";\r\nimport \"core-js/es6/math\";\r\nimport \"core-js/es6/string\";\r\nimport \"core-js/es6/date\";\r\nimport \"core-js/es6/array\";\r\nimport \"core-js/es6/regexp\";\r\nimport \"core-js/es6/map\";\r\nimport \"core-js/es6/set\";\r\nimport \"core-js/es6/reflect\";\r\n\r\nimport \"core-js/es7/reflect\";\r\n\r\n// import \"reflect-metadata\";\r\n// import \"core-js/es6\";\r\n// import \"core-js/es7/reflect\";\r\nrequire(\"zone.js/dist/zone\");\r\n\r\n// Development\r\nif (ENV === \"development\") {\r\n    Error[\"stackTraceLimit\"] = Infinity;\r\n    require(\"zone.js/dist/long-stack-trace-zone\");\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/polyfills.browser.ts","import { Injectable, Inject, } from \"@angular/core\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport * as bl from \"./blueleet\";\r\nimport { LoginEventService, LoginEventType } from \"./loginEvent.service\";\r\nimport { IMemberPayload as MemberPayload } from \"./abstraction/IMemberPayload\";\r\n\r\n@Injectable()\r\nexport class UserService {\r\n    public onHasAccess: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n    public onIsAdminChange: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n\r\n    constructor(\r\n        @Inject(bl.UmbracoAjaxService) protected umbracoAjaxService: bl.UmbracoAjaxService,\r\n        @Inject(LoginEventService) loginEventService: LoginEventService\r\n    ) {\r\n        loginEventService.on(LoginEventType.Success).subscribe((value: MemberPayload) => {\r\n            if (value.user) {\r\n                this.onHasAccess.next(true);\r\n            }\r\n        });\r\n        loginEventService.onError().subscribe(() => {\r\n            this.onHasAccess.next(false);\r\n        });\r\n    }\r\n\r\n    getMember(): Promise<any> {\r\n        return this.umbracoAjaxService.post(\"MemberSurface\", \"GetMemberPost\").then(value => {\r\n            if (value) {\r\n                this.onHasAccess.next(true);\r\n            } else {\r\n                this.onHasAccess.next(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    hasAccess(revalidate: boolean = true): Promise<boolean> {\r\n        console.log(`HasAccess called`);\r\n        let value = this.onHasAccess.getValue();\r\n        if (revalidate === false && !Object.isNullOrUndefined(value)) {\r\n            console.log(`HasAccess: Using stored value '${value}'`);\r\n            return Promise.resolve(value);\r\n        }\r\n\r\n        const promise = this.umbracoAjaxService.post(\"MemberSurface\", \"HasAccessPost\").catch((): void => {\r\n            console.log(`HasAccess-Catch: Evaluated to 'false`);\r\n            this.onHasAccess.next(false);\r\n        }).then(v => {\r\n            if (v) {\r\n                console.log(`HasAccess-Then: Evaluated to 'true`);\r\n                this.onHasAccess.next(true);\r\n                return true;\r\n            }\r\n\r\n            console.log(`HasAccess-Then: Evaluated to 'false`);\r\n            return false;\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    isAdmin(): Promise<boolean> {\r\n        console.log(`IsAdmin called`);\r\n        const promise = this.umbracoAjaxService.post(\"MemberSurface\", \"IsAdminPost\").then(value => {\r\n            this.onIsAdminChange.next(value);\r\n            return value;\r\n        });\r\n        return promise;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/user.service.ts","import { Injectable } from \"@angular/core\";\r\nimport { AbstractControl, ValidatorFn, AsyncValidatorFn, Validators } from \"@angular/forms\";\r\nimport { CustomValidators } from \"ng2-validation\";\r\nimport * as Rx from \"rxjs/Rx\";\r\nimport { UmbracoAjaxService } from \"./blueleet/umbraco-ajax-Service\";\r\nimport { PasswordVerdict } from \"./enums/password-verdict\";\r\nimport { AsyncObservableValidator } from \"./blueleet/Validator/AsyncObservableValidator\";\r\nimport { IPayload } from \"./abstraction/IPayload\";\r\nimport { GenericMessages } from \"./enums/generic-messages-enum\";\r\nconst zxcvbn = require(\"zxcvbn\");\r\nconst _ = require(\"lodash\");\r\n\r\n@Injectable()\r\nexport class ValidationService implements CustomValidators {\r\n    private static passwordStrengthChange: Rx.Subject<any> = new Rx.Subject<any>();\r\n    private static validatorErrorMessages: any = null;\r\n\r\n    static getValidatorErrorMessage(validatorName: string, validatorValue?: any) {\r\n        const getErrorMessage = (fallback: string) => {\r\n            if (validatorName === \"weakPassword\") {\r\n                if (!Object.isNullOrUndefined(validatorValue.strength.feedback.warning)) {\r\n                    return validatorValue.strength.feedback.warning;\r\n                }\r\n            }\r\n\r\n            let compiledValue = _.template(fallback)(validatorValue);\r\n            return compiledValue;\r\n        };\r\n\r\n        if (validatorName === \"creditCard\") {\r\n            validatorName = \"invalidCreditCard\";\r\n        }\r\n\r\n        const configValue = getErrorMessage(this.validatorErrorMessages[validatorName]);\r\n        return configValue;\r\n    }\r\n\r\n    static passwordValidator(minLength: number): ValidatorFn {\r\n        return (control): any => {\r\n            const strength = zxcvbn(control.value);\r\n            this.passwordStrengthChange.next(strength);\r\n            let length = control.value ? control.value.length : 0;\r\n            if (length < minLength) {\r\n                return { invalidPasswordLength: { requiredLength: minLength, actualLength: length } };\r\n            }\r\n\r\n            if (strength.score < 3) {\r\n                return { weakPassword: { strength: strength } };\r\n            }\r\n\r\n            return null;\r\n        };\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of a range length.\r\n    */\r\n    static rangeLength(rangeLength: Array<number>): ValidatorFn {\r\n        return CustomValidators.rangeLength(rangeLength);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of a min value.\r\n    */\r\n    static min(min: number): ValidatorFn {\r\n        return Validators.minLength(min);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of a max value.\r\n    */\r\n    static max(max: number): ValidatorFn {\r\n        return Validators.maxLength(max);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of a range value.\r\n    */\r\n    static range(range: Array<number>): ValidatorFn {\r\n        return CustomValidators.range(range);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of digits.\r\n    */\r\n    static digits(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.digits(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of number.\r\n    */\r\n    static number(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.number(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of url.\r\n    */\r\n    static url(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.url(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of email.\r\n    */\r\n    static email(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.email(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of date.\r\n    */\r\n    static date(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.date(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of minDate.\r\n    */\r\n    static minDate(minDate: any): ValidatorFn {\r\n        return CustomValidators.minDate(minDate);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of maxDate.\r\n    */\r\n    static maxDate(maxDate: any): ValidatorFn {\r\n        return CustomValidators.maxDate(maxDate);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of dateISO.\r\n    */\r\n    static dateISO(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.dateISO(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of creditCard.\r\n    */\r\n    static creditCard(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.creditCard(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of JSON.\r\n    */\r\n    static json(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.json(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of base64.\r\n    */\r\n    static base64(control: AbstractControl): { [key: string]: boolean } {\r\n        return CustomValidators.base64(control);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of phone.\r\n    */\r\n    static phone(locale?: string): ValidatorFn {\r\n        // ToDo: implament phone for sweden local.\r\n        return CustomValidators.phone(locale);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value of uuid.\r\n    */\r\n    static uuid(version?: string): ValidatorFn {\r\n        return CustomValidators.uuid(version);\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value to equal another value.\r\n    */\r\n    static equal(val: any): ValidatorFn {\r\n        return (control: AbstractControl): { [key: string]: any } => {\r\n            if (!Object.isNullOrUndefined(Validators.required(control))) {\r\n                return null;\r\n            }\r\n\r\n            let v: any = control.value;\r\n\r\n            return val === v ? null : { equal: { equalValue: val } };\r\n        };\r\n    }\r\n\r\n    /**\r\n    * Validator that requires controls to have a value to equal another control.\r\n    */\r\n    static equalTo(equalControl: AbstractControl, thisControlName: string, equalControlName: string): ValidatorFn {\r\n        let subscribe: boolean = false;\r\n        return (control: AbstractControl): { [key: string]: any } => {\r\n            if (!subscribe) {\r\n                subscribe = true;\r\n                equalControl.valueChanges.subscribe(() => {\r\n                    control.updateValueAndValidity();\r\n                });\r\n            }\r\n\r\n            let v: string = control.value;\r\n\r\n            return equalControl.value === v ? null : { equalTo: { thisControlName: thisControlName, equalControlName: equalControlName } };\r\n        };\r\n    }\r\n\r\n    constructor(umbracoAjaxService: UmbracoAjaxService) {\r\n        if (ValidationService.validatorErrorMessages === null) {\r\n            umbracoAjaxService.post(\"TranslationHelper\", \"GetValidationServiceMessagesPost\")\r\n                .then((value) => {\r\n                    ValidationService.validatorErrorMessages = value;\r\n                });\r\n        }\r\n    }\r\n\r\n    pattern(p: RegExp, message: string): ValidatorFn {\r\n        return (control: AbstractControl): { patternInvalidValue: { message: string } } => {\r\n            if (p.test(control.value)) {\r\n                return { patternInvalidValue: { message: message } };\r\n            }\r\n\r\n            return null;\r\n        };\r\n    }\r\n\r\n    usernameValidator(umbracoAjaxService: UmbracoAjaxService): AsyncValidatorFn {\r\n        return AsyncObservableValidator.create(value => {\r\n            return umbracoAjaxService.post(\"MemberSurface\", \"ValidateUsernamePost\", { username: value })\r\n                .then((v: IPayload) => {\r\n                    if (v.hasOwnProperty(\"messageType\") && v.messageType === GenericMessages.Danger) {\r\n                        return { invalidUsername: v.message };\r\n                    }\r\n                    if (v) {\r\n                        return { usernameTaken: true };\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    emailValidator(umbracoAjaxService: UmbracoAjaxService): AsyncValidatorFn {\r\n        return AsyncObservableValidator.create(value => {\r\n            return umbracoAjaxService.post(\"MemberSurface\", \"ValidateEmailPost\", { email: value })\r\n                .then((v: IPayload) => {\r\n                    if (v) {\r\n                        return { emailAlreadyRegistered: true };\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    onPasswordStrengthChange(): Rx.Observable<any> {\r\n        return ValidationService.passwordStrengthChange.asObservable();\r\n    }\r\n\r\n    getPasswordVerdict(score: number, verdict = PasswordVerdict): { message: string, passwordVerdict: PasswordVerdict } {\r\n        if (score === 0 || score === verdict.Weak) {\r\n            return { message: PasswordVerdict[PasswordVerdict.Weak], passwordVerdict: PasswordVerdict.Weak };\r\n        } else if (score === verdict.Normal) {\r\n            return { message: PasswordVerdict[PasswordVerdict.Normal], passwordVerdict: PasswordVerdict.Normal };\r\n        } else if (score === verdict.Medium) {\r\n            return { message: PasswordVerdict[PasswordVerdict.Medium], passwordVerdict: PasswordVerdict.Medium };\r\n        } else if (score === verdict.Strong) {\r\n            return { message: PasswordVerdict[PasswordVerdict.Strong], passwordVerdict: PasswordVerdict.Strong };\r\n        } else if (score <= PasswordVerdict.VeryStrong) {\r\n            return { message: \"Very Strong\", passwordVerdict: PasswordVerdict.VeryStrong };\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/validation.service.ts","// Angular 2\r\nimport \"@angular/platform-browser\";\r\nimport \"@angular/platform-browser-dynamic\";\r\nimport \"@angular/core\";\r\nimport \"@angular/common\";\r\nimport \"@angular/http\";\r\n\r\n// Reactive\r\nimport \"rxjs\";\r\n\r\n// Other vendors for example jQuery, Lodash or Bootstrap\r\n// You can import js, ts, CSS, sass\r\nimport \"tether\";\r\nimport \"scriptjs\";\r\n\r\n// import 'tether/src/css/tether-theme-basic.sass'; // optional\r\nimport \"./Generics/bootstrap\";\r\n\r\n// Extensions\r\nimport \"./blueleet/extensions/ObjectExtensions\";\r\nimport \"./blueleet/extensions/StringExtensions\";\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/vendor.browser.ts","import { Directive, ElementRef, Inject, HostListener, OnInit } from \"@angular/core\";\r\nimport * as $ from \"jquery\";\r\nimport { DetectDeviceService } from \"./detectDevice.service\";\r\n\r\n@Directive({ selector: \"[widget-search]\" })\r\nexport class WidgetSearchDirective implements OnInit {\r\n    private inputEl: JQuery;\r\n    private self: JQuery;\r\n\r\n    constructor( @Inject(ElementRef) public el: ElementRef, @Inject(DetectDeviceService) public detectDeviceService: DetectDeviceService) { }\r\n\r\n    @HostListener(\"click\", [\"$event\"])\r\n    public onClick($event: Event): void {\r\n        this.initSearch($event);\r\n    }\r\n\r\n    @HostListener(\"touchstart\", [\"$event\"])\r\n    public onTouchStart($event: Event): void {\r\n        this.initSearch($event);\r\n    }\r\n\r\n    initSearch($event: Event): void {\r\n        // trim value\r\n        let searchFor = this.inputEl.val().trim();\r\n        this.inputEl.val(searchFor);\r\n\r\n        if (!this.self.hasClass(\"search-open\")) { // open it\r\n            $event.preventDefault();\r\n            this.open();\r\n        } else if (this.self.hasClass(\"search-open\") && /^\\s*$/.test(searchFor)) { // close it\r\n            $event.preventDefault();\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.self.addClass(\"search-open\");\r\n        if (!this.detectDeviceService.isMobile()) {\r\n            this.inputEl.focus();\r\n        }\r\n    }\r\n\r\n    close(): void {\r\n        this.self.blur();\r\n        this.self.removeClass(\"search-open\");\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.self = $(this.el.nativeElement);\r\n        this.inputEl = this.self.find(\"input.search-input\").first();\r\n        this.inputEl.on(\"click\", ev => { ev.stopPropagation(); });\r\n        this.inputEl.on(\"touchstart\", ev => { ev.stopPropagation(); });\r\n\r\n        $(document).on(\"click\", ($event: Event) => {\r\n            if (!$($event.target).closest(this.self).length) {\r\n                // Hide the component.\r\n                this.close();\r\n            }\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/~/tslint-loader!C:/Workspace/ClaremontUmbraco/ClaremontUmbraco.Web.UI.Client/src/typescript/widget-search.directive.ts"],"mappingstPA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACNA;;;;;;;ACAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpBA;AACA;;;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AAEA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAaA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAvBA;AAAA;AAAA;;;;;;;;;;;ACTA;AAEA;;;AAGA;AAAA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAdA;AAAA;;;;;;;;;;;ACNA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAaA;AAsBA;AAlCA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAVA;;AAAA;AAaA;AAAA;AACA;AACA;AACA;AAEA;AACA;;AAAA;;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAvCA;AAAA;AAyCA;AACA;AAAA;AAAA;AACA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AAgBA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAvBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AA0BA;AAxBA;AAyBA;AACA;AAAA;AAFA;AACA;AADA;AAvBA;AACA;AAgBA;AAlBA;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AAMA;AAoHA;AACA;AACA;AArHA;AAEA;;;;AAIA;AAEA;;;;AAIA;AAEA;;;;;AAKA;AAEA;;;AAGA;AAEA;;;;;AAKA;AAEA;;;AAGA;AAEA;;;;AAIA;AAEA;;;;AAIA;AAEA;;;;;;AAMA;AAEA;;;AAGA;AAEA;AACA;;;;AAIA;AAEA;;;AAGA;AAVA;AAaA;AACA;;;;;AAKA;AAEA;;;AAGA;AAEA;;;AAGA;AAhBA;AAmBA;AACA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAdA;AA/FA;AAqHA;AAEA;AACA;AACA;AACA;AACA;AACA;AA7HA;AAkHA;AAlHA;AAHA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AAGA;AAYA;AAAA;AACA;AACA;AAbA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAjGA;AAAA;AAAA;;;;;;;;;;ACCA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;ACxBA;AAEA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;AC1BA;;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAiDA;AAAA;AACA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAcA;AAAA;AA5BA;AAAA;AA8BA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AA1EA;AAAA;AA6EA;AAKA;AAIA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAAA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AARA;AAoCA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAJA;AAAA;AAAA;AAOA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAJA;AAAA;AAAA;AAOA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAnCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtNA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AAGA;AAMA;AAAA;AAAA;AALA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AAKA;AADA;AAEA;AAmCA;AAjCA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AApCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AAGA;AAMA;AAAA;AAAA;AAJA;AAIA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlDA;AACA;AACA;AAOA;AATA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AAGA;AAOA;AAAA;AAAA;AANA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA7CA;AAKA;AALA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AAIA;AASA;AAAA;AAAA;AANA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAsBA;AACA;AA/CA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AAdA;AAAA;AALA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;;;;;;;;ACbA;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AACA;AACA;AAIA;AAAA;AAEA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AAGA;AACA;AACA;AAlBA;AACA;AACA;AAFA;AALA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;;;;;;;;ACdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;;AACA;AACA;AAEA;AACA;AACA;AACA;AAbA;AAAA;AALA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;;;;;;;;ACbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;AALA;;AAOA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AAvBA;AAeA;AAfA;AALA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;;;;;;;;ACbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AAbA;AAAA;AALA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;;;;;;;;ACbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAPA;AACA;AAQA;AAAA;AAEA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AAhBA;AACA;AACA;AAFA;AALA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;;;;;;;;ACbA;;;;;;;;;;;;;;;;ACAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AARA;AAAA;AAAA;AAQA;AAEA;AACA;AAEA;AACA;AApBA;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAEA;AAFA;AACA;AADA;AAHA;AACA;AAFA;AAIA;AASA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAjBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AA9GA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAZA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;AC1BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAOA;AAGA;AAAA;AAFA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AADA;AAHA;AACA;AAFA;AAIA;AAkBA;AAIA;AAAA;AAFA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AACA;AAFA;AAHA;AACA;AAFA;AAIA;AAmBA;AAIA;AAAA;AAFA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AACA;AAFA;AAHA;AACA;AAFA;AAIA;AAeA;AAAA;AA4CA;AAAA;AACA;AACA;AACA;AACA;AACA;AAnCA;AACA;AACA;AACA;AAcA;AAKA;AAgBA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/OA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAqBA;AAvDA;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AAKA;AADA;AAEA;AACA;AAAA;AAFA;AAAA;AAAA;AAKA;AADA;AAEA;AACA;AAAA;AAFA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AALA;AACA;AACA;AACA;AAJA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AApBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AAOA;AAQA;AACA;AACA;AACA;AAVA;AAIA;AACA;AAKA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AACA;AAEA;AAEA;AACA;AANA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AASA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAVA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;ACTA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAOA;AAQA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAKA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAnDA;AACA;AACA;AACA;AACA;AAJA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AARA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAxBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;;AAAA;AAAA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AA5KA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AAGA;AAOA;AAGA;AAAA;;AAFA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;AALA;;AAOA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtFA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AAEA;AACA;AAMA;AAAA;AAMA;AAAA;AAGA;AACA;AARA;AACA;AACA;AASA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAzDA;AACA;AACA;AAFA;AAHA;AACA;AAFA;AAIA;;;;;;;ACVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAsBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAWA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AA/MA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAdA;AALA;AACA;AACA;AACA;AAJA;AAMA;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAOA;AAAA;AAGA;AACA;AARA;AAEA;AAQA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAlDA;AACA;AACA;AAFA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAYA;AAAA;AAYA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAbA;AAEA;AAaA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AArFA;AACA;AACA;AACA;AAHA;AATA;AACA;AAMA;AARA;AAUA;;;;;;;;;;;ACzBA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;AALA;;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAxIA;AACA;AACA;AAFA;AAHA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAcnIA;AACA;AADA;AAHA;AACA;AAFA;AAIA;;;;;;;ACxBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AACA;AAOA;AAAA;AAIA;AAAA;AAGA;AACA;AACA;AARA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAoBA;AAlBA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;AALA;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnGA;AACA;AACA;AACA;AACA;AAJA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AAGA;AACA;AAEA;AAEA;AAMA;AAAA;AAIA;AAAA;AAGA;AACA;AACA;AARA;AAUA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAgBA;AAAA;AAGA;AACA;AACA;AACA;AAdA;AACA;AACA;AAEA;AACA;AACA;AAWA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA7FA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAVA;AALA;AACA;AACA;AACA;AAJA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AAEA;AAGA;AAGA;AAAA;AAFA;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhEA;AAAA;AAAA;AAkEA;AAAA;AACA;AAGA;AAAA;AAJA;AAAA;;;;;;;ACzEA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkCA;AAAA;AA4CA;AAAA;AAGA;AACA;AACA;AACA;AA9CA;AAGA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAWA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA5fA;AACA;AACA;AACA;AACA;AAyRA;AA7RA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;AChDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAjCA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAnBA;AAAA;AAHA;AACA;AAFA;AAIA;AA0BA;AAAA;AAQA;AAAA;AAGA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AApFA;AACA;AACA;AAFA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AASA;AAAA;AAGA;AACA;AACA;AACA;AARA;AAWA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AA1GA;AACA;AACA;AACA;AACA;AAJA;AAHA;AACA;AAFA;AAIA;;;;;;;ACfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAKA;AAAA;AAGA;AACA;AACA;AACA;AACA;AATA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AANA;AAWA;AACA;AAjEA;AAAA;AAHA;AACA;AAFA;AAIA;;;;;;;ACdA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;AACA;AACA;AAOA;AAIA;AACA;AACA;AACA;AANA;AACA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAuBA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAnBA;AAsBA;AACA;AAEA;AACA;AACA;AAzDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AAEA;;;AAIA;AAIA;AAEA;AAAA;AALA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAbA;AAAA;AAAA;;;;;;;;;;;ACNA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AARA;AAAA;;;;;;;;;;;ACAA;AAAA;AACA;AACA;;;;;;;;;;;;ACFA;AAAA;AACA;;;AAGA;AAEA;;;AAGA;;;;;;;;;;;;ACTA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACJA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACTA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACbA;AAAA;AACA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;;;;;;;;;;;;ACxBA;AAAA;AACA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AAGA;AACA;AAMA;AAIA;AAAA;AAFA;AAEA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAjCA;AACA;AACA;AAKA;AAKA;AAZA;AAHA;AACA;AAFA;AAIA;AAuCA;AASA;AACA;AACA;AACA;AAXA;AACA;AACA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAxFA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDA;AAEA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAAA;AAFA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AAtCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AAGA;AAIA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAvBA;AACA;AAMA;AAKA;AAZA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AAEA;AAGA;AAgBA;AACA;AACA;AACA;AAlBA;AACA;AACA;AAgBA;AAdA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA5CA;AAKA;AALA;AAAA;AA+CA;AAIA;AACA;AACA;AACA;AANA;AACA;AAKA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrDA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAZA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AAEA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AA1CA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAdA;AAAA;AAHA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA0DA;AAAA;AAAA;AAAA;AAAA;AAvDA;AAkBA;AA0BA;AASA;AAtDA;AAwDA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCA;;;;;;;;;;;AC7GA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;ACrBA;AAAA;AAGA;AAHA;AAAA;;;;;;;;;;;ACHA;AACA;AAEA;AASA;AAFA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA/CA;AAAA;;;;;;;ACHA;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAQA;AAEA;AACA;AAWA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzEA;AAYA;AACA;AACA;AACA;AAfA;AAAA;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAGA;AAHA;AAAA;AAKA;AAAA;AAGA;AAHA;AAAA;AAgBA;AAAA;AAwBA;AAAA;AASA;AAhCA;AAiBA;AACA;AAiBA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AA9GA;AAMA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AALA;AACA;AACA;AACA;AAJA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAGA;AAHA;AAAA;AAeA;AAAA;AAmBA;AAAA;AASA;AA3BA;AAgBA;AAcA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAlFA;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AALA;AACA;AACA;AACA;AAJA;AAMA;;;;;;;;;;;AC1BA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAAA;;;;;;;;;;;ACAA;AASA;AANA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAJA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AAEA;AACA;AAGA;AAAA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AApDA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AAEA;AACA;AAGA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAnDA;AAAA;AAAA;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AAIA;AAIA;AAAA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7DA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAmMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAtMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAtQA;AACA;AACA;AAFA;AAAA;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AAGA;AAIA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvDA;AAOA;AAKA;AAZA;AAAA;;;;;;;;;;;;;;","sourceRoot":""}